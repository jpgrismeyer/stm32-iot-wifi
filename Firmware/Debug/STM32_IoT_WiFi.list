
STM32_IoT_WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ed0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800a060  0800a060  0001a060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6b0  0800a6b0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6b0  0800a6b0  0001a6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6b8  0800a6b8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6b8  0800a6b8  0001a6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6bc  0800a6bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a6c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  200001d4  0800a894  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ac  0800a894  000208ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000118b9  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000264a  00000000  00000000  00031b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00034150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c21  00000000  00000000  000350f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004193  00000000  00000000  00035d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000136f3  00000000  00000000  00039eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9af1  00000000  00000000  0004d59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005650  00000000  00000000  00147090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0014c6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a048 	.word	0x0800a048

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a048 	.word	0x0800a048

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <uprintln>:
static HAL_StatusTypeDef LPS22HB_Init(I2C_HandleTypeDef *hi2c);
static HAL_StatusTypeDef LPS22HB_ReadPressure_hPa(I2C_HandleTypeDef *hi2c, float *out_hPa);


/* ==== Utils UART ==== */
static void uprintln(const char *s) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t*)s, strlen(s), 200);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff f939 	bl	8000270 <strlen>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	23c8      	movs	r3, #200	; 0xc8
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	480b      	ldr	r0, [pc, #44]	; (8001034 <uprintln+0x44>)
 8001008:	f003 fc9c 	bl	8004944 <HAL_UART_Transmit>
  const char crlf[] = "\r\n";
 800100c:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <uprintln+0x48>)
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	4611      	mov	r1, r2
 8001016:	8019      	strh	r1, [r3, #0]
 8001018:	3302      	adds	r3, #2
 800101a:	0c12      	lsrs	r2, r2, #16
 800101c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)crlf, 2, 200);
 800101e:	f107 010c 	add.w	r1, r7, #12
 8001022:	23c8      	movs	r3, #200	; 0xc8
 8001024:	2202      	movs	r2, #2
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <uprintln+0x44>)
 8001028:	f003 fc8c 	bl	8004944 <HAL_UART_Transmit>
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000244 	.word	0x20000244
 8001038:	0800a060 	.word	0x0800a060

0800103c <uprintf>:
static void uprintf(const char *fmt, ...) {
 800103c:	b40f      	push	{r0, r1, r2, r3}
 800103e:	b580      	push	{r7, lr}
 8001040:	b0aa      	sub	sp, #168	; 0xa8
 8001042:	af00      	add	r7, sp, #0
  char buf[160];
  va_list ap;
  va_start(ap, fmt);
 8001044:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001048:	607b      	str	r3, [r7, #4]
  vsnprintf(buf, sizeof(buf), fmt, ap);
 800104a:	f107 0008 	add.w	r0, r7, #8
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001054:	21a0      	movs	r1, #160	; 0xa0
 8001056:	f005 fbaf 	bl	80067b8 <vsniprintf>
  va_end(ap);
  HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), 200);
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f906 	bl	8000270 <strlen>
 8001064:	4603      	mov	r3, r0
 8001066:	b29a      	uxth	r2, r3
 8001068:	f107 0108 	add.w	r1, r7, #8
 800106c:	23c8      	movs	r3, #200	; 0xc8
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <uprintf+0x48>)
 8001070:	f003 fc68 	bl	8004944 <HAL_UART_Transmit>
}
 8001074:	bf00      	nop
 8001076:	37a8      	adds	r7, #168	; 0xa8
 8001078:	46bd      	mov	sp, r7
 800107a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800107e:	b004      	add	sp, #16
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000244 	.word	0x20000244

08001088 <I2C_Scan>:

/* ==== I2C helpers ==== */
static void I2C_Scan(I2C_HandleTypeDef *hi2c, const char *name) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uprintf("[I2C] Scanning %s ...\r\n", name);
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <I2C_Scan+0x54>)
 8001096:	f7ff ffd1 	bl	800103c <uprintf>
  for (uint8_t a = 0x08; a <= 0x77; a++) {
 800109a:	2308      	movs	r3, #8
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	e015      	b.n	80010cc <I2C_Scan+0x44>
    if (HAL_I2C_IsDeviceReady(hi2c, I2C_ADDR(a), 1, 10) == HAL_OK) {
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	b299      	uxth	r1, r3
 80010a8:	230a      	movs	r3, #10
 80010aa:	2201      	movs	r2, #1
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f001 fc85 	bl	80029bc <HAL_I2C_IsDeviceReady>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d106      	bne.n	80010c6 <I2C_Scan+0x3e>
      uprintf("  - Found: 0x%02X (8-bit 0x%02X)\r\n", a, I2C_ADDR(a));
 80010b8:	7bf9      	ldrb	r1, [r7, #15]
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	461a      	mov	r2, r3
 80010c0:	4807      	ldr	r0, [pc, #28]	; (80010e0 <I2C_Scan+0x58>)
 80010c2:	f7ff ffbb 	bl	800103c <uprintf>
  for (uint8_t a = 0x08; a <= 0x77; a++) {
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	3301      	adds	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b77      	cmp	r3, #119	; 0x77
 80010d0:	d9e6      	bls.n	80010a0 <I2C_Scan+0x18>
    }
  }
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	0800a064 	.word	0x0800a064
 80010e0:	0800a07c 	.word	0x0800a07c

080010e4 <HTS221_ReadCal_T>:
  float T1_degC;
  int16_t T0_OUT;
  int16_t T1_OUT;
} HTS221_TCal;

static HAL_StatusTypeDef HTS221_ReadCal_T(HTS221_TCal *cal) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af04      	add	r7, sp, #16
 80010ea:	6078      	str	r0, [r7, #4]
  uint8_t t0_l, t1_l, t_msb, b[2];

  if (HAL_I2C_Mem_Read(&hi2c2, I2C_ADDR(HTS221_ADDR_7B), HTS221_T0_degC_x8,
 80010ec:	2332      	movs	r3, #50	; 0x32
 80010ee:	9302      	str	r3, [sp, #8]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	f107 0313 	add.w	r3, r7, #19
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	2232      	movs	r2, #50	; 0x32
 80010fe:	21be      	movs	r1, #190	; 0xbe
 8001100:	485d      	ldr	r0, [pc, #372]	; (8001278 <HTS221_ReadCal_T+0x194>)
 8001102:	f001 fb41 	bl	8002788 <HAL_I2C_Mem_Read>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HTS221_ReadCal_T+0x2c>
                       I2C_MEMADD_SIZE_8BIT, &t0_l, 1, 50) != HAL_OK) return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0ae      	b.n	800126e <HTS221_ReadCal_T+0x18a>
  if (HAL_I2C_Mem_Read(&hi2c2, I2C_ADDR(HTS221_ADDR_7B), HTS221_T1_degC_x8,
 8001110:	2332      	movs	r3, #50	; 0x32
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	2301      	movs	r3, #1
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	f107 0312 	add.w	r3, r7, #18
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	2233      	movs	r2, #51	; 0x33
 8001122:	21be      	movs	r1, #190	; 0xbe
 8001124:	4854      	ldr	r0, [pc, #336]	; (8001278 <HTS221_ReadCal_T+0x194>)
 8001126:	f001 fb2f 	bl	8002788 <HAL_I2C_Mem_Read>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HTS221_ReadCal_T+0x50>
                       I2C_MEMADD_SIZE_8BIT, &t1_l, 1, 50) != HAL_OK) return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e09c      	b.n	800126e <HTS221_ReadCal_T+0x18a>
  if (HAL_I2C_Mem_Read(&hi2c2, I2C_ADDR(HTS221_ADDR_7B), HTS221_T0_T1_MSB,
 8001134:	2332      	movs	r3, #50	; 0x32
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2301      	movs	r3, #1
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	f107 0311 	add.w	r3, r7, #17
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	2235      	movs	r2, #53	; 0x35
 8001146:	21be      	movs	r1, #190	; 0xbe
 8001148:	484b      	ldr	r0, [pc, #300]	; (8001278 <HTS221_ReadCal_T+0x194>)
 800114a:	f001 fb1d 	bl	8002788 <HAL_I2C_Mem_Read>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HTS221_ReadCal_T+0x74>
                       I2C_MEMADD_SIZE_8BIT, &t_msb, 1, 50) != HAL_OK) return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e08a      	b.n	800126e <HTS221_ReadCal_T+0x18a>

  uint16_t T0_x8 = ((t_msb & 0x03) << 8) | t0_l;   // 10 bits
 8001158:	7c7b      	ldrb	r3, [r7, #17]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21b      	sxth	r3, r3
 800115e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001162:	b21a      	sxth	r2, r3
 8001164:	7cfb      	ldrb	r3, [r7, #19]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21b      	sxth	r3, r3
 800116c:	82fb      	strh	r3, [r7, #22]
  uint16_t T1_x8 = ((t_msb & 0x0C) << 6) | t1_l;   // 10 bits
 800116e:	7c7b      	ldrb	r3, [r7, #17]
 8001170:	019b      	lsls	r3, r3, #6
 8001172:	b21b      	sxth	r3, r3
 8001174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001178:	b21a      	sxth	r2, r3
 800117a:	7cbb      	ldrb	r3, [r7, #18]
 800117c:	b21b      	sxth	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b21b      	sxth	r3, r3
 8001182:	82bb      	strh	r3, [r7, #20]
  cal->T0_degC = T0_x8 / 8.0f;
 8001184:	8afb      	ldrh	r3, [r7, #22]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	edc3 7a00 	vstr	s15, [r3]
  cal->T1_degC = T1_x8 / 8.0f;
 800119c:	8abb      	ldrh	r3, [r7, #20]
 800119e:	ee07 3a90 	vmov	s15, r3
 80011a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80011aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	edc3 7a01 	vstr	s15, [r3, #4]

  // T0_OUT
  if (HAL_I2C_Mem_Read(&hi2c2, I2C_ADDR(HTS221_ADDR_7B), HTS221_T0_OUT_L,
 80011b4:	2332      	movs	r3, #50	; 0x32
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	2301      	movs	r3, #1
 80011ba:	9301      	str	r3, [sp, #4]
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	223c      	movs	r2, #60	; 0x3c
 80011c6:	21be      	movs	r1, #190	; 0xbe
 80011c8:	482b      	ldr	r0, [pc, #172]	; (8001278 <HTS221_ReadCal_T+0x194>)
 80011ca:	f001 fadd 	bl	8002788 <HAL_I2C_Mem_Read>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HTS221_ReadCal_T+0xf4>
                       I2C_MEMADD_SIZE_8BIT, b, 1, 50) != HAL_OK) return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e04a      	b.n	800126e <HTS221_ReadCal_T+0x18a>
  if (HAL_I2C_Mem_Read(&hi2c2, I2C_ADDR(HTS221_ADDR_7B), HTS221_T0_OUT_H,
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	3301      	adds	r3, #1
 80011de:	2232      	movs	r2, #50	; 0x32
 80011e0:	9202      	str	r2, [sp, #8]
 80011e2:	2201      	movs	r2, #1
 80011e4:	9201      	str	r2, [sp, #4]
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	223d      	movs	r2, #61	; 0x3d
 80011ec:	21be      	movs	r1, #190	; 0xbe
 80011ee:	4822      	ldr	r0, [pc, #136]	; (8001278 <HTS221_ReadCal_T+0x194>)
 80011f0:	f001 faca 	bl	8002788 <HAL_I2C_Mem_Read>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HTS221_ReadCal_T+0x11a>
                       I2C_MEMADD_SIZE_8BIT, b+1, 1, 50) != HAL_OK) return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e037      	b.n	800126e <HTS221_ReadCal_T+0x18a>
  cal->T0_OUT = (int16_t)((b[1] << 8) | b[0]);
 80011fe:	7b7b      	ldrb	r3, [r7, #13]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7b3b      	ldrb	r3, [r7, #12]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21a      	sxth	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	811a      	strh	r2, [r3, #8]

  // T1_OUT
  if (HAL_I2C_Mem_Read(&hi2c2, I2C_ADDR(HTS221_ADDR_7B), HTS221_T1_OUT_L,
 8001210:	2332      	movs	r3, #50	; 0x32
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	2301      	movs	r3, #1
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	223e      	movs	r2, #62	; 0x3e
 8001222:	21be      	movs	r1, #190	; 0xbe
 8001224:	4814      	ldr	r0, [pc, #80]	; (8001278 <HTS221_ReadCal_T+0x194>)
 8001226:	f001 faaf 	bl	8002788 <HAL_I2C_Mem_Read>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HTS221_ReadCal_T+0x150>
                       I2C_MEMADD_SIZE_8BIT, b, 1, 50) != HAL_OK) return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e01c      	b.n	800126e <HTS221_ReadCal_T+0x18a>
  if (HAL_I2C_Mem_Read(&hi2c2, I2C_ADDR(HTS221_ADDR_7B), HTS221_T1_OUT_H,
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	3301      	adds	r3, #1
 800123a:	2232      	movs	r2, #50	; 0x32
 800123c:	9202      	str	r2, [sp, #8]
 800123e:	2201      	movs	r2, #1
 8001240:	9201      	str	r2, [sp, #4]
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	223f      	movs	r2, #63	; 0x3f
 8001248:	21be      	movs	r1, #190	; 0xbe
 800124a:	480b      	ldr	r0, [pc, #44]	; (8001278 <HTS221_ReadCal_T+0x194>)
 800124c:	f001 fa9c 	bl	8002788 <HAL_I2C_Mem_Read>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HTS221_ReadCal_T+0x176>
                       I2C_MEMADD_SIZE_8BIT, b+1, 1, 50) != HAL_OK) return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e009      	b.n	800126e <HTS221_ReadCal_T+0x18a>
  cal->T1_OUT = (int16_t)((b[1] << 8) | b[0]);
 800125a:	7b7b      	ldrb	r3, [r7, #13]
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21a      	sxth	r2, r3
 8001260:	7b3b      	ldrb	r3, [r7, #12]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21a      	sxth	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	815a      	strh	r2, [r3, #10]

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001f0 	.word	0x200001f0

0800127c <HTS221_Init>:

static HAL_StatusTypeDef HTS221_Init(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af04      	add	r7, sp, #16
  uint8_t v = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	71fb      	strb	r3, [r7, #7]

  // WHO_AM_I
  if (HAL_I2C_Mem_Read(&hi2c2, I2C_ADDR(HTS221_ADDR_7B), HTS221_WHO_AM_I,
 8001286:	2332      	movs	r3, #50	; 0x32
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	2301      	movs	r3, #1
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	220f      	movs	r2, #15
 8001296:	21be      	movs	r1, #190	; 0xbe
 8001298:	4824      	ldr	r0, [pc, #144]	; (800132c <HTS221_Init+0xb0>)
 800129a:	f001 fa75 	bl	8002788 <HAL_I2C_Mem_Read>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d004      	beq.n	80012ae <HTS221_Init+0x32>
                       I2C_MEMADD_SIZE_8BIT, &v, 1, 50) != HAL_OK) {
    uprintln("HTS221 WHO_AM_I read failed (I2C)");
 80012a4:	4822      	ldr	r0, [pc, #136]	; (8001330 <HTS221_Init+0xb4>)
 80012a6:	f7ff fea3 	bl	8000ff0 <uprintln>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e039      	b.n	8001322 <HTS221_Init+0xa6>
  }
  if (v != HTS221_WHO_AM_I_VAL) {
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2bbc      	cmp	r3, #188	; 0xbc
 80012b2:	d006      	beq.n	80012c2 <HTS221_Init+0x46>
    uprintf("HTS221 WHO_AM_I mismatch: 0x%02X\r\n", v);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4619      	mov	r1, r3
 80012b8:	481e      	ldr	r0, [pc, #120]	; (8001334 <HTS221_Init+0xb8>)
 80012ba:	f7ff febf 	bl	800103c <uprintf>
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e02f      	b.n	8001322 <HTS221_Init+0xa6>
  }

  // AV_CONF: promedios (opcional). Por ejemplo temp avg = 16 samples, hum = 32 samples.
  uint8_t av = 0b00011110; // H_AVG=32 (101), T_AVG=16 (100) -> ver tabla datasheet
 80012c2:	231e      	movs	r3, #30
 80012c4:	71bb      	strb	r3, [r7, #6]
  if (HAL_I2C_Mem_Write(&hi2c2, I2C_ADDR(HTS221_ADDR_7B), HTS221_AV_CONF,
 80012c6:	2332      	movs	r3, #50	; 0x32
 80012c8:	9302      	str	r3, [sp, #8]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	1dbb      	adds	r3, r7, #6
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	2210      	movs	r2, #16
 80012d6:	21be      	movs	r1, #190	; 0xbe
 80012d8:	4814      	ldr	r0, [pc, #80]	; (800132c <HTS221_Init+0xb0>)
 80012da:	f001 f941 	bl	8002560 <HAL_I2C_Mem_Write>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d004      	beq.n	80012ee <HTS221_Init+0x72>
                        I2C_MEMADD_SIZE_8BIT, &av, 1, 50) != HAL_OK) {
    uprintln("HTS221 AV_CONF write failed");
 80012e4:	4814      	ldr	r0, [pc, #80]	; (8001338 <HTS221_Init+0xbc>)
 80012e6:	f7ff fe83 	bl	8000ff0 <uprintln>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e019      	b.n	8001322 <HTS221_Init+0xa6>
  }

  // CTRL_REG1: PD=1 (bit7), BDU=1(bit2), ODR=01 (1 Hz)
  uint8_t ctrl1 = 0x80 | 0x04 | 0x01; // 0x85
 80012ee:	2385      	movs	r3, #133	; 0x85
 80012f0:	717b      	strb	r3, [r7, #5]
  if (HAL_I2C_Mem_Write(&hi2c2, I2C_ADDR(HTS221_ADDR_7B), HTS221_CTRL_REG1,
 80012f2:	2332      	movs	r3, #50	; 0x32
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	2301      	movs	r3, #1
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	1d7b      	adds	r3, r7, #5
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2301      	movs	r3, #1
 8001300:	2220      	movs	r2, #32
 8001302:	21be      	movs	r1, #190	; 0xbe
 8001304:	4809      	ldr	r0, [pc, #36]	; (800132c <HTS221_Init+0xb0>)
 8001306:	f001 f92b 	bl	8002560 <HAL_I2C_Mem_Write>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <HTS221_Init+0x9e>
                        I2C_MEMADD_SIZE_8BIT, &ctrl1, 1, 50) != HAL_OK) {
    uprintln("HTS221 CTRL_REG1 write failed");
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <HTS221_Init+0xc0>)
 8001312:	f7ff fe6d 	bl	8000ff0 <uprintln>
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e003      	b.n	8001322 <HTS221_Init+0xa6>
  }

  uprintln("HTS221 configured");
 800131a:	4809      	ldr	r0, [pc, #36]	; (8001340 <HTS221_Init+0xc4>)
 800131c:	f7ff fe68 	bl	8000ff0 <uprintln>
  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200001f0 	.word	0x200001f0
 8001330:	0800a0a0 	.word	0x0800a0a0
 8001334:	0800a0c4 	.word	0x0800a0c4
 8001338:	0800a0e8 	.word	0x0800a0e8
 800133c:	0800a104 	.word	0x0800a104
 8001340:	0800a124 	.word	0x0800a124

08001344 <HTS221_ReadTemp_C>:

static HAL_StatusTypeDef HTS221_ReadTemp_C(float *tC, const HTS221_TCal *cal) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af04      	add	r7, sp, #16
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  // Leer TEMP_OUT_H/L
  uint8_t b[2];
  if (HAL_I2C_Mem_Read(&hi2c2, I2C_ADDR(HTS221_ADDR_7B), HTS221_TEMP_OUT_L,
 800134e:	2332      	movs	r3, #50	; 0x32
 8001350:	9302      	str	r3, [sp, #8]
 8001352:	2301      	movs	r3, #1
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	222a      	movs	r2, #42	; 0x2a
 8001360:	21be      	movs	r1, #190	; 0xbe
 8001362:	4833      	ldr	r0, [pc, #204]	; (8001430 <HTS221_ReadTemp_C+0xec>)
 8001364:	f001 fa10 	bl	8002788 <HAL_I2C_Mem_Read>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HTS221_ReadTemp_C+0x2e>
                       I2C_MEMADD_SIZE_8BIT, &b[0], 1, 50) != HAL_OK) return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e059      	b.n	8001426 <HTS221_ReadTemp_C+0xe2>
  if (HAL_I2C_Mem_Read(&hi2c2, I2C_ADDR(HTS221_ADDR_7B), HTS221_TEMP_OUT_H,
 8001372:	2332      	movs	r3, #50	; 0x32
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	2301      	movs	r3, #1
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	3301      	adds	r3, #1
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	222b      	movs	r2, #43	; 0x2b
 8001386:	21be      	movs	r1, #190	; 0xbe
 8001388:	4829      	ldr	r0, [pc, #164]	; (8001430 <HTS221_ReadTemp_C+0xec>)
 800138a:	f001 f9fd 	bl	8002788 <HAL_I2C_Mem_Read>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HTS221_ReadTemp_C+0x54>
                       I2C_MEMADD_SIZE_8BIT, &b[1], 1, 50) != HAL_OK) return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e046      	b.n	8001426 <HTS221_ReadTemp_C+0xe2>
  int16_t T_OUT = (int16_t)((b[1] << 8) | b[0]);
 8001398:	7a7b      	ldrb	r3, [r7, #9]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	b21a      	sxth	r2, r3
 800139e:	7a3b      	ldrb	r3, [r7, #8]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	82fb      	strh	r3, [r7, #22]

  // Interpolación lineal según AN
  // T(°C) = T0 + (T_OUT - T0_OUT) * (T1 - T0) / (T1_OUT - T0_OUT)
  float num = (float)(T_OUT - cal->T0_OUT) * (cal->T1_degC - cal->T0_degC);
 80013a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ce:	edc7 7a04 	vstr	s15, [r7, #16]
  float den = (float)(cal->T1_OUT - cal->T0_OUT);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013d8:	461a      	mov	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ea:	edc7 7a03 	vstr	s15, [r7, #12]
  if (fabsf(den) < 1e-3f) return HAL_ERROR;
 80013ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80013f2:	eef0 7ae7 	vabs.f32	s15, s15
 80013f6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001434 <HTS221_ReadTemp_C+0xf0>
 80013fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	d501      	bpl.n	8001408 <HTS221_ReadTemp_C+0xc4>
 8001404:	2301      	movs	r3, #1
 8001406:	e00e      	b.n	8001426 <HTS221_ReadTemp_C+0xe2>

  *tC = cal->T0_degC + (num / den);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	ed93 7a00 	vldr	s14, [r3]
 800140e:	ed97 6a04 	vldr	s12, [r7, #16]
 8001412:	edd7 6a03 	vldr	s13, [r7, #12]
 8001416:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	edc3 7a00 	vstr	s15, [r3]
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200001f0 	.word	0x200001f0
 8001434:	3a83126f 	.word	0x3a83126f

08001438 <LPS22HB_Init>:

static HAL_StatusTypeDef LPS22HB_Init(I2C_HandleTypeDef *hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af04      	add	r7, sp, #16
 800143e:	6078      	str	r0, [r7, #4]
  uint8_t who = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
  if (HAL_I2C_Mem_Read(hi2c, LPS22HB_ADDR, LPS22HB_WHO_AM_I, I2C_MEMADD_SIZE_8BIT,
 8001444:	2364      	movs	r3, #100	; 0x64
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	2301      	movs	r3, #1
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	f107 030f 	add.w	r3, r7, #15
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	220f      	movs	r2, #15
 8001456:	21b8      	movs	r1, #184	; 0xb8
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f001 f995 	bl	8002788 <HAL_I2C_Mem_Read>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <LPS22HB_Init+0x30>
                       &who, 1, 100) != HAL_OK) {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e02d      	b.n	80014c4 <LPS22HB_Init+0x8c>
  }
  if (who != LPS22HB_WHOAMI_VAL) {
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2bb1      	cmp	r3, #177	; 0xb1
 800146c:	d001      	beq.n	8001472 <LPS22HB_Init+0x3a>
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e028      	b.n	80014c4 <LPS22HB_Init+0x8c>
  }

  uint8_t v;
  // CTRL_REG2: IF_ADD_INC=1 para autoincremento
  v = LPS22HB_CTRL2_CFG;
 8001472:	2310      	movs	r3, #16
 8001474:	73bb      	strb	r3, [r7, #14]
  if (HAL_I2C_Mem_Write(hi2c, LPS22HB_ADDR, LPS22HB_CTRL_REG2, I2C_MEMADD_SIZE_8BIT,
 8001476:	2364      	movs	r3, #100	; 0x64
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2301      	movs	r3, #1
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	f107 030e 	add.w	r3, r7, #14
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2301      	movs	r3, #1
 8001486:	2211      	movs	r2, #17
 8001488:	21b8      	movs	r1, #184	; 0xb8
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f001 f868 	bl	8002560 <HAL_I2C_Mem_Write>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <LPS22HB_Init+0x62>
                        &v, 1, 100) != HAL_OK) {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e014      	b.n	80014c4 <LPS22HB_Init+0x8c>
  }

  // CTRL_REG1: ODR=1Hz, BDU=1
  v = LPS22HB_CTRL1_CFG;
 800149a:	2312      	movs	r3, #18
 800149c:	73bb      	strb	r3, [r7, #14]
  if (HAL_I2C_Mem_Write(hi2c, LPS22HB_ADDR, LPS22HB_CTRL_REG1, I2C_MEMADD_SIZE_8BIT,
 800149e:	2364      	movs	r3, #100	; 0x64
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	2301      	movs	r3, #1
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	f107 030e 	add.w	r3, r7, #14
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	2210      	movs	r2, #16
 80014b0:	21b8      	movs	r1, #184	; 0xb8
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f001 f854 	bl	8002560 <HAL_I2C_Mem_Write>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <LPS22HB_Init+0x8a>
                        &v, 1, 100) != HAL_OK) {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <LPS22HB_Init+0x8c>
  }

  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <LPS22HB_ReadPressure_hPa>:

static HAL_StatusTypeDef LPS22HB_ReadPressure_hPa(I2C_HandleTypeDef *hi2c, float *out_hPa)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b088      	sub	sp, #32
 80014d0:	af04      	add	r7, sp, #16
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint8_t buf[3];
  if (HAL_I2C_Mem_Read(hi2c, LPS22HB_ADDR, LPS22HB_PRESS_OUT_XL, I2C_MEMADD_SIZE_8BIT,
 80014d6:	2364      	movs	r3, #100	; 0x64
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	2303      	movs	r3, #3
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	2301      	movs	r3, #1
 80014e6:	2228      	movs	r2, #40	; 0x28
 80014e8:	21b8      	movs	r1, #184	; 0xb8
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f001 f94c 	bl	8002788 <HAL_I2C_Mem_Read>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <LPS22HB_ReadPressure_hPa+0x2e>
                       buf, 3, 100) != HAL_OK) {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e01d      	b.n	8001536 <LPS22HB_ReadPressure_hPa+0x6a>
  }
  // 24-bit two's complement, 4096 LSB/hPa
  int32_t raw = (int32_t)((((uint32_t)buf[2]) << 16) | (((uint32_t)buf[1]) << 8) | buf[0]);
 80014fa:	7abb      	ldrb	r3, [r7, #10]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	7a7b      	ldrb	r3, [r7, #9]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	4313      	orrs	r3, r2
 8001504:	7a3a      	ldrb	r2, [r7, #8]
 8001506:	4313      	orrs	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  if (raw & 0x00800000) { raw |= 0xFF000000; } // sign-extend
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <LPS22HB_ReadPressure_hPa+0x50>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800151a:	60fb      	str	r3, [r7, #12]
  *out_hPa = ((float)raw) / 4096.0f;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	ee07 3a90 	vmov	s15, r3
 8001522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001526:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001540 <LPS22HB_ReadPressure_hPa+0x74>
 800152a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	edc3 7a00 	vstr	s15, [r3]
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	45800000 	.word	0x45800000

08001544 <main>:


/* ==== MAIN ==== */
int main(void)
{
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af04      	add	r7, sp, #16
  HAL_Init();
 800154a:	f000 fbf0 	bl	8001d2e <HAL_Init>
  SystemClock_Config();
 800154e:	f000 f89b 	bl	8001688 <SystemClock_Config>

  MX_GPIO_Init();
 8001552:	f000 f933 	bl	80017bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001556:	f000 f90d 	bl	8001774 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800155a:	f000 f8db 	bl	8001714 <MX_I2C2_Init>

  uprintln("\r\nSTM32 HAL + HTS221 (no RTOS)");
 800155e:	483f      	ldr	r0, [pc, #252]	; (800165c <main+0x118>)
 8001560:	f7ff fd46 	bl	8000ff0 <uprintln>

  // Escáner I2C2
  I2C_Scan(&hi2c2, "I2C2");
 8001564:	493e      	ldr	r1, [pc, #248]	; (8001660 <main+0x11c>)
 8001566:	483f      	ldr	r0, [pc, #252]	; (8001664 <main+0x120>)
 8001568:	f7ff fd8e 	bl	8001088 <I2C_Scan>

  // Init sensor
  if (HTS221_Init() != HAL_OK) {
 800156c:	f7ff fe86 	bl	800127c <HTS221_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <main+0x3a>
    uprintln("HTS221 init ERROR. Verifica I2C2 y direccion 0x5F.");
 8001576:	483c      	ldr	r0, [pc, #240]	; (8001668 <main+0x124>)
 8001578:	f7ff fd3a 	bl	8000ff0 <uprintln>
 800157c:	e002      	b.n	8001584 <main+0x40>
    // seguimos, pero indicamos fallo parpadeando rápido
  } else {
    uprintln("HTS221 init OK");
 800157e:	483b      	ldr	r0, [pc, #236]	; (800166c <main+0x128>)
 8001580:	f7ff fd36 	bl	8000ff0 <uprintln>
  }
  if (LPS22HB_Init(&hi2c2) == HAL_OK) {
 8001584:	4837      	ldr	r0, [pc, #220]	; (8001664 <main+0x120>)
 8001586:	f7ff ff57 	bl	8001438 <LPS22HB_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d103      	bne.n	8001598 <main+0x54>
    uprintf("LPS22HB init OK\r\n");
 8001590:	4837      	ldr	r0, [pc, #220]	; (8001670 <main+0x12c>)
 8001592:	f7ff fd53 	bl	800103c <uprintf>
 8001596:	e002      	b.n	800159e <main+0x5a>
  } else {
    uprintf("LPS22HB init FAIL\r\n");
 8001598:	4836      	ldr	r0, [pc, #216]	; (8001674 <main+0x130>)
 800159a:	f7ff fd4f 	bl	800103c <uprintf>
  }


  // Leer calibración
  HTS221_TCal cal = {0};
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
  if (HTS221_ReadCal_T(&cal) != HAL_OK) {
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fd98 	bl	80010e4 <HTS221_ReadCal_T>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <main+0x7e>
    uprintln("HTS221 cal read ERROR");
 80015ba:	482f      	ldr	r0, [pc, #188]	; (8001678 <main+0x134>)
 80015bc:	f7ff fd18 	bl	8000ff0 <uprintln>
 80015c0:	e018      	b.n	80015f4 <main+0xb0>
  } else {
    uprintf("Cal: T0=%.2f C, T1=%.2f C, T0_OUT=%d, T1_OUT=%d\r\n",
            cal.T0_degC, cal.T1_degC, cal.T0_OUT, cal.T1_OUT);
 80015c2:	68fb      	ldr	r3, [r7, #12]
    uprintf("Cal: T0=%.2f C, T1=%.2f C, T0_OUT=%d, T1_OUT=%d\r\n",
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffbf 	bl	8000548 <__aeabi_f2d>
 80015ca:	4604      	mov	r4, r0
 80015cc:	460d      	mov	r5, r1
            cal.T0_degC, cal.T1_degC, cal.T0_OUT, cal.T1_OUT);
 80015ce:	693b      	ldr	r3, [r7, #16]
    uprintf("Cal: T0=%.2f C, T1=%.2f C, T0_OUT=%d, T1_OUT=%d\r\n",
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffb9 	bl	8000548 <__aeabi_f2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
            cal.T0_degC, cal.T1_degC, cal.T0_OUT, cal.T1_OUT);
 80015da:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80015de:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
    uprintf("Cal: T0=%.2f C, T1=%.2f C, T0_OUT=%d, T1_OUT=%d\r\n",
 80015e2:	9003      	str	r0, [sp, #12]
 80015e4:	9102      	str	r1, [sp, #8]
 80015e6:	e9cd 2300 	strd	r2, r3, [sp]
 80015ea:	4622      	mov	r2, r4
 80015ec:	462b      	mov	r3, r5
 80015ee:	4823      	ldr	r0, [pc, #140]	; (800167c <main+0x138>)
 80015f0:	f7ff fd24 	bl	800103c <uprintf>
  }

  // Loop
  // Loop
  while (1) {
    float tC = NAN;
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <main+0x13c>)
 80015f6:	60bb      	str	r3, [r7, #8]
    float p_hPa = NAN;
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <main+0x13c>)
 80015fa:	607b      	str	r3, [r7, #4]

    // Lee temperatura usando nuestra función correcta (con calibración)
    if (HTS221_ReadTemp_C(&tC, &cal) != HAL_OK) {
 80015fc:	f107 020c 	add.w	r2, r7, #12
 8001600:	f107 0308 	add.w	r3, r7, #8
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fe9c 	bl	8001344 <HTS221_ReadTemp_C>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <main+0xd2>
      tC = NAN;
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <main+0x13c>)
 8001614:	60bb      	str	r3, [r7, #8]
    }

    // Lee presión del LPS22HB
    if (LPS22HB_ReadPressure_hPa(&hi2c2, &p_hPa) != HAL_OK) {
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4812      	ldr	r0, [pc, #72]	; (8001664 <main+0x120>)
 800161c:	f7ff ff56 	bl	80014cc <LPS22HB_ReadPressure_hPa>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <main+0xe6>
      p_hPa = NAN;
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <main+0x13c>)
 8001628:	607b      	str	r3, [r7, #4]
    }

    // Imprime JSON por UART
    uprintf("{\"temp_c\":%.2f,\"pres_hpa\":%.2f}\r\n", tC, p_hPa);
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff8b 	bl	8000548 <__aeabi_f2d>
 8001632:	4604      	mov	r4, r0
 8001634:	460d      	mov	r5, r1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff85 	bl	8000548 <__aeabi_f2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	e9cd 2300 	strd	r2, r3, [sp]
 8001646:	4622      	mov	r2, r4
 8001648:	462b      	mov	r3, r5
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <main+0x140>)
 800164c:	f7ff fcf6 	bl	800103c <uprintf>

    HAL_Delay(1000); // <- sin RTOS usamos HAL_Delay
 8001650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001654:	f000 fbe0 	bl	8001e18 <HAL_Delay>
  while (1) {
 8001658:	e7cc      	b.n	80015f4 <main+0xb0>
 800165a:	bf00      	nop
 800165c:	0800a138 	.word	0x0800a138
 8001660:	0800a158 	.word	0x0800a158
 8001664:	200001f0 	.word	0x200001f0
 8001668:	0800a160 	.word	0x0800a160
 800166c:	0800a194 	.word	0x0800a194
 8001670:	0800a1a4 	.word	0x0800a1a4
 8001674:	0800a1b8 	.word	0x0800a1b8
 8001678:	0800a1cc 	.word	0x0800a1cc
 800167c:	0800a1e4 	.word	0x0800a1e4
 8001680:	7fc00000 	.word	0x7fc00000
 8001684:	0800a218 	.word	0x0800a218

08001688 <SystemClock_Config>:
  }
}

/* ==== INITs generados por CubeMX — simplificados (ajusta si hace falta) ==== */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b096      	sub	sp, #88	; 0x58
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	2244      	movs	r2, #68	; 0x44
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f005 f89c 	bl	80067d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	463b      	mov	r3, r7
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016ae:	f001 fdd9 	bl	8003264 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80016b2:	2310      	movs	r3, #16
 80016b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016b6:	2301      	movs	r3, #1
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6; // 4 MHz base + PLL abajo
 80016be:	2360      	movs	r3, #96	; 0x60
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c2:	2302      	movs	r3, #2
 80016c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016c6:	2301      	movs	r3, #1
 80016c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016ca:	2301      	movs	r3, #1
 80016cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016ce:	2328      	movs	r3, #40	; 0x28
 80016d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016d2:	2307      	movs	r3, #7
 80016d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016da:	2302      	movs	r3, #2
 80016dc:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 fe14 	bl	8003310 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e8:	230f      	movs	r3, #15
 80016ea:	603b      	str	r3, [r7, #0]
                              | RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK; // 80 MHz
 80016ec:	2303      	movs	r3, #3
 80016ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80016fc:	463b      	mov	r3, r7
 80016fe:	2104      	movs	r1, #4
 8001700:	4618      	mov	r0, r3
 8001702:	f002 f9e1 	bl	8003ac8 <HAL_RCC_ClockConfig>
  HAL_RCCEx_EnableMSIPLLMode();
 8001706:	f002 feed 	bl	80044e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800170a:	bf00      	nop
 800170c:	3758      	adds	r7, #88	; 0x58
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_I2C2_Init+0x54>)
 800171a:	4a14      	ldr	r2, [pc, #80]	; (800176c <MX_I2C2_Init+0x58>)
 800171c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC; // ~100kHz típico L4 (ajustado por CubeMX suele ser mejor)
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_I2C2_Init+0x54>)
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <MX_I2C2_Init+0x5c>)
 8001722:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_I2C2_Init+0x54>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_I2C2_Init+0x54>)
 800172c:	2201      	movs	r2, #1
 800172e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <MX_I2C2_Init+0x54>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001736:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_I2C2_Init+0x54>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <MX_I2C2_Init+0x54>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_I2C2_Init+0x54>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <MX_I2C2_Init+0x54>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  HAL_I2C_Init(&hi2c2);
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <MX_I2C2_Init+0x54>)
 8001750:	f000 fe6b 	bl	800242a <HAL_I2C_Init>

  /** Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 8001754:	2100      	movs	r1, #0
 8001756:	4804      	ldr	r0, [pc, #16]	; (8001768 <MX_I2C2_Init+0x54>)
 8001758:	f001 fcde 	bl	8003118 <HAL_I2CEx_ConfigAnalogFilter>
  /** Configure Digital filter */
  HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 800175c:	2100      	movs	r1, #0
 800175e:	4802      	ldr	r0, [pc, #8]	; (8001768 <MX_I2C2_Init+0x54>)
 8001760:	f001 fd25 	bl	80031ae <HAL_I2CEx_ConfigDigitalFilter>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200001f0 	.word	0x200001f0
 800176c:	40005800 	.word	0x40005800
 8001770:	10909cec 	.word	0x10909cec

08001774 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART1_UART_Init+0x40>)
 800177a:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <MX_USART1_UART_Init+0x44>)
 800177c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800177e:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <MX_USART1_UART_Init+0x40>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART1_UART_Init+0x40>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART1_UART_Init+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART1_UART_Init+0x40>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART1_UART_Init+0x40>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <MX_USART1_UART_Init+0x40>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <MX_USART1_UART_Init+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 80017aa:	4802      	ldr	r0, [pc, #8]	; (80017b4 <MX_USART1_UART_Init+0x40>)
 80017ac:	f003 f87c 	bl	80048a8 <HAL_UART_Init>
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000244 	.word	0x20000244
 80017b8:	40013800 	.word	0x40013800

080017bc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_GPIO_Init+0x5c>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	4a14      	ldr	r2, [pc, #80]	; (8001818 <MX_GPIO_Init+0x5c>)
 80017c8:	f043 0302 	orr.w	r3, r3, #2
 80017cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_GPIO_Init+0x5c>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]

  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ee:	480b      	ldr	r0, [pc, #44]	; (800181c <MX_GPIO_Init+0x60>)
 80017f0:	f000 fdc6 	bl	8002380 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED2_Pin;
 80017f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	4619      	mov	r1, r3
 800180a:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_GPIO_Init+0x60>)
 800180c:	f000 fc0e 	bl	800202c <HAL_GPIO_Init>
}
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	48000400 	.word	0x48000400

08001820 <Error_Handler>:

/* Error Handler mínimo */
void Error_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
  __disable_irq();
  while (1) {
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001828:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <Error_Handler+0x1c>)
 800182e:	f000 fdbf 	bl	80023b0 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8001832:	2064      	movs	r0, #100	; 0x64
 8001834:	f000 faf0 	bl	8001e18 <HAL_Delay>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001838:	e7f6      	b.n	8001828 <Error_Handler+0x8>
 800183a:	bf00      	nop
 800183c:	48000400 	.word	0x48000400

08001840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_MspInit+0x4c>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184a:	4a10      	ldr	r2, [pc, #64]	; (800188c <HAL_MspInit+0x4c>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6613      	str	r3, [r2, #96]	; 0x60
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_MspInit+0x4c>)
 8001854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_MspInit+0x4c>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_MspInit+0x4c>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6593      	str	r3, [r2, #88]	; 0x58
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_MspInit+0x4c>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	210f      	movs	r1, #15
 800187a:	f06f 0001 	mvn.w	r0, #1
 800187e:	f000 fbac 	bl	8001fda <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b0ac      	sub	sp, #176	; 0xb0
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2288      	movs	r2, #136	; 0x88
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f004 ff8f 	bl	80067d4 <memset>
  if(hi2c->Instance==I2C2)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a21      	ldr	r2, [pc, #132]	; (8001940 <HAL_I2C_MspInit+0xb0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d13b      	bne.n	8001938 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fb1f 	bl	8003f10 <HAL_RCCEx_PeriphCLKConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018d8:	f7ff ffa2 	bl	8001820 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_I2C_MspInit+0xb4>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	4a18      	ldr	r2, [pc, #96]	; (8001944 <HAL_I2C_MspInit+0xb4>)
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_I2C_MspInit+0xb4>)
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80018f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fc:	2312      	movs	r3, #18
 80018fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001902:	2301      	movs	r3, #1
 8001904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800190e:	2304      	movs	r3, #4
 8001910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001914:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001918:	4619      	mov	r1, r3
 800191a:	480b      	ldr	r0, [pc, #44]	; (8001948 <HAL_I2C_MspInit+0xb8>)
 800191c:	f000 fb86 	bl	800202c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_I2C_MspInit+0xb4>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <HAL_I2C_MspInit+0xb4>)
 8001926:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800192a:	6593      	str	r3, [r2, #88]	; 0x58
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_I2C_MspInit+0xb4>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001938:	bf00      	nop
 800193a:	37b0      	adds	r7, #176	; 0xb0
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40005800 	.word	0x40005800
 8001944:	40021000 	.word	0x40021000
 8001948:	48000400 	.word	0x48000400

0800194c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b0ae      	sub	sp, #184	; 0xb8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	2288      	movs	r2, #136	; 0x88
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f004 ff31 	bl	80067d4 <memset>
  if(huart->Instance==USART1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a42      	ldr	r2, [pc, #264]	; (8001a80 <HAL_UART_MspInit+0x134>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d13b      	bne.n	80019f4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800197c:	2301      	movs	r3, #1
 800197e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001980:	2300      	movs	r3, #0
 8001982:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fac1 	bl	8003f10 <HAL_RCCEx_PeriphCLKConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001994:	f7ff ff44 	bl	8001820 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001998:	4b3a      	ldr	r3, [pc, #232]	; (8001a84 <HAL_UART_MspInit+0x138>)
 800199a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800199c:	4a39      	ldr	r2, [pc, #228]	; (8001a84 <HAL_UART_MspInit+0x138>)
 800199e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a2:	6613      	str	r3, [r2, #96]	; 0x60
 80019a4:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <HAL_UART_MspInit+0x138>)
 80019a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b0:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <HAL_UART_MspInit+0x138>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	4a33      	ldr	r2, [pc, #204]	; (8001a84 <HAL_UART_MspInit+0x138>)
 80019b6:	f043 0302 	orr.w	r3, r3, #2
 80019ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019bc:	4b31      	ldr	r3, [pc, #196]	; (8001a84 <HAL_UART_MspInit+0x138>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80019c8:	23c0      	movs	r3, #192	; 0xc0
 80019ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019e0:	2307      	movs	r3, #7
 80019e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4826      	ldr	r0, [pc, #152]	; (8001a88 <HAL_UART_MspInit+0x13c>)
 80019ee:	f000 fb1d 	bl	800202c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019f2:	e040      	b.n	8001a76 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a24      	ldr	r2, [pc, #144]	; (8001a8c <HAL_UART_MspInit+0x140>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d13b      	bne.n	8001a76 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019fe:	2304      	movs	r3, #4
 8001a00:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 fa80 	bl	8003f10 <HAL_RCCEx_PeriphCLKConfig>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001a16:	f7ff ff03 	bl	8001820 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <HAL_UART_MspInit+0x138>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <HAL_UART_MspInit+0x138>)
 8001a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a24:	6593      	str	r3, [r2, #88]	; 0x58
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_UART_MspInit+0x138>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_UART_MspInit+0x138>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <HAL_UART_MspInit+0x138>)
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_UART_MspInit+0x138>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001a4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a64:	2307      	movs	r3, #7
 8001a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4807      	ldr	r0, [pc, #28]	; (8001a90 <HAL_UART_MspInit+0x144>)
 8001a72:	f000 fadb 	bl	800202c <HAL_GPIO_Init>
}
 8001a76:	bf00      	nop
 8001a78:	37b8      	adds	r7, #184	; 0xb8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40013800 	.word	0x40013800
 8001a84:	40021000 	.word	0x40021000
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	40004800 	.word	0x40004800
 8001a90:	48000c00 	.word	0x48000c00

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <NMI_Handler+0x4>

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac4:	f000 f988 	bl	8001dd8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ac8:	f003 fe20 	bl	800570c <xTaskGetSchedulerState>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d001      	beq.n	8001ad6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001ad2:	f003 fe89 	bl	80057e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001ade:	2020      	movs	r0, #32
 8001ae0:	f000 fc80 	bl	80023e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001ae4:	2040      	movs	r0, #64	; 0x40
 8001ae6:	f000 fc7d 	bl	80023e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001aea:	2080      	movs	r0, #128	; 0x80
 8001aec:	f000 fc7a 	bl	80023e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001af0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001af4:	f000 fc76 	bl	80023e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001b00:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001b04:	f000 fc6e 	bl	80023e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001b08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001b0c:	f000 fc6a 	bl	80023e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001b10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b14:	f000 fc66 	bl	80023e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001b18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b1c:	f000 fc62 	bl	80023e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001b20:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b24:	f000 fc5e 	bl	80023e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_kill>:

int _kill(int pid, int sig)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b46:	f004 fe97 	bl	8006878 <__errno>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2216      	movs	r2, #22
 8001b4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_exit>:

void _exit (int status)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ffe7 	bl	8001b3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b6e:	e7fe      	b.n	8001b6e <_exit+0x12>

08001b70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e00a      	b.n	8001b98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b82:	f3af 8000 	nop.w
 8001b86:	4601      	mov	r1, r0
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	60ba      	str	r2, [r7, #8]
 8001b8e:	b2ca      	uxtb	r2, r1
 8001b90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dbf0      	blt.n	8001b82 <_read+0x12>
  }

  return len;
 8001ba0:	687b      	ldr	r3, [r7, #4]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e009      	b.n	8001bd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	60ba      	str	r2, [r7, #8]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf1      	blt.n	8001bbc <_write+0x12>
  }
  return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_close>:

int _close(int file)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <_isatty>:

int _isatty(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f004 fdfc 	bl	8006878 <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20018000 	.word	0x20018000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	200002cc 	.word	0x200002cc
 8001cb4:	200008b0 	.word	0x200008b0

08001cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <SystemInit+0x20>)
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <SystemInit+0x20>)
 8001cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ce0:	f7ff ffea 	bl	8001cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ce6:	490d      	ldr	r1, [pc, #52]	; (8001d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <LoopForever+0xe>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cec:	e002      	b.n	8001cf4 <LoopCopyDataInit>

08001cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf2:	3304      	adds	r3, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf8:	d3f9      	bcc.n	8001cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	; (8001d28 <LoopForever+0x16>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d00:	e001      	b.n	8001d06 <LoopFillZerobss>

08001d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d04:	3204      	adds	r2, #4

08001d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d08:	d3fb      	bcc.n	8001d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f004 fdbb 	bl	8006884 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d0e:	f7ff fc19 	bl	8001544 <main>

08001d12 <LoopForever>:

LoopForever:
    b LoopForever
 8001d12:	e7fe      	b.n	8001d12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001d20:	0800a6c0 	.word	0x0800a6c0
  ldr r2, =_sbss
 8001d24:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001d28:	200008ac 	.word	0x200008ac

08001d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC1_2_IRQHandler>

08001d2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f000 f943 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d3e:	200f      	movs	r0, #15
 8001d40:	f000 f80e 	bl	8001d60 <HAL_InitTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	e001      	b.n	8001d54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d50:	f7ff fd76 	bl	8001840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d54:	79fb      	ldrb	r3, [r7, #7]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_InitTick+0x6c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d023      	beq.n	8001dbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_InitTick+0x70>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <HAL_InitTick+0x6c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f941 	bl	8002012 <HAL_SYSTICK_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10f      	bne.n	8001db6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d809      	bhi.n	8001db0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f000 f919 	bl	8001fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_InitTick+0x74>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e007      	b.n	8001dc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e004      	b.n	8001dc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e001      	b.n	8001dc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x20>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x24>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_IncTick+0x24>)
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	200002d0 	.word	0x200002d0

08001e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_GetTick+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	200002d0 	.word	0x200002d0

08001e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff ffee 	bl	8001e00 <HAL_GetTick>
 8001e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d005      	beq.n	8001e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_Delay+0x44>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3e:	bf00      	nop
 8001e40:	f7ff ffde 	bl	8001e00 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d8f7      	bhi.n	8001e40 <HAL_Delay+0x28>
  {
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000008 	.word	0x20000008

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	; (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	; (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f90:	d301      	bcc.n	8001f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <SysTick_Config+0x40>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f7ff ff8e 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SysTick_Config+0x40>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SysTick_Config+0x40>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff47 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fec:	f7ff ff5c 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 8001ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7ff ff8e 	bl	8001f18 <NVIC_EncodePriority>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff5d 	bl	8001ec4 <__NVIC_SetPriority>
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffb0 	bl	8001f80 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	e17f      	b.n	800233c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2101      	movs	r1, #1
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8171 	beq.w	8002336 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d005      	beq.n	800206c <HAL_GPIO_Init+0x40>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d130      	bne.n	80020ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020a2:	2201      	movs	r2, #1
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	f003 0201 	and.w	r2, r3, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d118      	bne.n	800210c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020e0:	2201      	movs	r2, #1
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	f003 0201 	and.w	r2, r3, #1
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b03      	cmp	r3, #3
 8002116:	d017      	beq.n	8002148 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d123      	bne.n	800219c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	6939      	ldr	r1, [r7, #16]
 8002198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80ac 	beq.w	8002336 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	4b5f      	ldr	r3, [pc, #380]	; (800235c <HAL_GPIO_Init+0x330>)
 80021e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e2:	4a5e      	ldr	r2, [pc, #376]	; (800235c <HAL_GPIO_Init+0x330>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6613      	str	r3, [r2, #96]	; 0x60
 80021ea:	4b5c      	ldr	r3, [pc, #368]	; (800235c <HAL_GPIO_Init+0x330>)
 80021ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021f6:	4a5a      	ldr	r2, [pc, #360]	; (8002360 <HAL_GPIO_Init+0x334>)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002220:	d025      	beq.n	800226e <HAL_GPIO_Init+0x242>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4f      	ldr	r2, [pc, #316]	; (8002364 <HAL_GPIO_Init+0x338>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01f      	beq.n	800226a <HAL_GPIO_Init+0x23e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4e      	ldr	r2, [pc, #312]	; (8002368 <HAL_GPIO_Init+0x33c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d019      	beq.n	8002266 <HAL_GPIO_Init+0x23a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4d      	ldr	r2, [pc, #308]	; (800236c <HAL_GPIO_Init+0x340>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0x236>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4c      	ldr	r2, [pc, #304]	; (8002370 <HAL_GPIO_Init+0x344>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00d      	beq.n	800225e <HAL_GPIO_Init+0x232>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4b      	ldr	r2, [pc, #300]	; (8002374 <HAL_GPIO_Init+0x348>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d007      	beq.n	800225a <HAL_GPIO_Init+0x22e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4a      	ldr	r2, [pc, #296]	; (8002378 <HAL_GPIO_Init+0x34c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_GPIO_Init+0x22a>
 8002252:	2306      	movs	r3, #6
 8002254:	e00c      	b.n	8002270 <HAL_GPIO_Init+0x244>
 8002256:	2307      	movs	r3, #7
 8002258:	e00a      	b.n	8002270 <HAL_GPIO_Init+0x244>
 800225a:	2305      	movs	r3, #5
 800225c:	e008      	b.n	8002270 <HAL_GPIO_Init+0x244>
 800225e:	2304      	movs	r3, #4
 8002260:	e006      	b.n	8002270 <HAL_GPIO_Init+0x244>
 8002262:	2303      	movs	r3, #3
 8002264:	e004      	b.n	8002270 <HAL_GPIO_Init+0x244>
 8002266:	2302      	movs	r3, #2
 8002268:	e002      	b.n	8002270 <HAL_GPIO_Init+0x244>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_GPIO_Init+0x244>
 800226e:	2300      	movs	r3, #0
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	f002 0203 	and.w	r2, r2, #3
 8002276:	0092      	lsls	r2, r2, #2
 8002278:	4093      	lsls	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002280:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_GPIO_Init+0x334>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800228e:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_GPIO_Init+0x350>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022b2:	4a32      	ldr	r2, [pc, #200]	; (800237c <HAL_GPIO_Init+0x350>)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022b8:	4b30      	ldr	r3, [pc, #192]	; (800237c <HAL_GPIO_Init+0x350>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022dc:	4a27      	ldr	r2, [pc, #156]	; (800237c <HAL_GPIO_Init+0x350>)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_GPIO_Init+0x350>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002306:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_GPIO_Init+0x350>)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_GPIO_Init+0x350>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002330:	4a12      	ldr	r2, [pc, #72]	; (800237c <HAL_GPIO_Init+0x350>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	f47f ae78 	bne.w	800203c <HAL_GPIO_Init+0x10>
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	48000400 	.word	0x48000400
 8002368:	48000800 	.word	0x48000800
 800236c:	48000c00 	.word	0x48000c00
 8002370:	48001000 	.word	0x48001000
 8002374:	48001400 	.word	0x48001400
 8002378:	48001800 	.word	0x48001800
 800237c:	40010400 	.word	0x40010400

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800239c:	e002      	b.n	80023a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	041a      	lsls	r2, r3, #16
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43d9      	mvns	r1, r3
 80023ce:	887b      	ldrh	r3, [r7, #2]
 80023d0:	400b      	ands	r3, r1
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	619a      	str	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f806 	bl	8002414 <HAL_GPIO_EXTI_Callback>
  }
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40010400 	.word	0x40010400

08002414 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e08d      	b.n	8002558 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d106      	bne.n	8002456 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff fa1d 	bl	8001890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2224      	movs	r2, #36	; 0x24
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800247a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800248a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	e006      	b.n	80024b2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d108      	bne.n	80024cc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	e007      	b.n	80024dc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69d9      	ldr	r1, [r3, #28]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	4608      	mov	r0, r1
 800256a:	4611      	mov	r1, r2
 800256c:	461a      	mov	r2, r3
 800256e:	4603      	mov	r3, r0
 8002570:	817b      	strh	r3, [r7, #10]
 8002572:	460b      	mov	r3, r1
 8002574:	813b      	strh	r3, [r7, #8]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b20      	cmp	r3, #32
 8002584:	f040 80f9 	bne.w	800277a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_I2C_Mem_Write+0x34>
 800258e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800259a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0ed      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_I2C_Mem_Write+0x4e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e0e6      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025b6:	f7ff fc23 	bl	8001e00 <HAL_GetTick>
 80025ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2319      	movs	r3, #25
 80025c2:	2201      	movs	r2, #1
 80025c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fbaf 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0d1      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2221      	movs	r2, #33	; 0x21
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2240      	movs	r2, #64	; 0x40
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a3a      	ldr	r2, [r7, #32]
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002600:	88f8      	ldrh	r0, [r7, #6]
 8002602:	893a      	ldrh	r2, [r7, #8]
 8002604:	8979      	ldrh	r1, [r7, #10]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	4603      	mov	r3, r0
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fabf 	bl	8002b94 <I2C_RequestMemoryWrite>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0a9      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	2bff      	cmp	r3, #255	; 0xff
 8002630:	d90e      	bls.n	8002650 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	22ff      	movs	r2, #255	; 0xff
 8002636:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	b2da      	uxtb	r2, r3
 800263e:	8979      	ldrh	r1, [r7, #10]
 8002640:	2300      	movs	r3, #0
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fd33 	bl	80030b4 <I2C_TransferConfig>
 800264e:	e00f      	b.n	8002670 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	b2da      	uxtb	r2, r3
 8002660:	8979      	ldrh	r1, [r7, #10]
 8002662:	2300      	movs	r3, #0
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fd22 	bl	80030b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fbb2 	bl	8002dde <I2C_WaitOnTXISFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e07b      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	781a      	ldrb	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269e:	b29b      	uxth	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d034      	beq.n	8002728 <HAL_I2C_Mem_Write+0x1c8>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d130      	bne.n	8002728 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	2200      	movs	r2, #0
 80026ce:	2180      	movs	r1, #128	; 0x80
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 fb2b 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e04d      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2bff      	cmp	r3, #255	; 0xff
 80026e8:	d90e      	bls.n	8002708 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	22ff      	movs	r2, #255	; 0xff
 80026ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	8979      	ldrh	r1, [r7, #10]
 80026f8:	2300      	movs	r3, #0
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fcd7 	bl	80030b4 <I2C_TransferConfig>
 8002706:	e00f      	b.n	8002728 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002716:	b2da      	uxtb	r2, r3
 8002718:	8979      	ldrh	r1, [r7, #10]
 800271a:	2300      	movs	r3, #0
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fcc6 	bl	80030b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d19e      	bne.n	8002670 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fb98 	bl	8002e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e01a      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2220      	movs	r2, #32
 800274c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_I2C_Mem_Write+0x224>)
 800275a:	400b      	ands	r3, r1
 800275c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800277a:	2302      	movs	r3, #2
  }
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	fe00e800 	.word	0xfe00e800

08002788 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	4608      	mov	r0, r1
 8002792:	4611      	mov	r1, r2
 8002794:	461a      	mov	r2, r3
 8002796:	4603      	mov	r3, r0
 8002798:	817b      	strh	r3, [r7, #10]
 800279a:	460b      	mov	r3, r1
 800279c:	813b      	strh	r3, [r7, #8]
 800279e:	4613      	mov	r3, r2
 80027a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	f040 80fd 	bne.w	80029aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_I2C_Mem_Read+0x34>
 80027b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0f1      	b.n	80029ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_I2C_Mem_Read+0x4e>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e0ea      	b.n	80029ac <HAL_I2C_Mem_Read+0x224>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027de:	f7ff fb0f 	bl	8001e00 <HAL_GetTick>
 80027e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	2319      	movs	r3, #25
 80027ea:	2201      	movs	r2, #1
 80027ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fa9b 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0d5      	b.n	80029ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2222      	movs	r2, #34	; 0x22
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2240      	movs	r2, #64	; 0x40
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a3a      	ldr	r2, [r7, #32]
 800281a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002820:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002828:	88f8      	ldrh	r0, [r7, #6]
 800282a:	893a      	ldrh	r2, [r7, #8]
 800282c:	8979      	ldrh	r1, [r7, #10]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	4603      	mov	r3, r0
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f9ff 	bl	8002c3c <I2C_RequestMemoryRead>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0ad      	b.n	80029ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	2bff      	cmp	r3, #255	; 0xff
 8002858:	d90e      	bls.n	8002878 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	b2da      	uxtb	r2, r3
 8002866:	8979      	ldrh	r1, [r7, #10]
 8002868:	4b52      	ldr	r3, [pc, #328]	; (80029b4 <HAL_I2C_Mem_Read+0x22c>)
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fc1f 	bl	80030b4 <I2C_TransferConfig>
 8002876:	e00f      	b.n	8002898 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002886:	b2da      	uxtb	r2, r3
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <HAL_I2C_Mem_Read+0x22c>)
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fc0e 	bl	80030b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	2200      	movs	r2, #0
 80028a0:	2104      	movs	r1, #4
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fa42 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e07c      	b.n	80029ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d034      	beq.n	8002958 <HAL_I2C_Mem_Read+0x1d0>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d130      	bne.n	8002958 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	2200      	movs	r2, #0
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fa13 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e04d      	b.n	80029ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2bff      	cmp	r3, #255	; 0xff
 8002918:	d90e      	bls.n	8002938 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002924:	b2da      	uxtb	r2, r3
 8002926:	8979      	ldrh	r1, [r7, #10]
 8002928:	2300      	movs	r3, #0
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fbbf 	bl	80030b4 <I2C_TransferConfig>
 8002936:	e00f      	b.n	8002958 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	b2da      	uxtb	r2, r3
 8002948:	8979      	ldrh	r1, [r7, #10]
 800294a:	2300      	movs	r3, #0
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fbae 	bl	80030b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d19a      	bne.n	8002898 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fa80 	bl	8002e6c <I2C_WaitOnSTOPFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e01a      	b.n	80029ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2220      	movs	r2, #32
 800297c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_I2C_Mem_Read+0x230>)
 800298a:	400b      	ands	r3, r1
 800298c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e000      	b.n	80029ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80029aa:	2302      	movs	r3, #2
  }
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	80002400 	.word	0x80002400
 80029b8:	fe00e800 	.word	0xfe00e800

080029bc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	460b      	mov	r3, r1
 80029ca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b20      	cmp	r3, #32
 80029da:	f040 80d6 	bne.w	8002b8a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ec:	d101      	bne.n	80029f2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
 80029f0:	e0cc      	b.n	8002b8c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d101      	bne.n	8002a00 <HAL_I2C_IsDeviceReady+0x44>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e0c5      	b.n	8002b8c <HAL_I2C_IsDeviceReady+0x1d0>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2224      	movs	r2, #36	; 0x24
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_I2C_IsDeviceReady+0x72>
 8002a1e:	897b      	ldrh	r3, [r7, #10]
 8002a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a2c:	e006      	b.n	8002a3c <HAL_I2C_IsDeviceReady+0x80>
 8002a2e:	897b      	ldrh	r3, [r7, #10]
 8002a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a38:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002a42:	f7ff f9dd 	bl	8001e00 <HAL_GetTick>
 8002a46:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b20      	cmp	r3, #32
 8002a54:	bf0c      	ite	eq
 8002a56:	2301      	moveq	r3, #1
 8002a58:	2300      	movne	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a74:	e034      	b.n	8002ae0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d01a      	beq.n	8002ab4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7ff f9bf 	bl	8001e00 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <HAL_I2C_IsDeviceReady+0xd8>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10f      	bne.n	8002ab4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e06b      	b.n	8002b8c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002ae0:	7ffb      	ldrb	r3, [r7, #31]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <HAL_I2C_IsDeviceReady+0x130>
 8002ae6:	7fbb      	ldrb	r3, [r7, #30]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0c4      	beq.n	8002a76 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d01a      	beq.n	8002b30 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2200      	movs	r2, #0
 8002b02:	2120      	movs	r1, #32
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 f911 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e03b      	b.n	8002b8c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e02d      	b.n	8002b8c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2200      	movs	r2, #0
 8002b38:	2120      	movs	r1, #32
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f8f6 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e020      	b.n	8002b8c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2210      	movs	r2, #16
 8002b50:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2220      	movs	r2, #32
 8002b58:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f63f af56 	bhi.w	8002a16 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002b8a:	2302      	movs	r3, #2
  }
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3720      	adds	r7, #32
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	817b      	strh	r3, [r7, #10]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	813b      	strh	r3, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	8979      	ldrh	r1, [r7, #10]
 8002bb4:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <I2C_RequestMemoryWrite+0xa4>)
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fa79 	bl	80030b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	69b9      	ldr	r1, [r7, #24]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f909 	bl	8002dde <I2C_WaitOnTXISFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e02c      	b.n	8002c30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d105      	bne.n	8002be8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bdc:	893b      	ldrh	r3, [r7, #8]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	629a      	str	r2, [r3, #40]	; 0x28
 8002be6:	e015      	b.n	8002c14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002be8:	893b      	ldrh	r3, [r7, #8]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	69b9      	ldr	r1, [r7, #24]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f8ef 	bl	8002dde <I2C_WaitOnTXISFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e012      	b.n	8002c30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c0a:	893b      	ldrh	r3, [r7, #8]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f884 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	80002000 	.word	0x80002000

08002c3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	4608      	mov	r0, r1
 8002c46:	4611      	mov	r1, r2
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	817b      	strh	r3, [r7, #10]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	813b      	strh	r3, [r7, #8]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	8979      	ldrh	r1, [r7, #10]
 8002c5c:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <I2C_RequestMemoryRead+0xa4>)
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2300      	movs	r3, #0
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fa26 	bl	80030b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	69b9      	ldr	r1, [r7, #24]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f8b6 	bl	8002dde <I2C_WaitOnTXISFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e02c      	b.n	8002cd6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d105      	bne.n	8002c8e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c82:	893b      	ldrh	r3, [r7, #8]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c8c:	e015      	b.n	8002cba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c8e:	893b      	ldrh	r3, [r7, #8]
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	69b9      	ldr	r1, [r7, #24]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f89c 	bl	8002dde <I2C_WaitOnTXISFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e012      	b.n	8002cd6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb0:	893b      	ldrh	r3, [r7, #8]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2140      	movs	r1, #64	; 0x40
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f831 	bl	8002d2c <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	80002000 	.word	0x80002000

08002ce4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d103      	bne.n	8002d02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d007      	beq.n	8002d20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	619a      	str	r2, [r3, #24]
  }
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d3c:	e03b      	b.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	6839      	ldr	r1, [r7, #0]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f8d6 	bl	8002ef4 <I2C_IsErrorOccurred>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e041      	b.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d02d      	beq.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7ff f851 	bl	8001e00 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d122      	bne.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	bf0c      	ite	eq
 8002d80:	2301      	moveq	r3, #1
 8002d82:	2300      	movne	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d113      	bne.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e00f      	b.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	bf0c      	ite	eq
 8002dc6:	2301      	moveq	r3, #1
 8002dc8:	2300      	movne	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d0b4      	beq.n	8002d3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dea:	e033      	b.n	8002e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f87f 	bl	8002ef4 <I2C_IsErrorOccurred>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e031      	b.n	8002e64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e06:	d025      	beq.n	8002e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e08:	f7fe fffa 	bl	8001e00 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d302      	bcc.n	8002e1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11a      	bne.n	8002e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d013      	beq.n	8002e54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e30:	f043 0220 	orr.w	r2, r3, #32
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e007      	b.n	8002e64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d1c4      	bne.n	8002dec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e78:	e02f      	b.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f838 	bl	8002ef4 <I2C_IsErrorOccurred>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e02d      	b.n	8002eea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fe ffb7 	bl	8001e00 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d11a      	bne.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b20      	cmp	r3, #32
 8002eb0:	d013      	beq.n	8002eda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f043 0220 	orr.w	r2, r3, #32
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e007      	b.n	8002eea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0320 	and.w	r3, r3, #32
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d1c8      	bne.n	8002e7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	; 0x28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d068      	beq.n	8002ff2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2210      	movs	r2, #16
 8002f26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f28:	e049      	b.n	8002fbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d045      	beq.n	8002fbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f32:	f7fe ff65 	bl	8001e00 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d302      	bcc.n	8002f48 <I2C_IsErrorOccurred+0x54>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d13a      	bne.n	8002fbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f6a:	d121      	bne.n	8002fb0 <I2C_IsErrorOccurred+0xbc>
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f72:	d01d      	beq.n	8002fb0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d01a      	beq.n	8002fb0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f8a:	f7fe ff39 	bl	8001e00 <HAL_GetTick>
 8002f8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f90:	e00e      	b.n	8002fb0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f92:	f7fe ff35 	bl	8001e00 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b19      	cmp	r3, #25
 8002f9e:	d907      	bls.n	8002fb0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	f043 0320 	orr.w	r3, r3, #32
 8002fa6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002fae:	e006      	b.n	8002fbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d1e9      	bne.n	8002f92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d003      	beq.n	8002fd4 <I2C_IsErrorOccurred+0xe0>
 8002fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0aa      	beq.n	8002f2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d103      	bne.n	8002fe4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00b      	beq.n	800301c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003014:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f043 0308 	orr.w	r3, r3, #8
 800302c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003036:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	f043 0302 	orr.w	r3, r3, #2
 800304e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003058:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01c      	beq.n	80030a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff fe3b 	bl	8002ce4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <I2C_IsErrorOccurred+0x1bc>)
 800307a:	400b      	ands	r3, r1
 800307c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	431a      	orrs	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80030a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3728      	adds	r7, #40	; 0x28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	fe00e800 	.word	0xfe00e800

080030b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	460b      	mov	r3, r1
 80030c0:	817b      	strh	r3, [r7, #10]
 80030c2:	4613      	mov	r3, r2
 80030c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030c6:	897b      	ldrh	r3, [r7, #10]
 80030c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030cc:	7a7b      	ldrb	r3, [r7, #9]
 80030ce:	041b      	lsls	r3, r3, #16
 80030d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	4313      	orrs	r3, r2
 80030de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	0d5b      	lsrs	r3, r3, #21
 80030ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <I2C_TransferConfig+0x60>)
 80030f4:	430b      	orrs	r3, r1
 80030f6:	43db      	mvns	r3, r3
 80030f8:	ea02 0103 	and.w	r1, r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	03ff63ff 	.word	0x03ff63ff

08003118 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b20      	cmp	r3, #32
 800312c:	d138      	bne.n	80031a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003138:	2302      	movs	r3, #2
 800313a:	e032      	b.n	80031a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2224      	movs	r2, #36	; 0x24
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800316a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6819      	ldr	r1, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	e000      	b.n	80031a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031a0:	2302      	movs	r3, #2
  }
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b085      	sub	sp, #20
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d139      	bne.n	8003238 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e033      	b.n	800323a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2224      	movs	r2, #36	; 0x24
 80031de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003200:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800324c:	4b04      	ldr	r3, [pc, #16]	; (8003260 <HAL_PWREx_GetVoltageRange+0x18>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40007000 	.word	0x40007000

08003264 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003272:	d130      	bne.n	80032d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003274:	4b23      	ldr	r3, [pc, #140]	; (8003304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800327c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003280:	d038      	beq.n	80032f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800328a:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800328c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003290:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2232      	movs	r2, #50	; 0x32
 8003298:	fb02 f303 	mul.w	r3, r2, r3
 800329c:	4a1b      	ldr	r2, [pc, #108]	; (800330c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	0c9b      	lsrs	r3, r3, #18
 80032a4:	3301      	adds	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a8:	e002      	b.n	80032b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b0:	4b14      	ldr	r3, [pc, #80]	; (8003304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032bc:	d102      	bne.n	80032c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f2      	bne.n	80032aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d0:	d110      	bne.n	80032f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e00f      	b.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e2:	d007      	beq.n	80032f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032e4:	4b07      	ldr	r3, [pc, #28]	; (8003304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ec:	4a05      	ldr	r2, [pc, #20]	; (8003304 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40007000 	.word	0x40007000
 8003308:	20000000 	.word	0x20000000
 800330c:	431bde83 	.word	0x431bde83

08003310 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e3ca      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003322:	4b97      	ldr	r3, [pc, #604]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800332c:	4b94      	ldr	r3, [pc, #592]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80e4 	beq.w	800350c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <HAL_RCC_OscConfig+0x4a>
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2b0c      	cmp	r3, #12
 800334e:	f040 808b 	bne.w	8003468 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b01      	cmp	r3, #1
 8003356:	f040 8087 	bne.w	8003468 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800335a:	4b89      	ldr	r3, [pc, #548]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_RCC_OscConfig+0x62>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e3a2      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1a      	ldr	r2, [r3, #32]
 8003376:	4b82      	ldr	r3, [pc, #520]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <HAL_RCC_OscConfig+0x7c>
 8003382:	4b7f      	ldr	r3, [pc, #508]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800338a:	e005      	b.n	8003398 <HAL_RCC_OscConfig+0x88>
 800338c:	4b7c      	ldr	r3, [pc, #496]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 800338e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003398:	4293      	cmp	r3, r2
 800339a:	d223      	bcs.n	80033e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fd55 	bl	8003e50 <RCC_SetFlashLatencyFromMSIRange>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e383      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b0:	4b73      	ldr	r3, [pc, #460]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a72      	ldr	r2, [pc, #456]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80033b6:	f043 0308 	orr.w	r3, r3, #8
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b70      	ldr	r3, [pc, #448]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	496d      	ldr	r1, [pc, #436]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ce:	4b6c      	ldr	r3, [pc, #432]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	4968      	ldr	r1, [pc, #416]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
 80033e2:	e025      	b.n	8003430 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033e4:	4b66      	ldr	r3, [pc, #408]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a65      	ldr	r2, [pc, #404]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80033ea:	f043 0308 	orr.w	r3, r3, #8
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b63      	ldr	r3, [pc, #396]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	4960      	ldr	r1, [pc, #384]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003402:	4b5f      	ldr	r3, [pc, #380]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	495b      	ldr	r1, [pc, #364]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003412:	4313      	orrs	r3, r2
 8003414:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fd15 	bl	8003e50 <RCC_SetFlashLatencyFromMSIRange>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e343      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003430:	f000 fc4a 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b52      	ldr	r3, [pc, #328]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	4950      	ldr	r1, [pc, #320]	; (8003584 <HAL_RCC_OscConfig+0x274>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	fa22 f303 	lsr.w	r3, r2, r3
 800344c:	4a4e      	ldr	r2, [pc, #312]	; (8003588 <HAL_RCC_OscConfig+0x278>)
 800344e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003450:	4b4e      	ldr	r3, [pc, #312]	; (800358c <HAL_RCC_OscConfig+0x27c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fc83 	bl	8001d60 <HAL_InitTick>
 800345a:	4603      	mov	r3, r0
 800345c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d052      	beq.n	800350a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	e327      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d032      	beq.n	80034d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003470:	4b43      	ldr	r3, [pc, #268]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a42      	ldr	r2, [pc, #264]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800347c:	f7fe fcc0 	bl	8001e00 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003484:	f7fe fcbc 	bl	8001e00 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e310      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003496:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034a2:	4b37      	ldr	r3, [pc, #220]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a36      	ldr	r2, [pc, #216]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80034a8:	f043 0308 	orr.w	r3, r3, #8
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	4b34      	ldr	r3, [pc, #208]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	4931      	ldr	r1, [pc, #196]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034c0:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	492c      	ldr	r1, [pc, #176]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
 80034d4:	e01a      	b.n	800350c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034d6:	4b2a      	ldr	r3, [pc, #168]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a29      	ldr	r2, [pc, #164]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034e2:	f7fe fc8d 	bl	8001e00 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034ea:	f7fe fc89 	bl	8001e00 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e2dd      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034fc:	4b20      	ldr	r3, [pc, #128]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f0      	bne.n	80034ea <HAL_RCC_OscConfig+0x1da>
 8003508:	e000      	b.n	800350c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800350a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d074      	beq.n	8003602 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b08      	cmp	r3, #8
 800351c:	d005      	beq.n	800352a <HAL_RCC_OscConfig+0x21a>
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	2b0c      	cmp	r3, #12
 8003522:	d10e      	bne.n	8003542 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b03      	cmp	r3, #3
 8003528:	d10b      	bne.n	8003542 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d064      	beq.n	8003600 <HAL_RCC_OscConfig+0x2f0>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d160      	bne.n	8003600 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e2ba      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354a:	d106      	bne.n	800355a <HAL_RCC_OscConfig+0x24a>
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0b      	ldr	r2, [pc, #44]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	e026      	b.n	80035a8 <HAL_RCC_OscConfig+0x298>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003562:	d115      	bne.n	8003590 <HAL_RCC_OscConfig+0x280>
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a05      	ldr	r2, [pc, #20]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 800356a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a02      	ldr	r2, [pc, #8]	; (8003580 <HAL_RCC_OscConfig+0x270>)
 8003576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	e014      	b.n	80035a8 <HAL_RCC_OscConfig+0x298>
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	0800a23c 	.word	0x0800a23c
 8003588:	20000000 	.word	0x20000000
 800358c:	20000004 	.word	0x20000004
 8003590:	4ba0      	ldr	r3, [pc, #640]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a9f      	ldr	r2, [pc, #636]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b9d      	ldr	r3, [pc, #628]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a9c      	ldr	r2, [pc, #624]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 80035a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d013      	beq.n	80035d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fe fc26 	bl	8001e00 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fe fc22 	bl	8001e00 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	; 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e276      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ca:	4b92      	ldr	r3, [pc, #584]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x2a8>
 80035d6:	e014      	b.n	8003602 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7fe fc12 	bl	8001e00 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e0:	f7fe fc0e 	bl	8001e00 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e262      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035f2:	4b88      	ldr	r3, [pc, #544]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x2d0>
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d060      	beq.n	80036d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b04      	cmp	r3, #4
 8003612:	d005      	beq.n	8003620 <HAL_RCC_OscConfig+0x310>
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d119      	bne.n	800364e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d116      	bne.n	800364e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003620:	4b7c      	ldr	r3, [pc, #496]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RCC_OscConfig+0x328>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e23f      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003638:	4b76      	ldr	r3, [pc, #472]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	061b      	lsls	r3, r3, #24
 8003646:	4973      	ldr	r1, [pc, #460]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800364c:	e040      	b.n	80036d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d023      	beq.n	800369e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003656:	4b6f      	ldr	r3, [pc, #444]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6e      	ldr	r2, [pc, #440]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fe fbcd 	bl	8001e00 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366a:	f7fe fbc9 	bl	8001e00 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e21d      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367c:	4b65      	ldr	r3, [pc, #404]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	4b62      	ldr	r3, [pc, #392]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	061b      	lsls	r3, r3, #24
 8003696:	495f      	ldr	r1, [pc, #380]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
 800369c:	e018      	b.n	80036d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369e:	4b5d      	ldr	r3, [pc, #372]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5c      	ldr	r2, [pc, #368]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 80036a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7fe fba9 	bl	8001e00 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fe fba5 	bl	8001e00 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e1f9      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c4:	4b53      	ldr	r3, [pc, #332]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d03c      	beq.n	8003756 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01c      	beq.n	800371e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e4:	4b4b      	ldr	r3, [pc, #300]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 80036e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ea:	4a4a      	ldr	r2, [pc, #296]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f4:	f7fe fb84 	bl	8001e00 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fc:	f7fe fb80 	bl	8001e00 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e1d4      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800370e:	4b41      	ldr	r3, [pc, #260]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0ef      	beq.n	80036fc <HAL_RCC_OscConfig+0x3ec>
 800371c:	e01b      	b.n	8003756 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800371e:	4b3d      	ldr	r3, [pc, #244]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003724:	4a3b      	ldr	r2, [pc, #236]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372e:	f7fe fb67 	bl	8001e00 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003736:	f7fe fb63 	bl	8001e00 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e1b7      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003748:	4b32      	ldr	r3, [pc, #200]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 800374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1ef      	bne.n	8003736 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 80a6 	beq.w	80038b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003764:	2300      	movs	r3, #0
 8003766:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003768:	4b2a      	ldr	r3, [pc, #168]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10d      	bne.n	8003790 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003774:	4b27      	ldr	r3, [pc, #156]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003778:	4a26      	ldr	r2, [pc, #152]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 800377a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377e:	6593      	str	r3, [r2, #88]	; 0x58
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378c:	2301      	movs	r3, #1
 800378e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003790:	4b21      	ldr	r3, [pc, #132]	; (8003818 <HAL_RCC_OscConfig+0x508>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d118      	bne.n	80037ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800379c:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <HAL_RCC_OscConfig+0x508>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <HAL_RCC_OscConfig+0x508>)
 80037a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a8:	f7fe fb2a 	bl	8001e00 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b0:	f7fe fb26 	bl	8001e00 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e17a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <HAL_RCC_OscConfig+0x508>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d108      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4d8>
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e6:	e029      	b.n	800383c <HAL_RCC_OscConfig+0x52c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d115      	bne.n	800381c <HAL_RCC_OscConfig+0x50c>
 80037f0:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	4a07      	ldr	r2, [pc, #28]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 80037f8:	f043 0304 	orr.w	r3, r3, #4
 80037fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	4a03      	ldr	r2, [pc, #12]	; (8003814 <HAL_RCC_OscConfig+0x504>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003810:	e014      	b.n	800383c <HAL_RCC_OscConfig+0x52c>
 8003812:	bf00      	nop
 8003814:	40021000 	.word	0x40021000
 8003818:	40007000 	.word	0x40007000
 800381c:	4b9c      	ldr	r3, [pc, #624]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003822:	4a9b      	ldr	r2, [pc, #620]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800382c:	4b98      	ldr	r3, [pc, #608]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	4a97      	ldr	r2, [pc, #604]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d016      	beq.n	8003872 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe fadc 	bl	8001e00 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe fad8 	bl	8001e00 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	; 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e12a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003862:	4b8b      	ldr	r3, [pc, #556]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ed      	beq.n	800384c <HAL_RCC_OscConfig+0x53c>
 8003870:	e015      	b.n	800389e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fe fac5 	bl	8001e00 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387a:	f7fe fac1 	bl	8001e00 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	; 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e113      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003890:	4b7f      	ldr	r3, [pc, #508]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ed      	bne.n	800387a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800389e:	7ffb      	ldrb	r3, [r7, #31]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d105      	bne.n	80038b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a4:	4b7a      	ldr	r3, [pc, #488]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	4a79      	ldr	r2, [pc, #484]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80fe 	beq.w	8003ab6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	2b02      	cmp	r3, #2
 80038c0:	f040 80d0 	bne.w	8003a64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038c4:	4b72      	ldr	r3, [pc, #456]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0203 	and.w	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d130      	bne.n	800393a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	3b01      	subs	r3, #1
 80038e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d127      	bne.n	800393a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d11f      	bne.n	800393a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003904:	2a07      	cmp	r2, #7
 8003906:	bf14      	ite	ne
 8003908:	2201      	movne	r2, #1
 800390a:	2200      	moveq	r2, #0
 800390c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800390e:	4293      	cmp	r3, r2
 8003910:	d113      	bne.n	800393a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	3b01      	subs	r3, #1
 8003920:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d109      	bne.n	800393a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	085b      	lsrs	r3, r3, #1
 8003932:	3b01      	subs	r3, #1
 8003934:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003936:	429a      	cmp	r2, r3
 8003938:	d06e      	beq.n	8003a18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b0c      	cmp	r3, #12
 800393e:	d069      	beq.n	8003a14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003940:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d105      	bne.n	8003958 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800394c:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0ad      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800395c:	4b4c      	ldr	r3, [pc, #304]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a4b      	ldr	r2, [pc, #300]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003966:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003968:	f7fe fa4a 	bl	8001e00 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003970:	f7fe fa46 	bl	8001e00 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e09a      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003982:	4b43      	ldr	r3, [pc, #268]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800398e:	4b40      	ldr	r3, [pc, #256]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <HAL_RCC_OscConfig+0x784>)
 8003994:	4013      	ands	r3, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800399e:	3a01      	subs	r2, #1
 80039a0:	0112      	lsls	r2, r2, #4
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039a8:	0212      	lsls	r2, r2, #8
 80039aa:	4311      	orrs	r1, r2
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039b0:	0852      	lsrs	r2, r2, #1
 80039b2:	3a01      	subs	r2, #1
 80039b4:	0552      	lsls	r2, r2, #21
 80039b6:	4311      	orrs	r1, r2
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039bc:	0852      	lsrs	r2, r2, #1
 80039be:	3a01      	subs	r2, #1
 80039c0:	0652      	lsls	r2, r2, #25
 80039c2:	4311      	orrs	r1, r2
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c8:	0912      	lsrs	r2, r2, #4
 80039ca:	0452      	lsls	r2, r2, #17
 80039cc:	430a      	orrs	r2, r1
 80039ce:	4930      	ldr	r1, [pc, #192]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039d4:	4b2e      	ldr	r3, [pc, #184]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a2d      	ldr	r2, [pc, #180]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 80039da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e0:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 80039e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039ec:	f7fe fa08 	bl	8001e00 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f4:	f7fe fa04 	bl	8001e00 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e058      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a12:	e050      	b.n	8003ab6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e04f      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a18:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d148      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a24:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a19      	ldr	r2, [pc, #100]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a3c:	f7fe f9e0 	bl	8001e00 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fe f9dc 	bl	8001e00 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e030      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0f0      	beq.n	8003a44 <HAL_RCC_OscConfig+0x734>
 8003a62:	e028      	b.n	8003ab6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b0c      	cmp	r3, #12
 8003a68:	d023      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6a:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <HAL_RCC_OscConfig+0x780>)
 8003a70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fe f9c3 	bl	8001e00 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a7c:	e00c      	b.n	8003a98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7e:	f7fe f9bf 	bl	8001e00 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d905      	bls.n	8003a98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e013      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
 8003a90:	40021000 	.word	0x40021000
 8003a94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <HAL_RCC_OscConfig+0x7b0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1ec      	bne.n	8003a7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <HAL_RCC_OscConfig+0x7b0>)
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	4905      	ldr	r1, [pc, #20]	; (8003ac0 <HAL_RCC_OscConfig+0x7b0>)
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCC_OscConfig+0x7b4>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	60cb      	str	r3, [r1, #12]
 8003ab0:	e001      	b.n	8003ab6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e000      	b.n	8003ab8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3720      	adds	r7, #32
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	feeefffc 	.word	0xfeeefffc

08003ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0e7      	b.n	8003cac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003adc:	4b75      	ldr	r3, [pc, #468]	; (8003cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d910      	bls.n	8003b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b72      	ldr	r3, [pc, #456]	; (8003cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 0207 	bic.w	r2, r3, #7
 8003af2:	4970      	ldr	r1, [pc, #448]	; (8003cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b6e      	ldr	r3, [pc, #440]	; (8003cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0cf      	b.n	8003cac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d010      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	4b66      	ldr	r3, [pc, #408]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d908      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b28:	4b63      	ldr	r3, [pc, #396]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4960      	ldr	r1, [pc, #384]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d04c      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b4e:	4b5a      	ldr	r3, [pc, #360]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d121      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e0a6      	b.n	8003cac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b66:	4b54      	ldr	r3, [pc, #336]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d115      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e09a      	b.n	8003cac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b7e:	4b4e      	ldr	r3, [pc, #312]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e08e      	b.n	8003cac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b8e:	4b4a      	ldr	r3, [pc, #296]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e086      	b.n	8003cac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b46      	ldr	r3, [pc, #280]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4943      	ldr	r1, [pc, #268]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb0:	f7fe f926 	bl	8001e00 <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fe f922 	bl	8001e00 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e06e      	b.n	8003cac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b3a      	ldr	r3, [pc, #232]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d208      	bcs.n	8003c0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	492b      	ldr	r1, [pc, #172]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c0e:	4b29      	ldr	r3, [pc, #164]	; (8003cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d210      	bcs.n	8003c3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1c:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 0207 	bic.w	r2, r3, #7
 8003c24:	4923      	ldr	r1, [pc, #140]	; (8003cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2c:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d001      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e036      	b.n	8003cac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	4918      	ldr	r1, [pc, #96]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d009      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c68:	4b13      	ldr	r3, [pc, #76]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4910      	ldr	r1, [pc, #64]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c7c:	f000 f824 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	490b      	ldr	r1, [pc, #44]	; (8003cbc <HAL_RCC_ClockConfig+0x1f4>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
 8003c98:	4a09      	ldr	r2, [pc, #36]	; (8003cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8003c9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <HAL_RCC_ClockConfig+0x1fc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe f85d 	bl	8001d60 <HAL_InitTick>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003caa:	7afb      	ldrb	r3, [r7, #11]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40022000 	.word	0x40022000
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	0800a23c 	.word	0x0800a23c
 8003cc0:	20000000 	.word	0x20000000
 8003cc4:	20000004 	.word	0x20000004

08003cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	; 0x24
 8003ccc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cd6:	4b3e      	ldr	r3, [pc, #248]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ce0:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_GetSysClockFreq+0x34>
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	2b0c      	cmp	r3, #12
 8003cf4:	d121      	bne.n	8003d3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d11e      	bne.n	8003d3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cfc:	4b34      	ldr	r3, [pc, #208]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d107      	bne.n	8003d18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d08:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	e005      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d18:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d24:	4a2b      	ldr	r2, [pc, #172]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10d      	bne.n	8003d50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d102      	bne.n	8003d46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d40:	4b25      	ldr	r3, [pc, #148]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	e004      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d4c:	4b23      	ldr	r3, [pc, #140]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x114>)
 8003d4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b0c      	cmp	r3, #12
 8003d54:	d134      	bne.n	8003dc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d003      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0xa6>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d003      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0xac>
 8003d6c:	e005      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d70:	617b      	str	r3, [r7, #20]
      break;
 8003d72:	e005      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d74:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x114>)
 8003d76:	617b      	str	r3, [r7, #20]
      break;
 8003d78:	e002      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	617b      	str	r3, [r7, #20]
      break;
 8003d7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	fb03 f202 	mul.w	r2, r3, r2
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	0e5b      	lsrs	r3, r3, #25
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	3301      	adds	r3, #1
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dc0:	69bb      	ldr	r3, [r7, #24]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3724      	adds	r7, #36	; 0x24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	0800a254 	.word	0x0800a254
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	007a1200 	.word	0x007a1200

08003de0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de4:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003de6:	681b      	ldr	r3, [r3, #0]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000000 	.word	0x20000000

08003df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dfc:	f7ff fff0 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4904      	ldr	r1, [pc, #16]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	0800a24c 	.word	0x0800a24c

08003e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e28:	f7ff ffda 	bl	8003de0 <HAL_RCC_GetHCLKFreq>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	0adb      	lsrs	r3, r3, #11
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	4904      	ldr	r1, [pc, #16]	; (8003e4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	0800a24c 	.word	0x0800a24c

08003e50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e5c:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e68:	f7ff f9ee 	bl	8003248 <HAL_PWREx_GetVoltageRange>
 8003e6c:	6178      	str	r0, [r7, #20]
 8003e6e:	e014      	b.n	8003e9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e74:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e7c:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e88:	f7ff f9de 	bl	8003248 <HAL_PWREx_GetVoltageRange>
 8003e8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea0:	d10b      	bne.n	8003eba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b80      	cmp	r3, #128	; 0x80
 8003ea6:	d919      	bls.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2ba0      	cmp	r3, #160	; 0xa0
 8003eac:	d902      	bls.n	8003eb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003eae:	2302      	movs	r3, #2
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	e013      	b.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	e010      	b.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b80      	cmp	r3, #128	; 0x80
 8003ebe:	d902      	bls.n	8003ec6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	e00a      	b.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b80      	cmp	r3, #128	; 0x80
 8003eca:	d102      	bne.n	8003ed2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ecc:	2302      	movs	r3, #2
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	e004      	b.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b70      	cmp	r3, #112	; 0x70
 8003ed6:	d101      	bne.n	8003edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ed8:	2301      	movs	r3, #1
 8003eda:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003edc:	4b0b      	ldr	r3, [pc, #44]	; (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f023 0207 	bic.w	r2, r3, #7
 8003ee4:	4909      	ldr	r1, [pc, #36]	; (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d001      	beq.n	8003efe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40022000 	.word	0x40022000

08003f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f18:	2300      	movs	r3, #0
 8003f1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d041      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f34:	d02a      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f3a:	d824      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f40:	d008      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f46:	d81e      	bhi.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f50:	d010      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f52:	e018      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f54:	4b86      	ldr	r3, [pc, #536]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4a85      	ldr	r2, [pc, #532]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f60:	e015      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 facb 	bl	8004504 <RCCEx_PLLSAI1_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f72:	e00c      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3320      	adds	r3, #32
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fbb6 	bl	80046ec <RCCEx_PLLSAI2_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f84:	e003      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	74fb      	strb	r3, [r7, #19]
      break;
 8003f8a:	e000      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f8e:	7cfb      	ldrb	r3, [r7, #19]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10b      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f94:	4b76      	ldr	r3, [pc, #472]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa2:	4973      	ldr	r1, [pc, #460]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003faa:	e001      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d041      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fc4:	d02a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003fc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fca:	d824      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd0:	d008      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd6:	d81e      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe0:	d010      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003fe2:	e018      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fe4:	4b62      	ldr	r3, [pc, #392]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	4a61      	ldr	r2, [pc, #388]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ff0:	e015      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 fa83 	bl	8004504 <RCCEx_PLLSAI1_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004002:	e00c      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3320      	adds	r3, #32
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fb6e 	bl	80046ec <RCCEx_PLLSAI2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004014:	e003      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	74fb      	strb	r3, [r7, #19]
      break;
 800401a:	e000      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800401c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800401e:	7cfb      	ldrb	r3, [r7, #19]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10b      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004024:	4b52      	ldr	r3, [pc, #328]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004032:	494f      	ldr	r1, [pc, #316]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800403a:	e001      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 80a0 	beq.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404e:	2300      	movs	r3, #0
 8004050:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004052:	4b47      	ldr	r3, [pc, #284]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00d      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004068:	4b41      	ldr	r3, [pc, #260]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	4a40      	ldr	r2, [pc, #256]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004072:	6593      	str	r3, [r2, #88]	; 0x58
 8004074:	4b3e      	ldr	r3, [pc, #248]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004080:	2301      	movs	r3, #1
 8004082:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004084:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a3a      	ldr	r2, [pc, #232]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004090:	f7fd feb6 	bl	8001e00 <HAL_GetTick>
 8004094:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004096:	e009      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004098:	f7fd feb2 	bl	8001e00 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d902      	bls.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	74fb      	strb	r3, [r7, #19]
        break;
 80040aa:	e005      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040ac:	4b31      	ldr	r3, [pc, #196]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0ef      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80040b8:	7cfb      	ldrb	r3, [r7, #19]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d15c      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040be:	4b2c      	ldr	r3, [pc, #176]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01f      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d019      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040dc:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040e8:	4b21      	ldr	r3, [pc, #132]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	4a20      	ldr	r2, [pc, #128]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040f8:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004108:	4a19      	ldr	r2, [pc, #100]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d016      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411a:	f7fd fe71 	bl	8001e00 <HAL_GetTick>
 800411e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004120:	e00b      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7fd fe6d 	bl	8001e00 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004130:	4293      	cmp	r3, r2
 8004132:	d902      	bls.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	74fb      	strb	r3, [r7, #19]
            break;
 8004138:	e006      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ec      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004148:	7cfb      	ldrb	r3, [r7, #19]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10c      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415e:	4904      	ldr	r1, [pc, #16]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004166:	e009      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004168:	7cfb      	ldrb	r3, [r7, #19]
 800416a:	74bb      	strb	r3, [r7, #18]
 800416c:	e006      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800416e:	bf00      	nop
 8004170:	40021000 	.word	0x40021000
 8004174:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	7cfb      	ldrb	r3, [r7, #19]
 800417a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800417c:	7c7b      	ldrb	r3, [r7, #17]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d105      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004182:	4b9e      	ldr	r3, [pc, #632]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	4a9d      	ldr	r2, [pc, #628]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800419a:	4b98      	ldr	r3, [pc, #608]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f023 0203 	bic.w	r2, r3, #3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	4994      	ldr	r1, [pc, #592]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041bc:	4b8f      	ldr	r3, [pc, #572]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f023 020c 	bic.w	r2, r3, #12
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	498c      	ldr	r1, [pc, #560]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041de:	4b87      	ldr	r3, [pc, #540]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	4983      	ldr	r1, [pc, #524]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004200:	4b7e      	ldr	r3, [pc, #504]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	497b      	ldr	r1, [pc, #492]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004222:	4b76      	ldr	r3, [pc, #472]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004230:	4972      	ldr	r1, [pc, #456]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004244:	4b6d      	ldr	r3, [pc, #436]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004252:	496a      	ldr	r1, [pc, #424]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004266:	4b65      	ldr	r3, [pc, #404]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	4961      	ldr	r1, [pc, #388]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004288:	4b5c      	ldr	r3, [pc, #368]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004296:	4959      	ldr	r1, [pc, #356]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042aa:	4b54      	ldr	r3, [pc, #336]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b8:	4950      	ldr	r1, [pc, #320]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042cc:	4b4b      	ldr	r3, [pc, #300]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	4948      	ldr	r1, [pc, #288]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ee:	4b43      	ldr	r3, [pc, #268]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fc:	493f      	ldr	r1, [pc, #252]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d028      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004310:	4b3a      	ldr	r3, [pc, #232]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800431e:	4937      	ldr	r1, [pc, #220]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800432a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800432e:	d106      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004330:	4b32      	ldr	r3, [pc, #200]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a31      	ldr	r2, [pc, #196]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800433a:	60d3      	str	r3, [r2, #12]
 800433c:	e011      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004342:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004346:	d10c      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	2101      	movs	r1, #1
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f8d8 	bl	8004504 <RCCEx_PLLSAI1_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004358:	7cfb      	ldrb	r3, [r7, #19]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800435e:	7cfb      	ldrb	r3, [r7, #19]
 8004360:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d028      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800436e:	4b23      	ldr	r3, [pc, #140]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	491f      	ldr	r1, [pc, #124]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800438c:	d106      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438e:	4b1b      	ldr	r3, [pc, #108]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4a1a      	ldr	r2, [pc, #104]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004398:	60d3      	str	r3, [r2, #12]
 800439a:	e011      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3304      	adds	r3, #4
 80043aa:	2101      	movs	r1, #1
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 f8a9 	bl	8004504 <RCCEx_PLLSAI1_Config>
 80043b2:	4603      	mov	r3, r0
 80043b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043b6:	7cfb      	ldrb	r3, [r7, #19]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d02b      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043da:	4908      	ldr	r1, [pc, #32]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ea:	d109      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a02      	ldr	r2, [pc, #8]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f6:	60d3      	str	r3, [r2, #12]
 80043f8:	e014      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004404:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004408:	d10c      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3304      	adds	r3, #4
 800440e:	2101      	movs	r1, #1
 8004410:	4618      	mov	r0, r3
 8004412:	f000 f877 	bl	8004504 <RCCEx_PLLSAI1_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800441a:	7cfb      	ldrb	r3, [r7, #19]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d02f      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004430:	4b2b      	ldr	r3, [pc, #172]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800443e:	4928      	ldr	r1, [pc, #160]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004440:	4313      	orrs	r3, r2
 8004442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800444a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800444e:	d10d      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3304      	adds	r3, #4
 8004454:	2102      	movs	r1, #2
 8004456:	4618      	mov	r0, r3
 8004458:	f000 f854 	bl	8004504 <RCCEx_PLLSAI1_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004460:	7cfb      	ldrb	r3, [r7, #19]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d014      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004466:	7cfb      	ldrb	r3, [r7, #19]
 8004468:	74bb      	strb	r3, [r7, #18]
 800446a:	e011      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004474:	d10c      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3320      	adds	r3, #32
 800447a:	2102      	movs	r1, #2
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f935 	bl	80046ec <RCCEx_PLLSAI2_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800449c:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044aa:	490d      	ldr	r1, [pc, #52]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ce:	4904      	ldr	r1, [pc, #16]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80044d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40021000 	.word	0x40021000

080044e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a04      	ldr	r2, [pc, #16]	; (8004500 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80044ee:	f043 0304 	orr.w	r3, r3, #4
 80044f2:	6013      	str	r3, [r2, #0]
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40021000 	.word	0x40021000

08004504 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004512:	4b75      	ldr	r3, [pc, #468]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d018      	beq.n	8004550 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800451e:	4b72      	ldr	r3, [pc, #456]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0203 	and.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d10d      	bne.n	800454a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
       ||
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004536:	4b6c      	ldr	r3, [pc, #432]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	091b      	lsrs	r3, r3, #4
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
       ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d047      	beq.n	80045da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
 800454e:	e044      	b.n	80045da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b03      	cmp	r3, #3
 8004556:	d018      	beq.n	800458a <RCCEx_PLLSAI1_Config+0x86>
 8004558:	2b03      	cmp	r3, #3
 800455a:	d825      	bhi.n	80045a8 <RCCEx_PLLSAI1_Config+0xa4>
 800455c:	2b01      	cmp	r3, #1
 800455e:	d002      	beq.n	8004566 <RCCEx_PLLSAI1_Config+0x62>
 8004560:	2b02      	cmp	r3, #2
 8004562:	d009      	beq.n	8004578 <RCCEx_PLLSAI1_Config+0x74>
 8004564:	e020      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004566:	4b60      	ldr	r3, [pc, #384]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d11d      	bne.n	80045ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004576:	e01a      	b.n	80045ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004578:	4b5b      	ldr	r3, [pc, #364]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004580:	2b00      	cmp	r3, #0
 8004582:	d116      	bne.n	80045b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004588:	e013      	b.n	80045b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800458a:	4b57      	ldr	r3, [pc, #348]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10f      	bne.n	80045b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004596:	4b54      	ldr	r3, [pc, #336]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045a6:	e006      	b.n	80045b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
      break;
 80045ac:	e004      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045ae:	bf00      	nop
 80045b0:	e002      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045b2:	bf00      	nop
 80045b4:	e000      	b.n	80045b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10d      	bne.n	80045da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045be:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6819      	ldr	r1, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	430b      	orrs	r3, r1
 80045d4:	4944      	ldr	r1, [pc, #272]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d17d      	bne.n	80046dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045e0:	4b41      	ldr	r3, [pc, #260]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a40      	ldr	r2, [pc, #256]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ec:	f7fd fc08 	bl	8001e00 <HAL_GetTick>
 80045f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045f2:	e009      	b.n	8004608 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f4:	f7fd fc04 	bl	8001e00 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d902      	bls.n	8004608 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	73fb      	strb	r3, [r7, #15]
        break;
 8004606:	e005      	b.n	8004614 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004608:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1ef      	bne.n	80045f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d160      	bne.n	80046dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d111      	bne.n	8004644 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004620:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6892      	ldr	r2, [r2, #8]
 8004630:	0211      	lsls	r1, r2, #8
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68d2      	ldr	r2, [r2, #12]
 8004636:	0912      	lsrs	r2, r2, #4
 8004638:	0452      	lsls	r2, r2, #17
 800463a:	430a      	orrs	r2, r1
 800463c:	492a      	ldr	r1, [pc, #168]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463e:	4313      	orrs	r3, r2
 8004640:	610b      	str	r3, [r1, #16]
 8004642:	e027      	b.n	8004694 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d112      	bne.n	8004670 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800464a:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004652:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6892      	ldr	r2, [r2, #8]
 800465a:	0211      	lsls	r1, r2, #8
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6912      	ldr	r2, [r2, #16]
 8004660:	0852      	lsrs	r2, r2, #1
 8004662:	3a01      	subs	r2, #1
 8004664:	0552      	lsls	r2, r2, #21
 8004666:	430a      	orrs	r2, r1
 8004668:	491f      	ldr	r1, [pc, #124]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466a:	4313      	orrs	r3, r2
 800466c:	610b      	str	r3, [r1, #16]
 800466e:	e011      	b.n	8004694 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004670:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004678:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6892      	ldr	r2, [r2, #8]
 8004680:	0211      	lsls	r1, r2, #8
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	6952      	ldr	r2, [r2, #20]
 8004686:	0852      	lsrs	r2, r2, #1
 8004688:	3a01      	subs	r2, #1
 800468a:	0652      	lsls	r2, r2, #25
 800468c:	430a      	orrs	r2, r1
 800468e:	4916      	ldr	r1, [pc, #88]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004690:	4313      	orrs	r3, r2
 8004692:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004694:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a13      	ldr	r2, [pc, #76]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800469e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a0:	f7fd fbae 	bl	8001e00 <HAL_GetTick>
 80046a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046a6:	e009      	b.n	80046bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046a8:	f7fd fbaa 	bl	8001e00 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d902      	bls.n	80046bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	73fb      	strb	r3, [r7, #15]
          break;
 80046ba:	e005      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0ef      	beq.n	80046a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046ce:	4b06      	ldr	r3, [pc, #24]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	4904      	ldr	r1, [pc, #16]	; (80046e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40021000 	.word	0x40021000

080046ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046fa:	4b6a      	ldr	r3, [pc, #424]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d018      	beq.n	8004738 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004706:	4b67      	ldr	r3, [pc, #412]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f003 0203 	and.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d10d      	bne.n	8004732 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
       ||
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800471e:	4b61      	ldr	r3, [pc, #388]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
       ||
 800472e:	429a      	cmp	r2, r3
 8004730:	d047      	beq.n	80047c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
 8004736:	e044      	b.n	80047c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b03      	cmp	r3, #3
 800473e:	d018      	beq.n	8004772 <RCCEx_PLLSAI2_Config+0x86>
 8004740:	2b03      	cmp	r3, #3
 8004742:	d825      	bhi.n	8004790 <RCCEx_PLLSAI2_Config+0xa4>
 8004744:	2b01      	cmp	r3, #1
 8004746:	d002      	beq.n	800474e <RCCEx_PLLSAI2_Config+0x62>
 8004748:	2b02      	cmp	r3, #2
 800474a:	d009      	beq.n	8004760 <RCCEx_PLLSAI2_Config+0x74>
 800474c:	e020      	b.n	8004790 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800474e:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11d      	bne.n	8004796 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475e:	e01a      	b.n	8004796 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004760:	4b50      	ldr	r3, [pc, #320]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d116      	bne.n	800479a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004770:	e013      	b.n	800479a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004772:	4b4c      	ldr	r3, [pc, #304]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10f      	bne.n	800479e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800477e:	4b49      	ldr	r3, [pc, #292]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800478e:	e006      	b.n	800479e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	e004      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800479e:	bf00      	nop
    }

    if(status == HAL_OK)
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10d      	bne.n	80047c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047a6:	4b3f      	ldr	r3, [pc, #252]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6819      	ldr	r1, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	430b      	orrs	r3, r1
 80047bc:	4939      	ldr	r1, [pc, #228]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d167      	bne.n	8004898 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047c8:	4b36      	ldr	r3, [pc, #216]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a35      	ldr	r2, [pc, #212]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d4:	f7fd fb14 	bl	8001e00 <HAL_GetTick>
 80047d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047da:	e009      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047dc:	f7fd fb10 	bl	8001e00 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d902      	bls.n	80047f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	73fb      	strb	r3, [r7, #15]
        break;
 80047ee:	e005      	b.n	80047fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047f0:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ef      	bne.n	80047dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d14a      	bne.n	8004898 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d111      	bne.n	800482c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004808:	4b26      	ldr	r3, [pc, #152]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6892      	ldr	r2, [r2, #8]
 8004818:	0211      	lsls	r1, r2, #8
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68d2      	ldr	r2, [r2, #12]
 800481e:	0912      	lsrs	r2, r2, #4
 8004820:	0452      	lsls	r2, r2, #17
 8004822:	430a      	orrs	r2, r1
 8004824:	491f      	ldr	r1, [pc, #124]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	614b      	str	r3, [r1, #20]
 800482a:	e011      	b.n	8004850 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800482c:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004834:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6892      	ldr	r2, [r2, #8]
 800483c:	0211      	lsls	r1, r2, #8
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6912      	ldr	r2, [r2, #16]
 8004842:	0852      	lsrs	r2, r2, #1
 8004844:	3a01      	subs	r2, #1
 8004846:	0652      	lsls	r2, r2, #25
 8004848:	430a      	orrs	r2, r1
 800484a:	4916      	ldr	r1, [pc, #88]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800484c:	4313      	orrs	r3, r2
 800484e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004850:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fd fad0 	bl	8001e00 <HAL_GetTick>
 8004860:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004862:	e009      	b.n	8004878 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004864:	f7fd facc 	bl	8001e00 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d902      	bls.n	8004878 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	73fb      	strb	r3, [r7, #15]
          break;
 8004876:	e005      	b.n	8004884 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0ef      	beq.n	8004864 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800488c:	695a      	ldr	r2, [r3, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4904      	ldr	r1, [pc, #16]	; (80048a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004894:	4313      	orrs	r3, r2
 8004896:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004898:	7bfb      	ldrb	r3, [r7, #15]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40021000 	.word	0x40021000

080048a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e040      	b.n	800493c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fd f83e 	bl	800194c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2224      	movs	r2, #36	; 0x24
 80048d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fb6a 	bl	8004fc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f8af 	bl	8004a58 <UART_SetConfig>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e01b      	b.n	800493c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fbe9 	bl	800510c <UART_CheckIdleState>
 800493a:	4603      	mov	r3, r0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	; 0x28
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004958:	2b20      	cmp	r3, #32
 800495a:	d178      	bne.n	8004a4e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_UART_Transmit+0x24>
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e071      	b.n	8004a50 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2221      	movs	r2, #33	; 0x21
 8004978:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497a:	f7fd fa41 	bl	8001e00 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d108      	bne.n	80049ac <HAL_UART_Transmit+0x68>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e003      	b.n	80049b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b4:	e030      	b.n	8004a18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	2180      	movs	r1, #128	; 0x80
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fc4b 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d004      	beq.n	80049d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e03c      	b.n	8004a50 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10b      	bne.n	80049f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	881a      	ldrh	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e8:	b292      	uxth	r2, r2
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	3302      	adds	r3, #2
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	e008      	b.n	8004a06 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	b292      	uxth	r2, r2
 80049fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3301      	adds	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1c8      	bne.n	80049b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2140      	movs	r1, #64	; 0x40
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fc14 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d004      	beq.n	8004a44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e005      	b.n	8004a50 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
  }
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a5c:	b08a      	sub	sp, #40	; 0x28
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4ba4      	ldr	r3, [pc, #656]	; (8004d18 <UART_SetConfig+0x2c0>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	6812      	ldr	r2, [r2, #0]
 8004a8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a90:	430b      	orrs	r3, r1
 8004a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a99      	ldr	r2, [pc, #612]	; (8004d1c <UART_SetConfig+0x2c4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a90      	ldr	r2, [pc, #576]	; (8004d20 <UART_SetConfig+0x2c8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d126      	bne.n	8004b30 <UART_SetConfig+0xd8>
 8004ae2:	4b90      	ldr	r3, [pc, #576]	; (8004d24 <UART_SetConfig+0x2cc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d81b      	bhi.n	8004b28 <UART_SetConfig+0xd0>
 8004af0:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <UART_SetConfig+0xa0>)
 8004af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af6:	bf00      	nop
 8004af8:	08004b09 	.word	0x08004b09
 8004afc:	08004b19 	.word	0x08004b19
 8004b00:	08004b11 	.word	0x08004b11
 8004b04:	08004b21 	.word	0x08004b21
 8004b08:	2301      	movs	r3, #1
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0e:	e116      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004b10:	2302      	movs	r3, #2
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b16:	e112      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004b18:	2304      	movs	r3, #4
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1e:	e10e      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004b20:	2308      	movs	r3, #8
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b26:	e10a      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2e:	e106      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a7c      	ldr	r2, [pc, #496]	; (8004d28 <UART_SetConfig+0x2d0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d138      	bne.n	8004bac <UART_SetConfig+0x154>
 8004b3a:	4b7a      	ldr	r3, [pc, #488]	; (8004d24 <UART_SetConfig+0x2cc>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	2b0c      	cmp	r3, #12
 8004b46:	d82d      	bhi.n	8004ba4 <UART_SetConfig+0x14c>
 8004b48:	a201      	add	r2, pc, #4	; (adr r2, 8004b50 <UART_SetConfig+0xf8>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b85 	.word	0x08004b85
 8004b54:	08004ba5 	.word	0x08004ba5
 8004b58:	08004ba5 	.word	0x08004ba5
 8004b5c:	08004ba5 	.word	0x08004ba5
 8004b60:	08004b95 	.word	0x08004b95
 8004b64:	08004ba5 	.word	0x08004ba5
 8004b68:	08004ba5 	.word	0x08004ba5
 8004b6c:	08004ba5 	.word	0x08004ba5
 8004b70:	08004b8d 	.word	0x08004b8d
 8004b74:	08004ba5 	.word	0x08004ba5
 8004b78:	08004ba5 	.word	0x08004ba5
 8004b7c:	08004ba5 	.word	0x08004ba5
 8004b80:	08004b9d 	.word	0x08004b9d
 8004b84:	2300      	movs	r3, #0
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8a:	e0d8      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b92:	e0d4      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004b94:	2304      	movs	r3, #4
 8004b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9a:	e0d0      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004b9c:	2308      	movs	r3, #8
 8004b9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba2:	e0cc      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004baa:	e0c8      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a5e      	ldr	r2, [pc, #376]	; (8004d2c <UART_SetConfig+0x2d4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d125      	bne.n	8004c02 <UART_SetConfig+0x1aa>
 8004bb6:	4b5b      	ldr	r3, [pc, #364]	; (8004d24 <UART_SetConfig+0x2cc>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bc0:	2b30      	cmp	r3, #48	; 0x30
 8004bc2:	d016      	beq.n	8004bf2 <UART_SetConfig+0x19a>
 8004bc4:	2b30      	cmp	r3, #48	; 0x30
 8004bc6:	d818      	bhi.n	8004bfa <UART_SetConfig+0x1a2>
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d00a      	beq.n	8004be2 <UART_SetConfig+0x18a>
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d814      	bhi.n	8004bfa <UART_SetConfig+0x1a2>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <UART_SetConfig+0x182>
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d008      	beq.n	8004bea <UART_SetConfig+0x192>
 8004bd8:	e00f      	b.n	8004bfa <UART_SetConfig+0x1a2>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be0:	e0ad      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004be2:	2302      	movs	r3, #2
 8004be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be8:	e0a9      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004bea:	2304      	movs	r3, #4
 8004bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf0:	e0a5      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf8:	e0a1      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004bfa:	2310      	movs	r3, #16
 8004bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c00:	e09d      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a4a      	ldr	r2, [pc, #296]	; (8004d30 <UART_SetConfig+0x2d8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d125      	bne.n	8004c58 <UART_SetConfig+0x200>
 8004c0c:	4b45      	ldr	r3, [pc, #276]	; (8004d24 <UART_SetConfig+0x2cc>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c16:	2bc0      	cmp	r3, #192	; 0xc0
 8004c18:	d016      	beq.n	8004c48 <UART_SetConfig+0x1f0>
 8004c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c1c:	d818      	bhi.n	8004c50 <UART_SetConfig+0x1f8>
 8004c1e:	2b80      	cmp	r3, #128	; 0x80
 8004c20:	d00a      	beq.n	8004c38 <UART_SetConfig+0x1e0>
 8004c22:	2b80      	cmp	r3, #128	; 0x80
 8004c24:	d814      	bhi.n	8004c50 <UART_SetConfig+0x1f8>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <UART_SetConfig+0x1d8>
 8004c2a:	2b40      	cmp	r3, #64	; 0x40
 8004c2c:	d008      	beq.n	8004c40 <UART_SetConfig+0x1e8>
 8004c2e:	e00f      	b.n	8004c50 <UART_SetConfig+0x1f8>
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c36:	e082      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3e:	e07e      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004c40:	2304      	movs	r3, #4
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c46:	e07a      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004c48:	2308      	movs	r3, #8
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4e:	e076      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004c50:	2310      	movs	r3, #16
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c56:	e072      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a35      	ldr	r2, [pc, #212]	; (8004d34 <UART_SetConfig+0x2dc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d12a      	bne.n	8004cb8 <UART_SetConfig+0x260>
 8004c62:	4b30      	ldr	r3, [pc, #192]	; (8004d24 <UART_SetConfig+0x2cc>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c70:	d01a      	beq.n	8004ca8 <UART_SetConfig+0x250>
 8004c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c76:	d81b      	bhi.n	8004cb0 <UART_SetConfig+0x258>
 8004c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7c:	d00c      	beq.n	8004c98 <UART_SetConfig+0x240>
 8004c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c82:	d815      	bhi.n	8004cb0 <UART_SetConfig+0x258>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <UART_SetConfig+0x238>
 8004c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c8c:	d008      	beq.n	8004ca0 <UART_SetConfig+0x248>
 8004c8e:	e00f      	b.n	8004cb0 <UART_SetConfig+0x258>
 8004c90:	2300      	movs	r3, #0
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c96:	e052      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9e:	e04e      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca6:	e04a      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004ca8:	2308      	movs	r3, #8
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cae:	e046      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb6:	e042      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a17      	ldr	r2, [pc, #92]	; (8004d1c <UART_SetConfig+0x2c4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d13a      	bne.n	8004d38 <UART_SetConfig+0x2e0>
 8004cc2:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <UART_SetConfig+0x2cc>)
 8004cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ccc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cd0:	d01a      	beq.n	8004d08 <UART_SetConfig+0x2b0>
 8004cd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cd6:	d81b      	bhi.n	8004d10 <UART_SetConfig+0x2b8>
 8004cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cdc:	d00c      	beq.n	8004cf8 <UART_SetConfig+0x2a0>
 8004cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce2:	d815      	bhi.n	8004d10 <UART_SetConfig+0x2b8>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d003      	beq.n	8004cf0 <UART_SetConfig+0x298>
 8004ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cec:	d008      	beq.n	8004d00 <UART_SetConfig+0x2a8>
 8004cee:	e00f      	b.n	8004d10 <UART_SetConfig+0x2b8>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e022      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfe:	e01e      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004d00:	2304      	movs	r3, #4
 8004d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d06:	e01a      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004d08:	2308      	movs	r3, #8
 8004d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0e:	e016      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004d10:	2310      	movs	r3, #16
 8004d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d16:	e012      	b.n	8004d3e <UART_SetConfig+0x2e6>
 8004d18:	efff69f3 	.word	0xefff69f3
 8004d1c:	40008000 	.word	0x40008000
 8004d20:	40013800 	.word	0x40013800
 8004d24:	40021000 	.word	0x40021000
 8004d28:	40004400 	.word	0x40004400
 8004d2c:	40004800 	.word	0x40004800
 8004d30:	40004c00 	.word	0x40004c00
 8004d34:	40005000 	.word	0x40005000
 8004d38:	2310      	movs	r3, #16
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a9f      	ldr	r2, [pc, #636]	; (8004fc0 <UART_SetConfig+0x568>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d17a      	bne.n	8004e3e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d824      	bhi.n	8004d9a <UART_SetConfig+0x342>
 8004d50:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <UART_SetConfig+0x300>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d9b 	.word	0x08004d9b
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004d9b 	.word	0x08004d9b
 8004d68:	08004d8b 	.word	0x08004d8b
 8004d6c:	08004d9b 	.word	0x08004d9b
 8004d70:	08004d9b 	.word	0x08004d9b
 8004d74:	08004d9b 	.word	0x08004d9b
 8004d78:	08004d93 	.word	0x08004d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f7ff f83c 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004d80:	61f8      	str	r0, [r7, #28]
        break;
 8004d82:	e010      	b.n	8004da6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d84:	4b8f      	ldr	r3, [pc, #572]	; (8004fc4 <UART_SetConfig+0x56c>)
 8004d86:	61fb      	str	r3, [r7, #28]
        break;
 8004d88:	e00d      	b.n	8004da6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d8a:	f7fe ff9d 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8004d8e:	61f8      	str	r0, [r7, #28]
        break;
 8004d90:	e009      	b.n	8004da6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d96:	61fb      	str	r3, [r7, #28]
        break;
 8004d98:	e005      	b.n	8004da6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004da4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80fb 	beq.w	8004fa4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	4613      	mov	r3, r2
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	4413      	add	r3, r2
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d305      	bcc.n	8004dca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d903      	bls.n	8004dd2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004dd0:	e0e8      	b.n	8004fa4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	461c      	mov	r4, r3
 8004dd8:	4615      	mov	r5, r2
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	022b      	lsls	r3, r5, #8
 8004de4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004de8:	0222      	lsls	r2, r4, #8
 8004dea:	68f9      	ldr	r1, [r7, #12]
 8004dec:	6849      	ldr	r1, [r1, #4]
 8004dee:	0849      	lsrs	r1, r1, #1
 8004df0:	2000      	movs	r0, #0
 8004df2:	4688      	mov	r8, r1
 8004df4:	4681      	mov	r9, r0
 8004df6:	eb12 0a08 	adds.w	sl, r2, r8
 8004dfa:	eb43 0b09 	adc.w	fp, r3, r9
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	603b      	str	r3, [r7, #0]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e0c:	4650      	mov	r0, sl
 8004e0e:	4659      	mov	r1, fp
 8004e10:	f7fb ff3a 	bl	8000c88 <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4613      	mov	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e22:	d308      	bcc.n	8004e36 <UART_SetConfig+0x3de>
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2a:	d204      	bcs.n	8004e36 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	60da      	str	r2, [r3, #12]
 8004e34:	e0b6      	b.n	8004fa4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e3c:	e0b2      	b.n	8004fa4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e46:	d15e      	bne.n	8004f06 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d828      	bhi.n	8004ea2 <UART_SetConfig+0x44a>
 8004e50:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <UART_SetConfig+0x400>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e85 	.word	0x08004e85
 8004e60:	08004e8d 	.word	0x08004e8d
 8004e64:	08004ea3 	.word	0x08004ea3
 8004e68:	08004e93 	.word	0x08004e93
 8004e6c:	08004ea3 	.word	0x08004ea3
 8004e70:	08004ea3 	.word	0x08004ea3
 8004e74:	08004ea3 	.word	0x08004ea3
 8004e78:	08004e9b 	.word	0x08004e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e7c:	f7fe ffbc 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004e80:	61f8      	str	r0, [r7, #28]
        break;
 8004e82:	e014      	b.n	8004eae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e84:	f7fe ffce 	bl	8003e24 <HAL_RCC_GetPCLK2Freq>
 8004e88:	61f8      	str	r0, [r7, #28]
        break;
 8004e8a:	e010      	b.n	8004eae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e8c:	4b4d      	ldr	r3, [pc, #308]	; (8004fc4 <UART_SetConfig+0x56c>)
 8004e8e:	61fb      	str	r3, [r7, #28]
        break;
 8004e90:	e00d      	b.n	8004eae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e92:	f7fe ff19 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8004e96:	61f8      	str	r0, [r7, #28]
        break;
 8004e98:	e009      	b.n	8004eae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e9e:	61fb      	str	r3, [r7, #28]
        break;
 8004ea0:	e005      	b.n	8004eae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004eac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d077      	beq.n	8004fa4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	005a      	lsls	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	441a      	add	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b0f      	cmp	r3, #15
 8004ece:	d916      	bls.n	8004efe <UART_SetConfig+0x4a6>
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed6:	d212      	bcs.n	8004efe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f023 030f 	bic.w	r3, r3, #15
 8004ee0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	085b      	lsrs	r3, r3, #1
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	8afb      	ldrh	r3, [r7, #22]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	8afa      	ldrh	r2, [r7, #22]
 8004efa:	60da      	str	r2, [r3, #12]
 8004efc:	e052      	b.n	8004fa4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f04:	e04e      	b.n	8004fa4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d827      	bhi.n	8004f5e <UART_SetConfig+0x506>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <UART_SetConfig+0x4bc>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f39 	.word	0x08004f39
 8004f18:	08004f41 	.word	0x08004f41
 8004f1c:	08004f49 	.word	0x08004f49
 8004f20:	08004f5f 	.word	0x08004f5f
 8004f24:	08004f4f 	.word	0x08004f4f
 8004f28:	08004f5f 	.word	0x08004f5f
 8004f2c:	08004f5f 	.word	0x08004f5f
 8004f30:	08004f5f 	.word	0x08004f5f
 8004f34:	08004f57 	.word	0x08004f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f38:	f7fe ff5e 	bl	8003df8 <HAL_RCC_GetPCLK1Freq>
 8004f3c:	61f8      	str	r0, [r7, #28]
        break;
 8004f3e:	e014      	b.n	8004f6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f40:	f7fe ff70 	bl	8003e24 <HAL_RCC_GetPCLK2Freq>
 8004f44:	61f8      	str	r0, [r7, #28]
        break;
 8004f46:	e010      	b.n	8004f6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f48:	4b1e      	ldr	r3, [pc, #120]	; (8004fc4 <UART_SetConfig+0x56c>)
 8004f4a:	61fb      	str	r3, [r7, #28]
        break;
 8004f4c:	e00d      	b.n	8004f6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4e:	f7fe febb 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8004f52:	61f8      	str	r0, [r7, #28]
        break;
 8004f54:	e009      	b.n	8004f6a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5a:	61fb      	str	r3, [r7, #28]
        break;
 8004f5c:	e005      	b.n	8004f6a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f68:	bf00      	nop
    }

    if (pclk != 0U)
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d019      	beq.n	8004fa4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	085a      	lsrs	r2, r3, #1
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	441a      	add	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	d909      	bls.n	8004f9e <UART_SetConfig+0x546>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f90:	d205      	bcs.n	8004f9e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60da      	str	r2, [r3, #12]
 8004f9c:	e002      	b.n	8004fa4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004fb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3728      	adds	r7, #40	; 0x28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40008000 	.word	0x40008000
 8004fc4:	00f42400 	.word	0x00f42400

08004fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	f003 0304 	and.w	r3, r3, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	430a      	orrs	r2, r1
 8005078:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01a      	beq.n	80050de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c6:	d10a      	bne.n	80050de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b098      	sub	sp, #96	; 0x60
 8005110:	af02      	add	r7, sp, #8
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800511c:	f7fc fe70 	bl	8001e00 <HAL_GetTick>
 8005120:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b08      	cmp	r3, #8
 800512e:	d12e      	bne.n	800518e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005138:	2200      	movs	r2, #0
 800513a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f88c 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d021      	beq.n	800518e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800515e:	653b      	str	r3, [r7, #80]	; 0x50
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	461a      	mov	r2, r3
 8005166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005168:	647b      	str	r3, [r7, #68]	; 0x44
 800516a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800516e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e6      	bne.n	800514a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2220      	movs	r2, #32
 8005180:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e062      	b.n	8005254 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b04      	cmp	r3, #4
 800519a:	d149      	bne.n	8005230 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a4:	2200      	movs	r2, #0
 80051a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f856 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d03c      	beq.n	8005230 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	623b      	str	r3, [r7, #32]
   return(result);
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d4:	633b      	str	r3, [r7, #48]	; 0x30
 80051d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e6      	bne.n	80051b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3308      	adds	r3, #8
 80051ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005208:	61fa      	str	r2, [r7, #28]
 800520a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	69b9      	ldr	r1, [r7, #24]
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	617b      	str	r3, [r7, #20]
   return(result);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e5      	bne.n	80051e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e011      	b.n	8005254 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3758      	adds	r7, #88	; 0x58
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526c:	e04f      	b.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d04b      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005276:	f7fc fdc3 	bl	8001e00 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <UART_WaitOnFlagUntilTimeout+0x30>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e04e      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d037      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b80      	cmp	r3, #128	; 0x80
 80052a2:	d034      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b40      	cmp	r3, #64	; 0x40
 80052a8:	d031      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d110      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2208      	movs	r2, #8
 80052be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f838 	bl	8005336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2208      	movs	r2, #8
 80052ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e029      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052e8:	d111      	bne.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f81e 	bl	8005336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e00f      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	bf0c      	ite	eq
 800531e:	2301      	moveq	r3, #1
 8005320:	2300      	movne	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	429a      	cmp	r2, r3
 800532a:	d0a0      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005336:	b480      	push	{r7}
 8005338:	b095      	sub	sp, #84	; 0x54
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535c:	643b      	str	r3, [r7, #64]	; 0x40
 800535e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005362:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e6      	bne.n	800533e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3308      	adds	r3, #8
 8005376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f023 0301 	bic.w	r3, r3, #1
 8005386:	64bb      	str	r3, [r7, #72]	; 0x48
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	3308      	adds	r3, #8
 800538e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005390:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e5      	bne.n	8005370 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d118      	bne.n	80053de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f023 0310 	bic.w	r3, r3, #16
 80053c0:	647b      	str	r3, [r7, #68]	; 0x44
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	6979      	ldr	r1, [r7, #20]
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	613b      	str	r3, [r7, #16]
   return(result);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e6      	bne.n	80053ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80053f2:	bf00      	nop
 80053f4:	3754      	adds	r7, #84	; 0x54
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6892      	ldr	r2, [r2, #8]
 800545c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6852      	ldr	r2, [r2, #4]
 8005466:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d103      	bne.n	800547a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	1e5a      	subs	r2, r3, #1
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a6:	4b4f      	ldr	r3, [pc, #316]	; (80055e4 <xTaskIncrementTick+0x148>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f040 808f 	bne.w	80055ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054b0:	4b4d      	ldr	r3, [pc, #308]	; (80055e8 <xTaskIncrementTick+0x14c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054b8:	4a4b      	ldr	r2, [pc, #300]	; (80055e8 <xTaskIncrementTick+0x14c>)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d120      	bne.n	8005506 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80054c4:	4b49      	ldr	r3, [pc, #292]	; (80055ec <xTaskIncrementTick+0x150>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <xTaskIncrementTick+0x46>
 80054e4:	4b41      	ldr	r3, [pc, #260]	; (80055ec <xTaskIncrementTick+0x150>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	4b41      	ldr	r3, [pc, #260]	; (80055f0 <xTaskIncrementTick+0x154>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a3f      	ldr	r2, [pc, #252]	; (80055ec <xTaskIncrementTick+0x150>)
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	4a3f      	ldr	r2, [pc, #252]	; (80055f0 <xTaskIncrementTick+0x154>)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	4b3e      	ldr	r3, [pc, #248]	; (80055f4 <xTaskIncrementTick+0x158>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	4a3d      	ldr	r2, [pc, #244]	; (80055f4 <xTaskIncrementTick+0x158>)
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	f000 f8e3 	bl	80056cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005506:	4b3c      	ldr	r3, [pc, #240]	; (80055f8 <xTaskIncrementTick+0x15c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	429a      	cmp	r2, r3
 800550e:	d349      	bcc.n	80055a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005510:	4b36      	ldr	r3, [pc, #216]	; (80055ec <xTaskIncrementTick+0x150>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d104      	bne.n	8005524 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800551a:	4b37      	ldr	r3, [pc, #220]	; (80055f8 <xTaskIncrementTick+0x15c>)
 800551c:	f04f 32ff 	mov.w	r2, #4294967295
 8005520:	601a      	str	r2, [r3, #0]
					break;
 8005522:	e03f      	b.n	80055a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005524:	4b31      	ldr	r3, [pc, #196]	; (80055ec <xTaskIncrementTick+0x150>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	d203      	bcs.n	8005544 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800553c:	4a2e      	ldr	r2, [pc, #184]	; (80055f8 <xTaskIncrementTick+0x15c>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005542:	e02f      	b.n	80055a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	3304      	adds	r3, #4
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff ff7c 	bl	8005446 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	2b00      	cmp	r3, #0
 8005554:	d004      	beq.n	8005560 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	3318      	adds	r3, #24
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff ff73 	bl	8005446 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005564:	4b25      	ldr	r3, [pc, #148]	; (80055fc <xTaskIncrementTick+0x160>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d903      	bls.n	8005574 <xTaskIncrementTick+0xd8>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005570:	4a22      	ldr	r2, [pc, #136]	; (80055fc <xTaskIncrementTick+0x160>)
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <xTaskIncrementTick+0x164>)
 8005582:	441a      	add	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	3304      	adds	r3, #4
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f7ff ff37 	bl	80053fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <xTaskIncrementTick+0x168>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	429a      	cmp	r2, r3
 800559c:	d3b8      	bcc.n	8005510 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800559e:	2301      	movs	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055a2:	e7b5      	b.n	8005510 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055a4:	4b17      	ldr	r3, [pc, #92]	; (8005604 <xTaskIncrementTick+0x168>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055aa:	4915      	ldr	r1, [pc, #84]	; (8005600 <xTaskIncrementTick+0x164>)
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d901      	bls.n	80055c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80055bc:	2301      	movs	r3, #1
 80055be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80055c0:	4b11      	ldr	r3, [pc, #68]	; (8005608 <xTaskIncrementTick+0x16c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80055c8:	2301      	movs	r3, #1
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	e004      	b.n	80055d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80055ce:	4b0f      	ldr	r3, [pc, #60]	; (800560c <xTaskIncrementTick+0x170>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3301      	adds	r3, #1
 80055d4:	4a0d      	ldr	r2, [pc, #52]	; (800560c <xTaskIncrementTick+0x170>)
 80055d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80055d8:	697b      	ldr	r3, [r7, #20]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	2000075c 	.word	0x2000075c
 80055e8:	20000740 	.word	0x20000740
 80055ec:	20000738 	.word	0x20000738
 80055f0:	2000073c 	.word	0x2000073c
 80055f4:	20000754 	.word	0x20000754
 80055f8:	20000758 	.word	0x20000758
 80055fc:	20000744 	.word	0x20000744
 8005600:	200002d8 	.word	0x200002d8
 8005604:	200002d4 	.word	0x200002d4
 8005608:	20000750 	.word	0x20000750
 800560c:	2000074c 	.word	0x2000074c

08005610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005616:	4b28      	ldr	r3, [pc, #160]	; (80056b8 <vTaskSwitchContext+0xa8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800561e:	4b27      	ldr	r3, [pc, #156]	; (80056bc <vTaskSwitchContext+0xac>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005624:	e041      	b.n	80056aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005626:	4b25      	ldr	r3, [pc, #148]	; (80056bc <vTaskSwitchContext+0xac>)
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800562c:	4b24      	ldr	r3, [pc, #144]	; (80056c0 <vTaskSwitchContext+0xb0>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e010      	b.n	8005656 <vTaskSwitchContext+0x46>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10a      	bne.n	8005650 <vTaskSwitchContext+0x40>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	607b      	str	r3, [r7, #4]
}
 800564c:	bf00      	nop
 800564e:	e7fe      	b.n	800564e <vTaskSwitchContext+0x3e>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3b01      	subs	r3, #1
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	491b      	ldr	r1, [pc, #108]	; (80056c4 <vTaskSwitchContext+0xb4>)
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0e4      	beq.n	8005634 <vTaskSwitchContext+0x24>
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <vTaskSwitchContext+0xb4>)
 8005676:	4413      	add	r3, r2
 8005678:	60bb      	str	r3, [r7, #8]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	605a      	str	r2, [r3, #4]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	3308      	adds	r3, #8
 800568c:	429a      	cmp	r2, r3
 800568e:	d104      	bne.n	800569a <vTaskSwitchContext+0x8a>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	605a      	str	r2, [r3, #4]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4a09      	ldr	r2, [pc, #36]	; (80056c8 <vTaskSwitchContext+0xb8>)
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	4a06      	ldr	r2, [pc, #24]	; (80056c0 <vTaskSwitchContext+0xb0>)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6013      	str	r3, [r2, #0]
}
 80056aa:	bf00      	nop
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	2000075c 	.word	0x2000075c
 80056bc:	20000750 	.word	0x20000750
 80056c0:	20000744 	.word	0x20000744
 80056c4:	200002d8 	.word	0x200002d8
 80056c8:	200002d4 	.word	0x200002d4

080056cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056d2:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <prvResetNextTaskUnblockTime+0x38>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056dc:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <prvResetNextTaskUnblockTime+0x3c>)
 80056de:	f04f 32ff 	mov.w	r2, #4294967295
 80056e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056e4:	e008      	b.n	80056f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <prvResetNextTaskUnblockTime+0x38>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a04      	ldr	r2, [pc, #16]	; (8005708 <prvResetNextTaskUnblockTime+0x3c>)
 80056f6:	6013      	str	r3, [r2, #0]
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	20000738 	.word	0x20000738
 8005708:	20000758 	.word	0x20000758

0800570c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <xTaskGetSchedulerState+0x34>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d102      	bne.n	8005720 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800571a:	2301      	movs	r3, #1
 800571c:	607b      	str	r3, [r7, #4]
 800571e:	e008      	b.n	8005732 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005720:	4b08      	ldr	r3, [pc, #32]	; (8005744 <xTaskGetSchedulerState+0x38>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005728:	2302      	movs	r3, #2
 800572a:	607b      	str	r3, [r7, #4]
 800572c:	e001      	b.n	8005732 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800572e:	2300      	movs	r3, #0
 8005730:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005732:	687b      	ldr	r3, [r7, #4]
	}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	20000748 	.word	0x20000748
 8005744:	2000075c 	.word	0x2000075c
	...

08005750 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005750:	4b07      	ldr	r3, [pc, #28]	; (8005770 <pxCurrentTCBConst2>)
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	6808      	ldr	r0, [r1, #0]
 8005756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575a:	f380 8809 	msr	PSP, r0
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f380 8811 	msr	BASEPRI, r0
 800576a:	4770      	bx	lr
 800576c:	f3af 8000 	nop.w

08005770 <pxCurrentTCBConst2>:
 8005770:	200002d4 	.word	0x200002d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop
	...

08005780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005780:	f3ef 8009 	mrs	r0, PSP
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	4b15      	ldr	r3, [pc, #84]	; (80057e0 <pxCurrentTCBConst>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	f01e 0f10 	tst.w	lr, #16
 8005790:	bf08      	it	eq
 8005792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579a:	6010      	str	r0, [r2, #0]
 800579c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80057a4:	f380 8811 	msr	BASEPRI, r0
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f7ff ff2e 	bl	8005610 <vTaskSwitchContext>
 80057b4:	f04f 0000 	mov.w	r0, #0
 80057b8:	f380 8811 	msr	BASEPRI, r0
 80057bc:	bc09      	pop	{r0, r3}
 80057be:	6819      	ldr	r1, [r3, #0]
 80057c0:	6808      	ldr	r0, [r1, #0]
 80057c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c6:	f01e 0f10 	tst.w	lr, #16
 80057ca:	bf08      	it	eq
 80057cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80057d0:	f380 8809 	msr	PSP, r0
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	f3af 8000 	nop.w

080057e0 <pxCurrentTCBConst>:
 80057e0:	200002d4 	.word	0x200002d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop

080057e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	607b      	str	r3, [r7, #4]
}
 8005800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005802:	f7ff fe4b 	bl	800549c <xTaskIncrementTick>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <xPortSysTickHandler+0x40>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	2300      	movs	r3, #0
 8005816:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800581e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <__cvt>:
 800582c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005830:	ec55 4b10 	vmov	r4, r5, d0
 8005834:	2d00      	cmp	r5, #0
 8005836:	460e      	mov	r6, r1
 8005838:	4619      	mov	r1, r3
 800583a:	462b      	mov	r3, r5
 800583c:	bfbb      	ittet	lt
 800583e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005842:	461d      	movlt	r5, r3
 8005844:	2300      	movge	r3, #0
 8005846:	232d      	movlt	r3, #45	; 0x2d
 8005848:	700b      	strb	r3, [r1, #0]
 800584a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800584c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005850:	4691      	mov	r9, r2
 8005852:	f023 0820 	bic.w	r8, r3, #32
 8005856:	bfbc      	itt	lt
 8005858:	4622      	movlt	r2, r4
 800585a:	4614      	movlt	r4, r2
 800585c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005860:	d005      	beq.n	800586e <__cvt+0x42>
 8005862:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005866:	d100      	bne.n	800586a <__cvt+0x3e>
 8005868:	3601      	adds	r6, #1
 800586a:	2102      	movs	r1, #2
 800586c:	e000      	b.n	8005870 <__cvt+0x44>
 800586e:	2103      	movs	r1, #3
 8005870:	ab03      	add	r3, sp, #12
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	ab02      	add	r3, sp, #8
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	ec45 4b10 	vmov	d0, r4, r5
 800587c:	4653      	mov	r3, sl
 800587e:	4632      	mov	r2, r6
 8005880:	f001 f8c6 	bl	8006a10 <_dtoa_r>
 8005884:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005888:	4607      	mov	r7, r0
 800588a:	d102      	bne.n	8005892 <__cvt+0x66>
 800588c:	f019 0f01 	tst.w	r9, #1
 8005890:	d022      	beq.n	80058d8 <__cvt+0xac>
 8005892:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005896:	eb07 0906 	add.w	r9, r7, r6
 800589a:	d110      	bne.n	80058be <__cvt+0x92>
 800589c:	783b      	ldrb	r3, [r7, #0]
 800589e:	2b30      	cmp	r3, #48	; 0x30
 80058a0:	d10a      	bne.n	80058b8 <__cvt+0x8c>
 80058a2:	2200      	movs	r2, #0
 80058a4:	2300      	movs	r3, #0
 80058a6:	4620      	mov	r0, r4
 80058a8:	4629      	mov	r1, r5
 80058aa:	f7fb f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 80058ae:	b918      	cbnz	r0, 80058b8 <__cvt+0x8c>
 80058b0:	f1c6 0601 	rsb	r6, r6, #1
 80058b4:	f8ca 6000 	str.w	r6, [sl]
 80058b8:	f8da 3000 	ldr.w	r3, [sl]
 80058bc:	4499      	add	r9, r3
 80058be:	2200      	movs	r2, #0
 80058c0:	2300      	movs	r3, #0
 80058c2:	4620      	mov	r0, r4
 80058c4:	4629      	mov	r1, r5
 80058c6:	f7fb f8ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80058ca:	b108      	cbz	r0, 80058d0 <__cvt+0xa4>
 80058cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80058d0:	2230      	movs	r2, #48	; 0x30
 80058d2:	9b03      	ldr	r3, [sp, #12]
 80058d4:	454b      	cmp	r3, r9
 80058d6:	d307      	bcc.n	80058e8 <__cvt+0xbc>
 80058d8:	9b03      	ldr	r3, [sp, #12]
 80058da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058dc:	1bdb      	subs	r3, r3, r7
 80058de:	4638      	mov	r0, r7
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	b004      	add	sp, #16
 80058e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e8:	1c59      	adds	r1, r3, #1
 80058ea:	9103      	str	r1, [sp, #12]
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e7f0      	b.n	80058d2 <__cvt+0xa6>

080058f0 <__exponent>:
 80058f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058f2:	4603      	mov	r3, r0
 80058f4:	2900      	cmp	r1, #0
 80058f6:	bfb8      	it	lt
 80058f8:	4249      	neglt	r1, r1
 80058fa:	f803 2b02 	strb.w	r2, [r3], #2
 80058fe:	bfb4      	ite	lt
 8005900:	222d      	movlt	r2, #45	; 0x2d
 8005902:	222b      	movge	r2, #43	; 0x2b
 8005904:	2909      	cmp	r1, #9
 8005906:	7042      	strb	r2, [r0, #1]
 8005908:	dd2a      	ble.n	8005960 <__exponent+0x70>
 800590a:	f10d 0207 	add.w	r2, sp, #7
 800590e:	4617      	mov	r7, r2
 8005910:	260a      	movs	r6, #10
 8005912:	4694      	mov	ip, r2
 8005914:	fb91 f5f6 	sdiv	r5, r1, r6
 8005918:	fb06 1415 	mls	r4, r6, r5, r1
 800591c:	3430      	adds	r4, #48	; 0x30
 800591e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005922:	460c      	mov	r4, r1
 8005924:	2c63      	cmp	r4, #99	; 0x63
 8005926:	f102 32ff 	add.w	r2, r2, #4294967295
 800592a:	4629      	mov	r1, r5
 800592c:	dcf1      	bgt.n	8005912 <__exponent+0x22>
 800592e:	3130      	adds	r1, #48	; 0x30
 8005930:	f1ac 0402 	sub.w	r4, ip, #2
 8005934:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005938:	1c41      	adds	r1, r0, #1
 800593a:	4622      	mov	r2, r4
 800593c:	42ba      	cmp	r2, r7
 800593e:	d30a      	bcc.n	8005956 <__exponent+0x66>
 8005940:	f10d 0209 	add.w	r2, sp, #9
 8005944:	eba2 020c 	sub.w	r2, r2, ip
 8005948:	42bc      	cmp	r4, r7
 800594a:	bf88      	it	hi
 800594c:	2200      	movhi	r2, #0
 800594e:	4413      	add	r3, r2
 8005950:	1a18      	subs	r0, r3, r0
 8005952:	b003      	add	sp, #12
 8005954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005956:	f812 5b01 	ldrb.w	r5, [r2], #1
 800595a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800595e:	e7ed      	b.n	800593c <__exponent+0x4c>
 8005960:	2330      	movs	r3, #48	; 0x30
 8005962:	3130      	adds	r1, #48	; 0x30
 8005964:	7083      	strb	r3, [r0, #2]
 8005966:	70c1      	strb	r1, [r0, #3]
 8005968:	1d03      	adds	r3, r0, #4
 800596a:	e7f1      	b.n	8005950 <__exponent+0x60>

0800596c <_printf_float>:
 800596c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005970:	ed2d 8b02 	vpush	{d8}
 8005974:	b08d      	sub	sp, #52	; 0x34
 8005976:	460c      	mov	r4, r1
 8005978:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800597c:	4616      	mov	r6, r2
 800597e:	461f      	mov	r7, r3
 8005980:	4605      	mov	r5, r0
 8005982:	f000 ff2f 	bl	80067e4 <_localeconv_r>
 8005986:	f8d0 a000 	ldr.w	sl, [r0]
 800598a:	4650      	mov	r0, sl
 800598c:	f7fa fc70 	bl	8000270 <strlen>
 8005990:	2300      	movs	r3, #0
 8005992:	930a      	str	r3, [sp, #40]	; 0x28
 8005994:	6823      	ldr	r3, [r4, #0]
 8005996:	9305      	str	r3, [sp, #20]
 8005998:	f8d8 3000 	ldr.w	r3, [r8]
 800599c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059a0:	3307      	adds	r3, #7
 80059a2:	f023 0307 	bic.w	r3, r3, #7
 80059a6:	f103 0208 	add.w	r2, r3, #8
 80059aa:	f8c8 2000 	str.w	r2, [r8]
 80059ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059b6:	9307      	str	r3, [sp, #28]
 80059b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80059bc:	ee08 0a10 	vmov	s16, r0
 80059c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80059c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059c8:	4b9e      	ldr	r3, [pc, #632]	; (8005c44 <_printf_float+0x2d8>)
 80059ca:	f04f 32ff 	mov.w	r2, #4294967295
 80059ce:	f7fb f8ad 	bl	8000b2c <__aeabi_dcmpun>
 80059d2:	bb88      	cbnz	r0, 8005a38 <_printf_float+0xcc>
 80059d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059d8:	4b9a      	ldr	r3, [pc, #616]	; (8005c44 <_printf_float+0x2d8>)
 80059da:	f04f 32ff 	mov.w	r2, #4294967295
 80059de:	f7fb f887 	bl	8000af0 <__aeabi_dcmple>
 80059e2:	bb48      	cbnz	r0, 8005a38 <_printf_float+0xcc>
 80059e4:	2200      	movs	r2, #0
 80059e6:	2300      	movs	r3, #0
 80059e8:	4640      	mov	r0, r8
 80059ea:	4649      	mov	r1, r9
 80059ec:	f7fb f876 	bl	8000adc <__aeabi_dcmplt>
 80059f0:	b110      	cbz	r0, 80059f8 <_printf_float+0x8c>
 80059f2:	232d      	movs	r3, #45	; 0x2d
 80059f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f8:	4a93      	ldr	r2, [pc, #588]	; (8005c48 <_printf_float+0x2dc>)
 80059fa:	4b94      	ldr	r3, [pc, #592]	; (8005c4c <_printf_float+0x2e0>)
 80059fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a00:	bf94      	ite	ls
 8005a02:	4690      	movls	r8, r2
 8005a04:	4698      	movhi	r8, r3
 8005a06:	2303      	movs	r3, #3
 8005a08:	6123      	str	r3, [r4, #16]
 8005a0a:	9b05      	ldr	r3, [sp, #20]
 8005a0c:	f023 0304 	bic.w	r3, r3, #4
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	f04f 0900 	mov.w	r9, #0
 8005a16:	9700      	str	r7, [sp, #0]
 8005a18:	4633      	mov	r3, r6
 8005a1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 f9da 	bl	8005dd8 <_printf_common>
 8005a24:	3001      	adds	r0, #1
 8005a26:	f040 8090 	bne.w	8005b4a <_printf_float+0x1de>
 8005a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2e:	b00d      	add	sp, #52	; 0x34
 8005a30:	ecbd 8b02 	vpop	{d8}
 8005a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a38:	4642      	mov	r2, r8
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	4649      	mov	r1, r9
 8005a40:	f7fb f874 	bl	8000b2c <__aeabi_dcmpun>
 8005a44:	b140      	cbz	r0, 8005a58 <_printf_float+0xec>
 8005a46:	464b      	mov	r3, r9
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	bfbc      	itt	lt
 8005a4c:	232d      	movlt	r3, #45	; 0x2d
 8005a4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a52:	4a7f      	ldr	r2, [pc, #508]	; (8005c50 <_printf_float+0x2e4>)
 8005a54:	4b7f      	ldr	r3, [pc, #508]	; (8005c54 <_printf_float+0x2e8>)
 8005a56:	e7d1      	b.n	80059fc <_printf_float+0x90>
 8005a58:	6863      	ldr	r3, [r4, #4]
 8005a5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a5e:	9206      	str	r2, [sp, #24]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	d13f      	bne.n	8005ae4 <_printf_float+0x178>
 8005a64:	2306      	movs	r3, #6
 8005a66:	6063      	str	r3, [r4, #4]
 8005a68:	9b05      	ldr	r3, [sp, #20]
 8005a6a:	6861      	ldr	r1, [r4, #4]
 8005a6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a70:	2300      	movs	r3, #0
 8005a72:	9303      	str	r3, [sp, #12]
 8005a74:	ab0a      	add	r3, sp, #40	; 0x28
 8005a76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a7a:	ab09      	add	r3, sp, #36	; 0x24
 8005a7c:	ec49 8b10 	vmov	d0, r8, r9
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	6022      	str	r2, [r4, #0]
 8005a84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a88:	4628      	mov	r0, r5
 8005a8a:	f7ff fecf 	bl	800582c <__cvt>
 8005a8e:	9b06      	ldr	r3, [sp, #24]
 8005a90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a92:	2b47      	cmp	r3, #71	; 0x47
 8005a94:	4680      	mov	r8, r0
 8005a96:	d108      	bne.n	8005aaa <_printf_float+0x13e>
 8005a98:	1cc8      	adds	r0, r1, #3
 8005a9a:	db02      	blt.n	8005aa2 <_printf_float+0x136>
 8005a9c:	6863      	ldr	r3, [r4, #4]
 8005a9e:	4299      	cmp	r1, r3
 8005aa0:	dd41      	ble.n	8005b26 <_printf_float+0x1ba>
 8005aa2:	f1ab 0302 	sub.w	r3, fp, #2
 8005aa6:	fa5f fb83 	uxtb.w	fp, r3
 8005aaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aae:	d820      	bhi.n	8005af2 <_printf_float+0x186>
 8005ab0:	3901      	subs	r1, #1
 8005ab2:	465a      	mov	r2, fp
 8005ab4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ab8:	9109      	str	r1, [sp, #36]	; 0x24
 8005aba:	f7ff ff19 	bl	80058f0 <__exponent>
 8005abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ac0:	1813      	adds	r3, r2, r0
 8005ac2:	2a01      	cmp	r2, #1
 8005ac4:	4681      	mov	r9, r0
 8005ac6:	6123      	str	r3, [r4, #16]
 8005ac8:	dc02      	bgt.n	8005ad0 <_printf_float+0x164>
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	07d2      	lsls	r2, r2, #31
 8005ace:	d501      	bpl.n	8005ad4 <_printf_float+0x168>
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d09c      	beq.n	8005a16 <_printf_float+0xaa>
 8005adc:	232d      	movs	r3, #45	; 0x2d
 8005ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae2:	e798      	b.n	8005a16 <_printf_float+0xaa>
 8005ae4:	9a06      	ldr	r2, [sp, #24]
 8005ae6:	2a47      	cmp	r2, #71	; 0x47
 8005ae8:	d1be      	bne.n	8005a68 <_printf_float+0xfc>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1bc      	bne.n	8005a68 <_printf_float+0xfc>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e7b9      	b.n	8005a66 <_printf_float+0xfa>
 8005af2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005af6:	d118      	bne.n	8005b2a <_printf_float+0x1be>
 8005af8:	2900      	cmp	r1, #0
 8005afa:	6863      	ldr	r3, [r4, #4]
 8005afc:	dd0b      	ble.n	8005b16 <_printf_float+0x1aa>
 8005afe:	6121      	str	r1, [r4, #16]
 8005b00:	b913      	cbnz	r3, 8005b08 <_printf_float+0x19c>
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	07d0      	lsls	r0, r2, #31
 8005b06:	d502      	bpl.n	8005b0e <_printf_float+0x1a2>
 8005b08:	3301      	adds	r3, #1
 8005b0a:	440b      	add	r3, r1
 8005b0c:	6123      	str	r3, [r4, #16]
 8005b0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b10:	f04f 0900 	mov.w	r9, #0
 8005b14:	e7de      	b.n	8005ad4 <_printf_float+0x168>
 8005b16:	b913      	cbnz	r3, 8005b1e <_printf_float+0x1b2>
 8005b18:	6822      	ldr	r2, [r4, #0]
 8005b1a:	07d2      	lsls	r2, r2, #31
 8005b1c:	d501      	bpl.n	8005b22 <_printf_float+0x1b6>
 8005b1e:	3302      	adds	r3, #2
 8005b20:	e7f4      	b.n	8005b0c <_printf_float+0x1a0>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e7f2      	b.n	8005b0c <_printf_float+0x1a0>
 8005b26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b2c:	4299      	cmp	r1, r3
 8005b2e:	db05      	blt.n	8005b3c <_printf_float+0x1d0>
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	6121      	str	r1, [r4, #16]
 8005b34:	07d8      	lsls	r0, r3, #31
 8005b36:	d5ea      	bpl.n	8005b0e <_printf_float+0x1a2>
 8005b38:	1c4b      	adds	r3, r1, #1
 8005b3a:	e7e7      	b.n	8005b0c <_printf_float+0x1a0>
 8005b3c:	2900      	cmp	r1, #0
 8005b3e:	bfd4      	ite	le
 8005b40:	f1c1 0202 	rsble	r2, r1, #2
 8005b44:	2201      	movgt	r2, #1
 8005b46:	4413      	add	r3, r2
 8005b48:	e7e0      	b.n	8005b0c <_printf_float+0x1a0>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	055a      	lsls	r2, r3, #21
 8005b4e:	d407      	bmi.n	8005b60 <_printf_float+0x1f4>
 8005b50:	6923      	ldr	r3, [r4, #16]
 8005b52:	4642      	mov	r2, r8
 8005b54:	4631      	mov	r1, r6
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b8      	blx	r7
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d12c      	bne.n	8005bb8 <_printf_float+0x24c>
 8005b5e:	e764      	b.n	8005a2a <_printf_float+0xbe>
 8005b60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b64:	f240 80e0 	bls.w	8005d28 <_printf_float+0x3bc>
 8005b68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f7fa ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d034      	beq.n	8005be2 <_printf_float+0x276>
 8005b78:	4a37      	ldr	r2, [pc, #220]	; (8005c58 <_printf_float+0x2ec>)
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4628      	mov	r0, r5
 8005b80:	47b8      	blx	r7
 8005b82:	3001      	adds	r0, #1
 8005b84:	f43f af51 	beq.w	8005a2a <_printf_float+0xbe>
 8005b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	db02      	blt.n	8005b96 <_printf_float+0x22a>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	07d8      	lsls	r0, r3, #31
 8005b94:	d510      	bpl.n	8005bb8 <_printf_float+0x24c>
 8005b96:	ee18 3a10 	vmov	r3, s16
 8005b9a:	4652      	mov	r2, sl
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	47b8      	blx	r7
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	f43f af41 	beq.w	8005a2a <_printf_float+0xbe>
 8005ba8:	f04f 0800 	mov.w	r8, #0
 8005bac:	f104 091a 	add.w	r9, r4, #26
 8005bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	4543      	cmp	r3, r8
 8005bb6:	dc09      	bgt.n	8005bcc <_printf_float+0x260>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	079b      	lsls	r3, r3, #30
 8005bbc:	f100 8107 	bmi.w	8005dce <_printf_float+0x462>
 8005bc0:	68e0      	ldr	r0, [r4, #12]
 8005bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc4:	4298      	cmp	r0, r3
 8005bc6:	bfb8      	it	lt
 8005bc8:	4618      	movlt	r0, r3
 8005bca:	e730      	b.n	8005a2e <_printf_float+0xc2>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	464a      	mov	r2, r9
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	47b8      	blx	r7
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f43f af27 	beq.w	8005a2a <_printf_float+0xbe>
 8005bdc:	f108 0801 	add.w	r8, r8, #1
 8005be0:	e7e6      	b.n	8005bb0 <_printf_float+0x244>
 8005be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	dc39      	bgt.n	8005c5c <_printf_float+0x2f0>
 8005be8:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <_printf_float+0x2ec>)
 8005bea:	2301      	movs	r3, #1
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f43f af19 	beq.w	8005a2a <_printf_float+0xbe>
 8005bf8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	d102      	bne.n	8005c06 <_printf_float+0x29a>
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	07d9      	lsls	r1, r3, #31
 8005c04:	d5d8      	bpl.n	8005bb8 <_printf_float+0x24c>
 8005c06:	ee18 3a10 	vmov	r3, s16
 8005c0a:	4652      	mov	r2, sl
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b8      	blx	r7
 8005c12:	3001      	adds	r0, #1
 8005c14:	f43f af09 	beq.w	8005a2a <_printf_float+0xbe>
 8005c18:	f04f 0900 	mov.w	r9, #0
 8005c1c:	f104 0a1a 	add.w	sl, r4, #26
 8005c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c22:	425b      	negs	r3, r3
 8005c24:	454b      	cmp	r3, r9
 8005c26:	dc01      	bgt.n	8005c2c <_printf_float+0x2c0>
 8005c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c2a:	e792      	b.n	8005b52 <_printf_float+0x1e6>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	4652      	mov	r2, sl
 8005c30:	4631      	mov	r1, r6
 8005c32:	4628      	mov	r0, r5
 8005c34:	47b8      	blx	r7
 8005c36:	3001      	adds	r0, #1
 8005c38:	f43f aef7 	beq.w	8005a2a <_printf_float+0xbe>
 8005c3c:	f109 0901 	add.w	r9, r9, #1
 8005c40:	e7ee      	b.n	8005c20 <_printf_float+0x2b4>
 8005c42:	bf00      	nop
 8005c44:	7fefffff 	.word	0x7fefffff
 8005c48:	0800a284 	.word	0x0800a284
 8005c4c:	0800a288 	.word	0x0800a288
 8005c50:	0800a28c 	.word	0x0800a28c
 8005c54:	0800a290 	.word	0x0800a290
 8005c58:	0800a294 	.word	0x0800a294
 8005c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c60:	429a      	cmp	r2, r3
 8005c62:	bfa8      	it	ge
 8005c64:	461a      	movge	r2, r3
 8005c66:	2a00      	cmp	r2, #0
 8005c68:	4691      	mov	r9, r2
 8005c6a:	dc37      	bgt.n	8005cdc <_printf_float+0x370>
 8005c6c:	f04f 0b00 	mov.w	fp, #0
 8005c70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c74:	f104 021a 	add.w	r2, r4, #26
 8005c78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c7a:	9305      	str	r3, [sp, #20]
 8005c7c:	eba3 0309 	sub.w	r3, r3, r9
 8005c80:	455b      	cmp	r3, fp
 8005c82:	dc33      	bgt.n	8005cec <_printf_float+0x380>
 8005c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	db3b      	blt.n	8005d04 <_printf_float+0x398>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	07da      	lsls	r2, r3, #31
 8005c90:	d438      	bmi.n	8005d04 <_printf_float+0x398>
 8005c92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005c96:	eba2 0903 	sub.w	r9, r2, r3
 8005c9a:	9b05      	ldr	r3, [sp, #20]
 8005c9c:	1ad2      	subs	r2, r2, r3
 8005c9e:	4591      	cmp	r9, r2
 8005ca0:	bfa8      	it	ge
 8005ca2:	4691      	movge	r9, r2
 8005ca4:	f1b9 0f00 	cmp.w	r9, #0
 8005ca8:	dc35      	bgt.n	8005d16 <_printf_float+0x3aa>
 8005caa:	f04f 0800 	mov.w	r8, #0
 8005cae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cb2:	f104 0a1a 	add.w	sl, r4, #26
 8005cb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	eba3 0309 	sub.w	r3, r3, r9
 8005cc0:	4543      	cmp	r3, r8
 8005cc2:	f77f af79 	ble.w	8005bb8 <_printf_float+0x24c>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4652      	mov	r2, sl
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4628      	mov	r0, r5
 8005cce:	47b8      	blx	r7
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	f43f aeaa 	beq.w	8005a2a <_printf_float+0xbe>
 8005cd6:	f108 0801 	add.w	r8, r8, #1
 8005cda:	e7ec      	b.n	8005cb6 <_printf_float+0x34a>
 8005cdc:	4613      	mov	r3, r2
 8005cde:	4631      	mov	r1, r6
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d1c0      	bne.n	8005c6c <_printf_float+0x300>
 8005cea:	e69e      	b.n	8005a2a <_printf_float+0xbe>
 8005cec:	2301      	movs	r3, #1
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	9205      	str	r2, [sp, #20]
 8005cf4:	47b8      	blx	r7
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f43f ae97 	beq.w	8005a2a <_printf_float+0xbe>
 8005cfc:	9a05      	ldr	r2, [sp, #20]
 8005cfe:	f10b 0b01 	add.w	fp, fp, #1
 8005d02:	e7b9      	b.n	8005c78 <_printf_float+0x30c>
 8005d04:	ee18 3a10 	vmov	r3, s16
 8005d08:	4652      	mov	r2, sl
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b8      	blx	r7
 8005d10:	3001      	adds	r0, #1
 8005d12:	d1be      	bne.n	8005c92 <_printf_float+0x326>
 8005d14:	e689      	b.n	8005a2a <_printf_float+0xbe>
 8005d16:	9a05      	ldr	r2, [sp, #20]
 8005d18:	464b      	mov	r3, r9
 8005d1a:	4442      	add	r2, r8
 8005d1c:	4631      	mov	r1, r6
 8005d1e:	4628      	mov	r0, r5
 8005d20:	47b8      	blx	r7
 8005d22:	3001      	adds	r0, #1
 8005d24:	d1c1      	bne.n	8005caa <_printf_float+0x33e>
 8005d26:	e680      	b.n	8005a2a <_printf_float+0xbe>
 8005d28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d2a:	2a01      	cmp	r2, #1
 8005d2c:	dc01      	bgt.n	8005d32 <_printf_float+0x3c6>
 8005d2e:	07db      	lsls	r3, r3, #31
 8005d30:	d53a      	bpl.n	8005da8 <_printf_float+0x43c>
 8005d32:	2301      	movs	r3, #1
 8005d34:	4642      	mov	r2, r8
 8005d36:	4631      	mov	r1, r6
 8005d38:	4628      	mov	r0, r5
 8005d3a:	47b8      	blx	r7
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	f43f ae74 	beq.w	8005a2a <_printf_float+0xbe>
 8005d42:	ee18 3a10 	vmov	r3, s16
 8005d46:	4652      	mov	r2, sl
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	47b8      	blx	r7
 8005d4e:	3001      	adds	r0, #1
 8005d50:	f43f ae6b 	beq.w	8005a2a <_printf_float+0xbe>
 8005d54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005d60:	f7fa feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d64:	b9d8      	cbnz	r0, 8005d9e <_printf_float+0x432>
 8005d66:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005d6a:	f108 0201 	add.w	r2, r8, #1
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b8      	blx	r7
 8005d74:	3001      	adds	r0, #1
 8005d76:	d10e      	bne.n	8005d96 <_printf_float+0x42a>
 8005d78:	e657      	b.n	8005a2a <_printf_float+0xbe>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4652      	mov	r2, sl
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f ae50 	beq.w	8005a2a <_printf_float+0xbe>
 8005d8a:	f108 0801 	add.w	r8, r8, #1
 8005d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d90:	3b01      	subs	r3, #1
 8005d92:	4543      	cmp	r3, r8
 8005d94:	dcf1      	bgt.n	8005d7a <_printf_float+0x40e>
 8005d96:	464b      	mov	r3, r9
 8005d98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d9c:	e6da      	b.n	8005b54 <_printf_float+0x1e8>
 8005d9e:	f04f 0800 	mov.w	r8, #0
 8005da2:	f104 0a1a 	add.w	sl, r4, #26
 8005da6:	e7f2      	b.n	8005d8e <_printf_float+0x422>
 8005da8:	2301      	movs	r3, #1
 8005daa:	4642      	mov	r2, r8
 8005dac:	e7df      	b.n	8005d6e <_printf_float+0x402>
 8005dae:	2301      	movs	r3, #1
 8005db0:	464a      	mov	r2, r9
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	f43f ae36 	beq.w	8005a2a <_printf_float+0xbe>
 8005dbe:	f108 0801 	add.w	r8, r8, #1
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dc6:	1a5b      	subs	r3, r3, r1
 8005dc8:	4543      	cmp	r3, r8
 8005dca:	dcf0      	bgt.n	8005dae <_printf_float+0x442>
 8005dcc:	e6f8      	b.n	8005bc0 <_printf_float+0x254>
 8005dce:	f04f 0800 	mov.w	r8, #0
 8005dd2:	f104 0919 	add.w	r9, r4, #25
 8005dd6:	e7f4      	b.n	8005dc2 <_printf_float+0x456>

08005dd8 <_printf_common>:
 8005dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ddc:	4616      	mov	r6, r2
 8005dde:	4699      	mov	r9, r3
 8005de0:	688a      	ldr	r2, [r1, #8]
 8005de2:	690b      	ldr	r3, [r1, #16]
 8005de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005de8:	4293      	cmp	r3, r2
 8005dea:	bfb8      	it	lt
 8005dec:	4613      	movlt	r3, r2
 8005dee:	6033      	str	r3, [r6, #0]
 8005df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005df4:	4607      	mov	r7, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	b10a      	cbz	r2, 8005dfe <_printf_common+0x26>
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	6033      	str	r3, [r6, #0]
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	0699      	lsls	r1, r3, #26
 8005e02:	bf42      	ittt	mi
 8005e04:	6833      	ldrmi	r3, [r6, #0]
 8005e06:	3302      	addmi	r3, #2
 8005e08:	6033      	strmi	r3, [r6, #0]
 8005e0a:	6825      	ldr	r5, [r4, #0]
 8005e0c:	f015 0506 	ands.w	r5, r5, #6
 8005e10:	d106      	bne.n	8005e20 <_printf_common+0x48>
 8005e12:	f104 0a19 	add.w	sl, r4, #25
 8005e16:	68e3      	ldr	r3, [r4, #12]
 8005e18:	6832      	ldr	r2, [r6, #0]
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	42ab      	cmp	r3, r5
 8005e1e:	dc26      	bgt.n	8005e6e <_printf_common+0x96>
 8005e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e24:	1e13      	subs	r3, r2, #0
 8005e26:	6822      	ldr	r2, [r4, #0]
 8005e28:	bf18      	it	ne
 8005e2a:	2301      	movne	r3, #1
 8005e2c:	0692      	lsls	r2, r2, #26
 8005e2e:	d42b      	bmi.n	8005e88 <_printf_common+0xb0>
 8005e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e34:	4649      	mov	r1, r9
 8005e36:	4638      	mov	r0, r7
 8005e38:	47c0      	blx	r8
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d01e      	beq.n	8005e7c <_printf_common+0xa4>
 8005e3e:	6823      	ldr	r3, [r4, #0]
 8005e40:	6922      	ldr	r2, [r4, #16]
 8005e42:	f003 0306 	and.w	r3, r3, #6
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	bf02      	ittt	eq
 8005e4a:	68e5      	ldreq	r5, [r4, #12]
 8005e4c:	6833      	ldreq	r3, [r6, #0]
 8005e4e:	1aed      	subeq	r5, r5, r3
 8005e50:	68a3      	ldr	r3, [r4, #8]
 8005e52:	bf0c      	ite	eq
 8005e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e58:	2500      	movne	r5, #0
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	bfc4      	itt	gt
 8005e5e:	1a9b      	subgt	r3, r3, r2
 8005e60:	18ed      	addgt	r5, r5, r3
 8005e62:	2600      	movs	r6, #0
 8005e64:	341a      	adds	r4, #26
 8005e66:	42b5      	cmp	r5, r6
 8005e68:	d11a      	bne.n	8005ea0 <_printf_common+0xc8>
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	e008      	b.n	8005e80 <_printf_common+0xa8>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	4652      	mov	r2, sl
 8005e72:	4649      	mov	r1, r9
 8005e74:	4638      	mov	r0, r7
 8005e76:	47c0      	blx	r8
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d103      	bne.n	8005e84 <_printf_common+0xac>
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e84:	3501      	adds	r5, #1
 8005e86:	e7c6      	b.n	8005e16 <_printf_common+0x3e>
 8005e88:	18e1      	adds	r1, r4, r3
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	2030      	movs	r0, #48	; 0x30
 8005e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e92:	4422      	add	r2, r4
 8005e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	e7c7      	b.n	8005e30 <_printf_common+0x58>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	47c0      	blx	r8
 8005eaa:	3001      	adds	r0, #1
 8005eac:	d0e6      	beq.n	8005e7c <_printf_common+0xa4>
 8005eae:	3601      	adds	r6, #1
 8005eb0:	e7d9      	b.n	8005e66 <_printf_common+0x8e>
	...

08005eb4 <_printf_i>:
 8005eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb8:	7e0f      	ldrb	r7, [r1, #24]
 8005eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ebc:	2f78      	cmp	r7, #120	; 0x78
 8005ebe:	4691      	mov	r9, r2
 8005ec0:	4680      	mov	r8, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	469a      	mov	sl, r3
 8005ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eca:	d807      	bhi.n	8005edc <_printf_i+0x28>
 8005ecc:	2f62      	cmp	r7, #98	; 0x62
 8005ece:	d80a      	bhi.n	8005ee6 <_printf_i+0x32>
 8005ed0:	2f00      	cmp	r7, #0
 8005ed2:	f000 80d4 	beq.w	800607e <_printf_i+0x1ca>
 8005ed6:	2f58      	cmp	r7, #88	; 0x58
 8005ed8:	f000 80c0 	beq.w	800605c <_printf_i+0x1a8>
 8005edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ee4:	e03a      	b.n	8005f5c <_printf_i+0xa8>
 8005ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005eea:	2b15      	cmp	r3, #21
 8005eec:	d8f6      	bhi.n	8005edc <_printf_i+0x28>
 8005eee:	a101      	add	r1, pc, #4	; (adr r1, 8005ef4 <_printf_i+0x40>)
 8005ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ef4:	08005f4d 	.word	0x08005f4d
 8005ef8:	08005f61 	.word	0x08005f61
 8005efc:	08005edd 	.word	0x08005edd
 8005f00:	08005edd 	.word	0x08005edd
 8005f04:	08005edd 	.word	0x08005edd
 8005f08:	08005edd 	.word	0x08005edd
 8005f0c:	08005f61 	.word	0x08005f61
 8005f10:	08005edd 	.word	0x08005edd
 8005f14:	08005edd 	.word	0x08005edd
 8005f18:	08005edd 	.word	0x08005edd
 8005f1c:	08005edd 	.word	0x08005edd
 8005f20:	08006065 	.word	0x08006065
 8005f24:	08005f8d 	.word	0x08005f8d
 8005f28:	0800601f 	.word	0x0800601f
 8005f2c:	08005edd 	.word	0x08005edd
 8005f30:	08005edd 	.word	0x08005edd
 8005f34:	08006087 	.word	0x08006087
 8005f38:	08005edd 	.word	0x08005edd
 8005f3c:	08005f8d 	.word	0x08005f8d
 8005f40:	08005edd 	.word	0x08005edd
 8005f44:	08005edd 	.word	0x08005edd
 8005f48:	08006027 	.word	0x08006027
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	1d1a      	adds	r2, r3, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	602a      	str	r2, [r5, #0]
 8005f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e09f      	b.n	80060a0 <_printf_i+0x1ec>
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	682b      	ldr	r3, [r5, #0]
 8005f64:	0607      	lsls	r7, r0, #24
 8005f66:	f103 0104 	add.w	r1, r3, #4
 8005f6a:	6029      	str	r1, [r5, #0]
 8005f6c:	d501      	bpl.n	8005f72 <_printf_i+0xbe>
 8005f6e:	681e      	ldr	r6, [r3, #0]
 8005f70:	e003      	b.n	8005f7a <_printf_i+0xc6>
 8005f72:	0646      	lsls	r6, r0, #25
 8005f74:	d5fb      	bpl.n	8005f6e <_printf_i+0xba>
 8005f76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f7a:	2e00      	cmp	r6, #0
 8005f7c:	da03      	bge.n	8005f86 <_printf_i+0xd2>
 8005f7e:	232d      	movs	r3, #45	; 0x2d
 8005f80:	4276      	negs	r6, r6
 8005f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f86:	485a      	ldr	r0, [pc, #360]	; (80060f0 <_printf_i+0x23c>)
 8005f88:	230a      	movs	r3, #10
 8005f8a:	e012      	b.n	8005fb2 <_printf_i+0xfe>
 8005f8c:	682b      	ldr	r3, [r5, #0]
 8005f8e:	6820      	ldr	r0, [r4, #0]
 8005f90:	1d19      	adds	r1, r3, #4
 8005f92:	6029      	str	r1, [r5, #0]
 8005f94:	0605      	lsls	r5, r0, #24
 8005f96:	d501      	bpl.n	8005f9c <_printf_i+0xe8>
 8005f98:	681e      	ldr	r6, [r3, #0]
 8005f9a:	e002      	b.n	8005fa2 <_printf_i+0xee>
 8005f9c:	0641      	lsls	r1, r0, #25
 8005f9e:	d5fb      	bpl.n	8005f98 <_printf_i+0xe4>
 8005fa0:	881e      	ldrh	r6, [r3, #0]
 8005fa2:	4853      	ldr	r0, [pc, #332]	; (80060f0 <_printf_i+0x23c>)
 8005fa4:	2f6f      	cmp	r7, #111	; 0x6f
 8005fa6:	bf0c      	ite	eq
 8005fa8:	2308      	moveq	r3, #8
 8005faa:	230a      	movne	r3, #10
 8005fac:	2100      	movs	r1, #0
 8005fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fb2:	6865      	ldr	r5, [r4, #4]
 8005fb4:	60a5      	str	r5, [r4, #8]
 8005fb6:	2d00      	cmp	r5, #0
 8005fb8:	bfa2      	ittt	ge
 8005fba:	6821      	ldrge	r1, [r4, #0]
 8005fbc:	f021 0104 	bicge.w	r1, r1, #4
 8005fc0:	6021      	strge	r1, [r4, #0]
 8005fc2:	b90e      	cbnz	r6, 8005fc8 <_printf_i+0x114>
 8005fc4:	2d00      	cmp	r5, #0
 8005fc6:	d04b      	beq.n	8006060 <_printf_i+0x1ac>
 8005fc8:	4615      	mov	r5, r2
 8005fca:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fce:	fb03 6711 	mls	r7, r3, r1, r6
 8005fd2:	5dc7      	ldrb	r7, [r0, r7]
 8005fd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fd8:	4637      	mov	r7, r6
 8005fda:	42bb      	cmp	r3, r7
 8005fdc:	460e      	mov	r6, r1
 8005fde:	d9f4      	bls.n	8005fca <_printf_i+0x116>
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d10b      	bne.n	8005ffc <_printf_i+0x148>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	07de      	lsls	r6, r3, #31
 8005fe8:	d508      	bpl.n	8005ffc <_printf_i+0x148>
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	6861      	ldr	r1, [r4, #4]
 8005fee:	4299      	cmp	r1, r3
 8005ff0:	bfde      	ittt	le
 8005ff2:	2330      	movle	r3, #48	; 0x30
 8005ff4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ff8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ffc:	1b52      	subs	r2, r2, r5
 8005ffe:	6122      	str	r2, [r4, #16]
 8006000:	f8cd a000 	str.w	sl, [sp]
 8006004:	464b      	mov	r3, r9
 8006006:	aa03      	add	r2, sp, #12
 8006008:	4621      	mov	r1, r4
 800600a:	4640      	mov	r0, r8
 800600c:	f7ff fee4 	bl	8005dd8 <_printf_common>
 8006010:	3001      	adds	r0, #1
 8006012:	d14a      	bne.n	80060aa <_printf_i+0x1f6>
 8006014:	f04f 30ff 	mov.w	r0, #4294967295
 8006018:	b004      	add	sp, #16
 800601a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	f043 0320 	orr.w	r3, r3, #32
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	4833      	ldr	r0, [pc, #204]	; (80060f4 <_printf_i+0x240>)
 8006028:	2778      	movs	r7, #120	; 0x78
 800602a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	6829      	ldr	r1, [r5, #0]
 8006032:	061f      	lsls	r7, r3, #24
 8006034:	f851 6b04 	ldr.w	r6, [r1], #4
 8006038:	d402      	bmi.n	8006040 <_printf_i+0x18c>
 800603a:	065f      	lsls	r7, r3, #25
 800603c:	bf48      	it	mi
 800603e:	b2b6      	uxthmi	r6, r6
 8006040:	07df      	lsls	r7, r3, #31
 8006042:	bf48      	it	mi
 8006044:	f043 0320 	orrmi.w	r3, r3, #32
 8006048:	6029      	str	r1, [r5, #0]
 800604a:	bf48      	it	mi
 800604c:	6023      	strmi	r3, [r4, #0]
 800604e:	b91e      	cbnz	r6, 8006058 <_printf_i+0x1a4>
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	f023 0320 	bic.w	r3, r3, #32
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	2310      	movs	r3, #16
 800605a:	e7a7      	b.n	8005fac <_printf_i+0xf8>
 800605c:	4824      	ldr	r0, [pc, #144]	; (80060f0 <_printf_i+0x23c>)
 800605e:	e7e4      	b.n	800602a <_printf_i+0x176>
 8006060:	4615      	mov	r5, r2
 8006062:	e7bd      	b.n	8005fe0 <_printf_i+0x12c>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	6826      	ldr	r6, [r4, #0]
 8006068:	6961      	ldr	r1, [r4, #20]
 800606a:	1d18      	adds	r0, r3, #4
 800606c:	6028      	str	r0, [r5, #0]
 800606e:	0635      	lsls	r5, r6, #24
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	d501      	bpl.n	8006078 <_printf_i+0x1c4>
 8006074:	6019      	str	r1, [r3, #0]
 8006076:	e002      	b.n	800607e <_printf_i+0x1ca>
 8006078:	0670      	lsls	r0, r6, #25
 800607a:	d5fb      	bpl.n	8006074 <_printf_i+0x1c0>
 800607c:	8019      	strh	r1, [r3, #0]
 800607e:	2300      	movs	r3, #0
 8006080:	6123      	str	r3, [r4, #16]
 8006082:	4615      	mov	r5, r2
 8006084:	e7bc      	b.n	8006000 <_printf_i+0x14c>
 8006086:	682b      	ldr	r3, [r5, #0]
 8006088:	1d1a      	adds	r2, r3, #4
 800608a:	602a      	str	r2, [r5, #0]
 800608c:	681d      	ldr	r5, [r3, #0]
 800608e:	6862      	ldr	r2, [r4, #4]
 8006090:	2100      	movs	r1, #0
 8006092:	4628      	mov	r0, r5
 8006094:	f7fa f89c 	bl	80001d0 <memchr>
 8006098:	b108      	cbz	r0, 800609e <_printf_i+0x1ea>
 800609a:	1b40      	subs	r0, r0, r5
 800609c:	6060      	str	r0, [r4, #4]
 800609e:	6863      	ldr	r3, [r4, #4]
 80060a0:	6123      	str	r3, [r4, #16]
 80060a2:	2300      	movs	r3, #0
 80060a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a8:	e7aa      	b.n	8006000 <_printf_i+0x14c>
 80060aa:	6923      	ldr	r3, [r4, #16]
 80060ac:	462a      	mov	r2, r5
 80060ae:	4649      	mov	r1, r9
 80060b0:	4640      	mov	r0, r8
 80060b2:	47d0      	blx	sl
 80060b4:	3001      	adds	r0, #1
 80060b6:	d0ad      	beq.n	8006014 <_printf_i+0x160>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	079b      	lsls	r3, r3, #30
 80060bc:	d413      	bmi.n	80060e6 <_printf_i+0x232>
 80060be:	68e0      	ldr	r0, [r4, #12]
 80060c0:	9b03      	ldr	r3, [sp, #12]
 80060c2:	4298      	cmp	r0, r3
 80060c4:	bfb8      	it	lt
 80060c6:	4618      	movlt	r0, r3
 80060c8:	e7a6      	b.n	8006018 <_printf_i+0x164>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4632      	mov	r2, r6
 80060ce:	4649      	mov	r1, r9
 80060d0:	4640      	mov	r0, r8
 80060d2:	47d0      	blx	sl
 80060d4:	3001      	adds	r0, #1
 80060d6:	d09d      	beq.n	8006014 <_printf_i+0x160>
 80060d8:	3501      	adds	r5, #1
 80060da:	68e3      	ldr	r3, [r4, #12]
 80060dc:	9903      	ldr	r1, [sp, #12]
 80060de:	1a5b      	subs	r3, r3, r1
 80060e0:	42ab      	cmp	r3, r5
 80060e2:	dcf2      	bgt.n	80060ca <_printf_i+0x216>
 80060e4:	e7eb      	b.n	80060be <_printf_i+0x20a>
 80060e6:	2500      	movs	r5, #0
 80060e8:	f104 0619 	add.w	r6, r4, #25
 80060ec:	e7f5      	b.n	80060da <_printf_i+0x226>
 80060ee:	bf00      	nop
 80060f0:	0800a296 	.word	0x0800a296
 80060f4:	0800a2a7 	.word	0x0800a2a7

080060f8 <_scanf_float>:
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	b087      	sub	sp, #28
 80060fe:	4617      	mov	r7, r2
 8006100:	9303      	str	r3, [sp, #12]
 8006102:	688b      	ldr	r3, [r1, #8]
 8006104:	1e5a      	subs	r2, r3, #1
 8006106:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800610a:	bf83      	ittte	hi
 800610c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006110:	195b      	addhi	r3, r3, r5
 8006112:	9302      	strhi	r3, [sp, #8]
 8006114:	2300      	movls	r3, #0
 8006116:	bf86      	itte	hi
 8006118:	f240 135d 	movwhi	r3, #349	; 0x15d
 800611c:	608b      	strhi	r3, [r1, #8]
 800611e:	9302      	strls	r3, [sp, #8]
 8006120:	680b      	ldr	r3, [r1, #0]
 8006122:	468b      	mov	fp, r1
 8006124:	2500      	movs	r5, #0
 8006126:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800612a:	f84b 3b1c 	str.w	r3, [fp], #28
 800612e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006132:	4680      	mov	r8, r0
 8006134:	460c      	mov	r4, r1
 8006136:	465e      	mov	r6, fp
 8006138:	46aa      	mov	sl, r5
 800613a:	46a9      	mov	r9, r5
 800613c:	9501      	str	r5, [sp, #4]
 800613e:	68a2      	ldr	r2, [r4, #8]
 8006140:	b152      	cbz	r2, 8006158 <_scanf_float+0x60>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b4e      	cmp	r3, #78	; 0x4e
 8006148:	d864      	bhi.n	8006214 <_scanf_float+0x11c>
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d83c      	bhi.n	80061c8 <_scanf_float+0xd0>
 800614e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006152:	b2c8      	uxtb	r0, r1
 8006154:	280e      	cmp	r0, #14
 8006156:	d93a      	bls.n	80061ce <_scanf_float+0xd6>
 8006158:	f1b9 0f00 	cmp.w	r9, #0
 800615c:	d003      	beq.n	8006166 <_scanf_float+0x6e>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	f10a 3aff 	add.w	sl, sl, #4294967295
 800616a:	f1ba 0f01 	cmp.w	sl, #1
 800616e:	f200 8113 	bhi.w	8006398 <_scanf_float+0x2a0>
 8006172:	455e      	cmp	r6, fp
 8006174:	f200 8105 	bhi.w	8006382 <_scanf_float+0x28a>
 8006178:	2501      	movs	r5, #1
 800617a:	4628      	mov	r0, r5
 800617c:	b007      	add	sp, #28
 800617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006182:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006186:	2a0d      	cmp	r2, #13
 8006188:	d8e6      	bhi.n	8006158 <_scanf_float+0x60>
 800618a:	a101      	add	r1, pc, #4	; (adr r1, 8006190 <_scanf_float+0x98>)
 800618c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006190:	080062cf 	.word	0x080062cf
 8006194:	08006159 	.word	0x08006159
 8006198:	08006159 	.word	0x08006159
 800619c:	08006159 	.word	0x08006159
 80061a0:	0800632f 	.word	0x0800632f
 80061a4:	08006307 	.word	0x08006307
 80061a8:	08006159 	.word	0x08006159
 80061ac:	08006159 	.word	0x08006159
 80061b0:	080062dd 	.word	0x080062dd
 80061b4:	08006159 	.word	0x08006159
 80061b8:	08006159 	.word	0x08006159
 80061bc:	08006159 	.word	0x08006159
 80061c0:	08006159 	.word	0x08006159
 80061c4:	08006295 	.word	0x08006295
 80061c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80061cc:	e7db      	b.n	8006186 <_scanf_float+0x8e>
 80061ce:	290e      	cmp	r1, #14
 80061d0:	d8c2      	bhi.n	8006158 <_scanf_float+0x60>
 80061d2:	a001      	add	r0, pc, #4	; (adr r0, 80061d8 <_scanf_float+0xe0>)
 80061d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80061d8:	08006287 	.word	0x08006287
 80061dc:	08006159 	.word	0x08006159
 80061e0:	08006287 	.word	0x08006287
 80061e4:	0800631b 	.word	0x0800631b
 80061e8:	08006159 	.word	0x08006159
 80061ec:	08006235 	.word	0x08006235
 80061f0:	08006271 	.word	0x08006271
 80061f4:	08006271 	.word	0x08006271
 80061f8:	08006271 	.word	0x08006271
 80061fc:	08006271 	.word	0x08006271
 8006200:	08006271 	.word	0x08006271
 8006204:	08006271 	.word	0x08006271
 8006208:	08006271 	.word	0x08006271
 800620c:	08006271 	.word	0x08006271
 8006210:	08006271 	.word	0x08006271
 8006214:	2b6e      	cmp	r3, #110	; 0x6e
 8006216:	d809      	bhi.n	800622c <_scanf_float+0x134>
 8006218:	2b60      	cmp	r3, #96	; 0x60
 800621a:	d8b2      	bhi.n	8006182 <_scanf_float+0x8a>
 800621c:	2b54      	cmp	r3, #84	; 0x54
 800621e:	d077      	beq.n	8006310 <_scanf_float+0x218>
 8006220:	2b59      	cmp	r3, #89	; 0x59
 8006222:	d199      	bne.n	8006158 <_scanf_float+0x60>
 8006224:	2d07      	cmp	r5, #7
 8006226:	d197      	bne.n	8006158 <_scanf_float+0x60>
 8006228:	2508      	movs	r5, #8
 800622a:	e029      	b.n	8006280 <_scanf_float+0x188>
 800622c:	2b74      	cmp	r3, #116	; 0x74
 800622e:	d06f      	beq.n	8006310 <_scanf_float+0x218>
 8006230:	2b79      	cmp	r3, #121	; 0x79
 8006232:	e7f6      	b.n	8006222 <_scanf_float+0x12a>
 8006234:	6821      	ldr	r1, [r4, #0]
 8006236:	05c8      	lsls	r0, r1, #23
 8006238:	d51a      	bpl.n	8006270 <_scanf_float+0x178>
 800623a:	9b02      	ldr	r3, [sp, #8]
 800623c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006240:	6021      	str	r1, [r4, #0]
 8006242:	f109 0901 	add.w	r9, r9, #1
 8006246:	b11b      	cbz	r3, 8006250 <_scanf_float+0x158>
 8006248:	3b01      	subs	r3, #1
 800624a:	3201      	adds	r2, #1
 800624c:	9302      	str	r3, [sp, #8]
 800624e:	60a2      	str	r2, [r4, #8]
 8006250:	68a3      	ldr	r3, [r4, #8]
 8006252:	3b01      	subs	r3, #1
 8006254:	60a3      	str	r3, [r4, #8]
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	3301      	adds	r3, #1
 800625a:	6123      	str	r3, [r4, #16]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3b01      	subs	r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	607b      	str	r3, [r7, #4]
 8006264:	f340 8084 	ble.w	8006370 <_scanf_float+0x278>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	3301      	adds	r3, #1
 800626c:	603b      	str	r3, [r7, #0]
 800626e:	e766      	b.n	800613e <_scanf_float+0x46>
 8006270:	eb1a 0f05 	cmn.w	sl, r5
 8006274:	f47f af70 	bne.w	8006158 <_scanf_float+0x60>
 8006278:	6822      	ldr	r2, [r4, #0]
 800627a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800627e:	6022      	str	r2, [r4, #0]
 8006280:	f806 3b01 	strb.w	r3, [r6], #1
 8006284:	e7e4      	b.n	8006250 <_scanf_float+0x158>
 8006286:	6822      	ldr	r2, [r4, #0]
 8006288:	0610      	lsls	r0, r2, #24
 800628a:	f57f af65 	bpl.w	8006158 <_scanf_float+0x60>
 800628e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006292:	e7f4      	b.n	800627e <_scanf_float+0x186>
 8006294:	f1ba 0f00 	cmp.w	sl, #0
 8006298:	d10e      	bne.n	80062b8 <_scanf_float+0x1c0>
 800629a:	f1b9 0f00 	cmp.w	r9, #0
 800629e:	d10e      	bne.n	80062be <_scanf_float+0x1c6>
 80062a0:	6822      	ldr	r2, [r4, #0]
 80062a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062aa:	d108      	bne.n	80062be <_scanf_float+0x1c6>
 80062ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062b0:	6022      	str	r2, [r4, #0]
 80062b2:	f04f 0a01 	mov.w	sl, #1
 80062b6:	e7e3      	b.n	8006280 <_scanf_float+0x188>
 80062b8:	f1ba 0f02 	cmp.w	sl, #2
 80062bc:	d055      	beq.n	800636a <_scanf_float+0x272>
 80062be:	2d01      	cmp	r5, #1
 80062c0:	d002      	beq.n	80062c8 <_scanf_float+0x1d0>
 80062c2:	2d04      	cmp	r5, #4
 80062c4:	f47f af48 	bne.w	8006158 <_scanf_float+0x60>
 80062c8:	3501      	adds	r5, #1
 80062ca:	b2ed      	uxtb	r5, r5
 80062cc:	e7d8      	b.n	8006280 <_scanf_float+0x188>
 80062ce:	f1ba 0f01 	cmp.w	sl, #1
 80062d2:	f47f af41 	bne.w	8006158 <_scanf_float+0x60>
 80062d6:	f04f 0a02 	mov.w	sl, #2
 80062da:	e7d1      	b.n	8006280 <_scanf_float+0x188>
 80062dc:	b97d      	cbnz	r5, 80062fe <_scanf_float+0x206>
 80062de:	f1b9 0f00 	cmp.w	r9, #0
 80062e2:	f47f af3c 	bne.w	800615e <_scanf_float+0x66>
 80062e6:	6822      	ldr	r2, [r4, #0]
 80062e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80062ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80062f0:	f47f af39 	bne.w	8006166 <_scanf_float+0x6e>
 80062f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80062f8:	6022      	str	r2, [r4, #0]
 80062fa:	2501      	movs	r5, #1
 80062fc:	e7c0      	b.n	8006280 <_scanf_float+0x188>
 80062fe:	2d03      	cmp	r5, #3
 8006300:	d0e2      	beq.n	80062c8 <_scanf_float+0x1d0>
 8006302:	2d05      	cmp	r5, #5
 8006304:	e7de      	b.n	80062c4 <_scanf_float+0x1cc>
 8006306:	2d02      	cmp	r5, #2
 8006308:	f47f af26 	bne.w	8006158 <_scanf_float+0x60>
 800630c:	2503      	movs	r5, #3
 800630e:	e7b7      	b.n	8006280 <_scanf_float+0x188>
 8006310:	2d06      	cmp	r5, #6
 8006312:	f47f af21 	bne.w	8006158 <_scanf_float+0x60>
 8006316:	2507      	movs	r5, #7
 8006318:	e7b2      	b.n	8006280 <_scanf_float+0x188>
 800631a:	6822      	ldr	r2, [r4, #0]
 800631c:	0591      	lsls	r1, r2, #22
 800631e:	f57f af1b 	bpl.w	8006158 <_scanf_float+0x60>
 8006322:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006326:	6022      	str	r2, [r4, #0]
 8006328:	f8cd 9004 	str.w	r9, [sp, #4]
 800632c:	e7a8      	b.n	8006280 <_scanf_float+0x188>
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006334:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006338:	d006      	beq.n	8006348 <_scanf_float+0x250>
 800633a:	0550      	lsls	r0, r2, #21
 800633c:	f57f af0c 	bpl.w	8006158 <_scanf_float+0x60>
 8006340:	f1b9 0f00 	cmp.w	r9, #0
 8006344:	f43f af0f 	beq.w	8006166 <_scanf_float+0x6e>
 8006348:	0591      	lsls	r1, r2, #22
 800634a:	bf58      	it	pl
 800634c:	9901      	ldrpl	r1, [sp, #4]
 800634e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006352:	bf58      	it	pl
 8006354:	eba9 0101 	subpl.w	r1, r9, r1
 8006358:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800635c:	bf58      	it	pl
 800635e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006362:	6022      	str	r2, [r4, #0]
 8006364:	f04f 0900 	mov.w	r9, #0
 8006368:	e78a      	b.n	8006280 <_scanf_float+0x188>
 800636a:	f04f 0a03 	mov.w	sl, #3
 800636e:	e787      	b.n	8006280 <_scanf_float+0x188>
 8006370:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006374:	4639      	mov	r1, r7
 8006376:	4640      	mov	r0, r8
 8006378:	4798      	blx	r3
 800637a:	2800      	cmp	r0, #0
 800637c:	f43f aedf 	beq.w	800613e <_scanf_float+0x46>
 8006380:	e6ea      	b.n	8006158 <_scanf_float+0x60>
 8006382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006386:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800638a:	463a      	mov	r2, r7
 800638c:	4640      	mov	r0, r8
 800638e:	4798      	blx	r3
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	3b01      	subs	r3, #1
 8006394:	6123      	str	r3, [r4, #16]
 8006396:	e6ec      	b.n	8006172 <_scanf_float+0x7a>
 8006398:	1e6b      	subs	r3, r5, #1
 800639a:	2b06      	cmp	r3, #6
 800639c:	d825      	bhi.n	80063ea <_scanf_float+0x2f2>
 800639e:	2d02      	cmp	r5, #2
 80063a0:	d836      	bhi.n	8006410 <_scanf_float+0x318>
 80063a2:	455e      	cmp	r6, fp
 80063a4:	f67f aee8 	bls.w	8006178 <_scanf_float+0x80>
 80063a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063b0:	463a      	mov	r2, r7
 80063b2:	4640      	mov	r0, r8
 80063b4:	4798      	blx	r3
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	6123      	str	r3, [r4, #16]
 80063bc:	e7f1      	b.n	80063a2 <_scanf_float+0x2aa>
 80063be:	9802      	ldr	r0, [sp, #8]
 80063c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80063c8:	9002      	str	r0, [sp, #8]
 80063ca:	463a      	mov	r2, r7
 80063cc:	4640      	mov	r0, r8
 80063ce:	4798      	blx	r3
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063da:	fa5f fa8a 	uxtb.w	sl, sl
 80063de:	f1ba 0f02 	cmp.w	sl, #2
 80063e2:	d1ec      	bne.n	80063be <_scanf_float+0x2c6>
 80063e4:	3d03      	subs	r5, #3
 80063e6:	b2ed      	uxtb	r5, r5
 80063e8:	1b76      	subs	r6, r6, r5
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	05da      	lsls	r2, r3, #23
 80063ee:	d52f      	bpl.n	8006450 <_scanf_float+0x358>
 80063f0:	055b      	lsls	r3, r3, #21
 80063f2:	d510      	bpl.n	8006416 <_scanf_float+0x31e>
 80063f4:	455e      	cmp	r6, fp
 80063f6:	f67f aebf 	bls.w	8006178 <_scanf_float+0x80>
 80063fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80063fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006402:	463a      	mov	r2, r7
 8006404:	4640      	mov	r0, r8
 8006406:	4798      	blx	r3
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	3b01      	subs	r3, #1
 800640c:	6123      	str	r3, [r4, #16]
 800640e:	e7f1      	b.n	80063f4 <_scanf_float+0x2fc>
 8006410:	46aa      	mov	sl, r5
 8006412:	9602      	str	r6, [sp, #8]
 8006414:	e7df      	b.n	80063d6 <_scanf_float+0x2de>
 8006416:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800641a:	6923      	ldr	r3, [r4, #16]
 800641c:	2965      	cmp	r1, #101	; 0x65
 800641e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006422:	f106 35ff 	add.w	r5, r6, #4294967295
 8006426:	6123      	str	r3, [r4, #16]
 8006428:	d00c      	beq.n	8006444 <_scanf_float+0x34c>
 800642a:	2945      	cmp	r1, #69	; 0x45
 800642c:	d00a      	beq.n	8006444 <_scanf_float+0x34c>
 800642e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006432:	463a      	mov	r2, r7
 8006434:	4640      	mov	r0, r8
 8006436:	4798      	blx	r3
 8006438:	6923      	ldr	r3, [r4, #16]
 800643a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800643e:	3b01      	subs	r3, #1
 8006440:	1eb5      	subs	r5, r6, #2
 8006442:	6123      	str	r3, [r4, #16]
 8006444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006448:	463a      	mov	r2, r7
 800644a:	4640      	mov	r0, r8
 800644c:	4798      	blx	r3
 800644e:	462e      	mov	r6, r5
 8006450:	6825      	ldr	r5, [r4, #0]
 8006452:	f015 0510 	ands.w	r5, r5, #16
 8006456:	d158      	bne.n	800650a <_scanf_float+0x412>
 8006458:	7035      	strb	r5, [r6, #0]
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006464:	d11c      	bne.n	80064a0 <_scanf_float+0x3a8>
 8006466:	9b01      	ldr	r3, [sp, #4]
 8006468:	454b      	cmp	r3, r9
 800646a:	eba3 0209 	sub.w	r2, r3, r9
 800646e:	d124      	bne.n	80064ba <_scanf_float+0x3c2>
 8006470:	2200      	movs	r2, #0
 8006472:	4659      	mov	r1, fp
 8006474:	4640      	mov	r0, r8
 8006476:	f002 fc77 	bl	8008d68 <_strtod_r>
 800647a:	9b03      	ldr	r3, [sp, #12]
 800647c:	6821      	ldr	r1, [r4, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f011 0f02 	tst.w	r1, #2
 8006484:	ec57 6b10 	vmov	r6, r7, d0
 8006488:	f103 0204 	add.w	r2, r3, #4
 800648c:	d020      	beq.n	80064d0 <_scanf_float+0x3d8>
 800648e:	9903      	ldr	r1, [sp, #12]
 8006490:	600a      	str	r2, [r1, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	e9c3 6700 	strd	r6, r7, [r3]
 8006498:	68e3      	ldr	r3, [r4, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60e3      	str	r3, [r4, #12]
 800649e:	e66c      	b.n	800617a <_scanf_float+0x82>
 80064a0:	9b04      	ldr	r3, [sp, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0e4      	beq.n	8006470 <_scanf_float+0x378>
 80064a6:	9905      	ldr	r1, [sp, #20]
 80064a8:	230a      	movs	r3, #10
 80064aa:	462a      	mov	r2, r5
 80064ac:	3101      	adds	r1, #1
 80064ae:	4640      	mov	r0, r8
 80064b0:	f002 fce2 	bl	8008e78 <_strtol_r>
 80064b4:	9b04      	ldr	r3, [sp, #16]
 80064b6:	9e05      	ldr	r6, [sp, #20]
 80064b8:	1ac2      	subs	r2, r0, r3
 80064ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80064be:	429e      	cmp	r6, r3
 80064c0:	bf28      	it	cs
 80064c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80064c6:	4912      	ldr	r1, [pc, #72]	; (8006510 <_scanf_float+0x418>)
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f8e7 	bl	800669c <siprintf>
 80064ce:	e7cf      	b.n	8006470 <_scanf_float+0x378>
 80064d0:	f011 0f04 	tst.w	r1, #4
 80064d4:	9903      	ldr	r1, [sp, #12]
 80064d6:	600a      	str	r2, [r1, #0]
 80064d8:	d1db      	bne.n	8006492 <_scanf_float+0x39a>
 80064da:	f8d3 8000 	ldr.w	r8, [r3]
 80064de:	ee10 2a10 	vmov	r2, s0
 80064e2:	ee10 0a10 	vmov	r0, s0
 80064e6:	463b      	mov	r3, r7
 80064e8:	4639      	mov	r1, r7
 80064ea:	f7fa fb1f 	bl	8000b2c <__aeabi_dcmpun>
 80064ee:	b128      	cbz	r0, 80064fc <_scanf_float+0x404>
 80064f0:	4808      	ldr	r0, [pc, #32]	; (8006514 <_scanf_float+0x41c>)
 80064f2:	f000 f9fd 	bl	80068f0 <nanf>
 80064f6:	ed88 0a00 	vstr	s0, [r8]
 80064fa:	e7cd      	b.n	8006498 <_scanf_float+0x3a0>
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f7fa fb72 	bl	8000be8 <__aeabi_d2f>
 8006504:	f8c8 0000 	str.w	r0, [r8]
 8006508:	e7c6      	b.n	8006498 <_scanf_float+0x3a0>
 800650a:	2500      	movs	r5, #0
 800650c:	e635      	b.n	800617a <_scanf_float+0x82>
 800650e:	bf00      	nop
 8006510:	0800a2b8 	.word	0x0800a2b8
 8006514:	0800a64d 	.word	0x0800a64d

08006518 <std>:
 8006518:	2300      	movs	r3, #0
 800651a:	b510      	push	{r4, lr}
 800651c:	4604      	mov	r4, r0
 800651e:	e9c0 3300 	strd	r3, r3, [r0]
 8006522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006526:	6083      	str	r3, [r0, #8]
 8006528:	8181      	strh	r1, [r0, #12]
 800652a:	6643      	str	r3, [r0, #100]	; 0x64
 800652c:	81c2      	strh	r2, [r0, #14]
 800652e:	6183      	str	r3, [r0, #24]
 8006530:	4619      	mov	r1, r3
 8006532:	2208      	movs	r2, #8
 8006534:	305c      	adds	r0, #92	; 0x5c
 8006536:	f000 f94d 	bl	80067d4 <memset>
 800653a:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <std+0x58>)
 800653c:	6263      	str	r3, [r4, #36]	; 0x24
 800653e:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <std+0x5c>)
 8006540:	62a3      	str	r3, [r4, #40]	; 0x28
 8006542:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <std+0x60>)
 8006544:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006546:	4b0d      	ldr	r3, [pc, #52]	; (800657c <std+0x64>)
 8006548:	6323      	str	r3, [r4, #48]	; 0x30
 800654a:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <std+0x68>)
 800654c:	6224      	str	r4, [r4, #32]
 800654e:	429c      	cmp	r4, r3
 8006550:	d006      	beq.n	8006560 <std+0x48>
 8006552:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006556:	4294      	cmp	r4, r2
 8006558:	d002      	beq.n	8006560 <std+0x48>
 800655a:	33d0      	adds	r3, #208	; 0xd0
 800655c:	429c      	cmp	r4, r3
 800655e:	d105      	bne.n	800656c <std+0x54>
 8006560:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006568:	f000 b9b0 	b.w	80068cc <__retarget_lock_init_recursive>
 800656c:	bd10      	pop	{r4, pc}
 800656e:	bf00      	nop
 8006570:	080066dd 	.word	0x080066dd
 8006574:	080066ff 	.word	0x080066ff
 8006578:	08006737 	.word	0x08006737
 800657c:	0800675b 	.word	0x0800675b
 8006580:	20000760 	.word	0x20000760

08006584 <stdio_exit_handler>:
 8006584:	4a02      	ldr	r2, [pc, #8]	; (8006590 <stdio_exit_handler+0xc>)
 8006586:	4903      	ldr	r1, [pc, #12]	; (8006594 <stdio_exit_handler+0x10>)
 8006588:	4803      	ldr	r0, [pc, #12]	; (8006598 <stdio_exit_handler+0x14>)
 800658a:	f000 b869 	b.w	8006660 <_fwalk_sglue>
 800658e:	bf00      	nop
 8006590:	2000000c 	.word	0x2000000c
 8006594:	08009239 	.word	0x08009239
 8006598:	20000018 	.word	0x20000018

0800659c <cleanup_stdio>:
 800659c:	6841      	ldr	r1, [r0, #4]
 800659e:	4b0c      	ldr	r3, [pc, #48]	; (80065d0 <cleanup_stdio+0x34>)
 80065a0:	4299      	cmp	r1, r3
 80065a2:	b510      	push	{r4, lr}
 80065a4:	4604      	mov	r4, r0
 80065a6:	d001      	beq.n	80065ac <cleanup_stdio+0x10>
 80065a8:	f002 fe46 	bl	8009238 <_fflush_r>
 80065ac:	68a1      	ldr	r1, [r4, #8]
 80065ae:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <cleanup_stdio+0x38>)
 80065b0:	4299      	cmp	r1, r3
 80065b2:	d002      	beq.n	80065ba <cleanup_stdio+0x1e>
 80065b4:	4620      	mov	r0, r4
 80065b6:	f002 fe3f 	bl	8009238 <_fflush_r>
 80065ba:	68e1      	ldr	r1, [r4, #12]
 80065bc:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <cleanup_stdio+0x3c>)
 80065be:	4299      	cmp	r1, r3
 80065c0:	d004      	beq.n	80065cc <cleanup_stdio+0x30>
 80065c2:	4620      	mov	r0, r4
 80065c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065c8:	f002 be36 	b.w	8009238 <_fflush_r>
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	bf00      	nop
 80065d0:	20000760 	.word	0x20000760
 80065d4:	200007c8 	.word	0x200007c8
 80065d8:	20000830 	.word	0x20000830

080065dc <global_stdio_init.part.0>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	4b0b      	ldr	r3, [pc, #44]	; (800660c <global_stdio_init.part.0+0x30>)
 80065e0:	4c0b      	ldr	r4, [pc, #44]	; (8006610 <global_stdio_init.part.0+0x34>)
 80065e2:	4a0c      	ldr	r2, [pc, #48]	; (8006614 <global_stdio_init.part.0+0x38>)
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	4620      	mov	r0, r4
 80065e8:	2200      	movs	r2, #0
 80065ea:	2104      	movs	r1, #4
 80065ec:	f7ff ff94 	bl	8006518 <std>
 80065f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80065f4:	2201      	movs	r2, #1
 80065f6:	2109      	movs	r1, #9
 80065f8:	f7ff ff8e 	bl	8006518 <std>
 80065fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006600:	2202      	movs	r2, #2
 8006602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006606:	2112      	movs	r1, #18
 8006608:	f7ff bf86 	b.w	8006518 <std>
 800660c:	20000898 	.word	0x20000898
 8006610:	20000760 	.word	0x20000760
 8006614:	08006585 	.word	0x08006585

08006618 <__sfp_lock_acquire>:
 8006618:	4801      	ldr	r0, [pc, #4]	; (8006620 <__sfp_lock_acquire+0x8>)
 800661a:	f000 b958 	b.w	80068ce <__retarget_lock_acquire_recursive>
 800661e:	bf00      	nop
 8006620:	200008a1 	.word	0x200008a1

08006624 <__sfp_lock_release>:
 8006624:	4801      	ldr	r0, [pc, #4]	; (800662c <__sfp_lock_release+0x8>)
 8006626:	f000 b953 	b.w	80068d0 <__retarget_lock_release_recursive>
 800662a:	bf00      	nop
 800662c:	200008a1 	.word	0x200008a1

08006630 <__sinit>:
 8006630:	b510      	push	{r4, lr}
 8006632:	4604      	mov	r4, r0
 8006634:	f7ff fff0 	bl	8006618 <__sfp_lock_acquire>
 8006638:	6a23      	ldr	r3, [r4, #32]
 800663a:	b11b      	cbz	r3, 8006644 <__sinit+0x14>
 800663c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006640:	f7ff bff0 	b.w	8006624 <__sfp_lock_release>
 8006644:	4b04      	ldr	r3, [pc, #16]	; (8006658 <__sinit+0x28>)
 8006646:	6223      	str	r3, [r4, #32]
 8006648:	4b04      	ldr	r3, [pc, #16]	; (800665c <__sinit+0x2c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f5      	bne.n	800663c <__sinit+0xc>
 8006650:	f7ff ffc4 	bl	80065dc <global_stdio_init.part.0>
 8006654:	e7f2      	b.n	800663c <__sinit+0xc>
 8006656:	bf00      	nop
 8006658:	0800659d 	.word	0x0800659d
 800665c:	20000898 	.word	0x20000898

08006660 <_fwalk_sglue>:
 8006660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006664:	4607      	mov	r7, r0
 8006666:	4688      	mov	r8, r1
 8006668:	4614      	mov	r4, r2
 800666a:	2600      	movs	r6, #0
 800666c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006670:	f1b9 0901 	subs.w	r9, r9, #1
 8006674:	d505      	bpl.n	8006682 <_fwalk_sglue+0x22>
 8006676:	6824      	ldr	r4, [r4, #0]
 8006678:	2c00      	cmp	r4, #0
 800667a:	d1f7      	bne.n	800666c <_fwalk_sglue+0xc>
 800667c:	4630      	mov	r0, r6
 800667e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006682:	89ab      	ldrh	r3, [r5, #12]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d907      	bls.n	8006698 <_fwalk_sglue+0x38>
 8006688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800668c:	3301      	adds	r3, #1
 800668e:	d003      	beq.n	8006698 <_fwalk_sglue+0x38>
 8006690:	4629      	mov	r1, r5
 8006692:	4638      	mov	r0, r7
 8006694:	47c0      	blx	r8
 8006696:	4306      	orrs	r6, r0
 8006698:	3568      	adds	r5, #104	; 0x68
 800669a:	e7e9      	b.n	8006670 <_fwalk_sglue+0x10>

0800669c <siprintf>:
 800669c:	b40e      	push	{r1, r2, r3}
 800669e:	b500      	push	{lr}
 80066a0:	b09c      	sub	sp, #112	; 0x70
 80066a2:	ab1d      	add	r3, sp, #116	; 0x74
 80066a4:	9002      	str	r0, [sp, #8]
 80066a6:	9006      	str	r0, [sp, #24]
 80066a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066ac:	4809      	ldr	r0, [pc, #36]	; (80066d4 <siprintf+0x38>)
 80066ae:	9107      	str	r1, [sp, #28]
 80066b0:	9104      	str	r1, [sp, #16]
 80066b2:	4909      	ldr	r1, [pc, #36]	; (80066d8 <siprintf+0x3c>)
 80066b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80066b8:	9105      	str	r1, [sp, #20]
 80066ba:	6800      	ldr	r0, [r0, #0]
 80066bc:	9301      	str	r3, [sp, #4]
 80066be:	a902      	add	r1, sp, #8
 80066c0:	f002 fc36 	bl	8008f30 <_svfiprintf_r>
 80066c4:	9b02      	ldr	r3, [sp, #8]
 80066c6:	2200      	movs	r2, #0
 80066c8:	701a      	strb	r2, [r3, #0]
 80066ca:	b01c      	add	sp, #112	; 0x70
 80066cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80066d0:	b003      	add	sp, #12
 80066d2:	4770      	bx	lr
 80066d4:	20000064 	.word	0x20000064
 80066d8:	ffff0208 	.word	0xffff0208

080066dc <__sread>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	460c      	mov	r4, r1
 80066e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e4:	f000 f8a4 	bl	8006830 <_read_r>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	bfab      	itete	ge
 80066ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066ee:	89a3      	ldrhlt	r3, [r4, #12]
 80066f0:	181b      	addge	r3, r3, r0
 80066f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066f6:	bfac      	ite	ge
 80066f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80066fa:	81a3      	strhlt	r3, [r4, #12]
 80066fc:	bd10      	pop	{r4, pc}

080066fe <__swrite>:
 80066fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006702:	461f      	mov	r7, r3
 8006704:	898b      	ldrh	r3, [r1, #12]
 8006706:	05db      	lsls	r3, r3, #23
 8006708:	4605      	mov	r5, r0
 800670a:	460c      	mov	r4, r1
 800670c:	4616      	mov	r6, r2
 800670e:	d505      	bpl.n	800671c <__swrite+0x1e>
 8006710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006714:	2302      	movs	r3, #2
 8006716:	2200      	movs	r2, #0
 8006718:	f000 f878 	bl	800680c <_lseek_r>
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006722:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006726:	81a3      	strh	r3, [r4, #12]
 8006728:	4632      	mov	r2, r6
 800672a:	463b      	mov	r3, r7
 800672c:	4628      	mov	r0, r5
 800672e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006732:	f000 b88f 	b.w	8006854 <_write_r>

08006736 <__sseek>:
 8006736:	b510      	push	{r4, lr}
 8006738:	460c      	mov	r4, r1
 800673a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800673e:	f000 f865 	bl	800680c <_lseek_r>
 8006742:	1c43      	adds	r3, r0, #1
 8006744:	89a3      	ldrh	r3, [r4, #12]
 8006746:	bf15      	itete	ne
 8006748:	6560      	strne	r0, [r4, #84]	; 0x54
 800674a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800674e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006752:	81a3      	strheq	r3, [r4, #12]
 8006754:	bf18      	it	ne
 8006756:	81a3      	strhne	r3, [r4, #12]
 8006758:	bd10      	pop	{r4, pc}

0800675a <__sclose>:
 800675a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800675e:	f000 b845 	b.w	80067ec <_close_r>

08006762 <_vsniprintf_r>:
 8006762:	b530      	push	{r4, r5, lr}
 8006764:	4614      	mov	r4, r2
 8006766:	2c00      	cmp	r4, #0
 8006768:	b09b      	sub	sp, #108	; 0x6c
 800676a:	4605      	mov	r5, r0
 800676c:	461a      	mov	r2, r3
 800676e:	da05      	bge.n	800677c <_vsniprintf_r+0x1a>
 8006770:	238b      	movs	r3, #139	; 0x8b
 8006772:	6003      	str	r3, [r0, #0]
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	b01b      	add	sp, #108	; 0x6c
 800677a:	bd30      	pop	{r4, r5, pc}
 800677c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006780:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006784:	bf14      	ite	ne
 8006786:	f104 33ff 	addne.w	r3, r4, #4294967295
 800678a:	4623      	moveq	r3, r4
 800678c:	9302      	str	r3, [sp, #8]
 800678e:	9305      	str	r3, [sp, #20]
 8006790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006794:	9100      	str	r1, [sp, #0]
 8006796:	9104      	str	r1, [sp, #16]
 8006798:	f8ad 300e 	strh.w	r3, [sp, #14]
 800679c:	4669      	mov	r1, sp
 800679e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067a0:	f002 fbc6 	bl	8008f30 <_svfiprintf_r>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	bfbc      	itt	lt
 80067a8:	238b      	movlt	r3, #139	; 0x8b
 80067aa:	602b      	strlt	r3, [r5, #0]
 80067ac:	2c00      	cmp	r4, #0
 80067ae:	d0e3      	beq.n	8006778 <_vsniprintf_r+0x16>
 80067b0:	9b00      	ldr	r3, [sp, #0]
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e7df      	b.n	8006778 <_vsniprintf_r+0x16>

080067b8 <vsniprintf>:
 80067b8:	b507      	push	{r0, r1, r2, lr}
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	460a      	mov	r2, r1
 80067c0:	4601      	mov	r1, r0
 80067c2:	4803      	ldr	r0, [pc, #12]	; (80067d0 <vsniprintf+0x18>)
 80067c4:	6800      	ldr	r0, [r0, #0]
 80067c6:	f7ff ffcc 	bl	8006762 <_vsniprintf_r>
 80067ca:	b003      	add	sp, #12
 80067cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80067d0:	20000064 	.word	0x20000064

080067d4 <memset>:
 80067d4:	4402      	add	r2, r0
 80067d6:	4603      	mov	r3, r0
 80067d8:	4293      	cmp	r3, r2
 80067da:	d100      	bne.n	80067de <memset+0xa>
 80067dc:	4770      	bx	lr
 80067de:	f803 1b01 	strb.w	r1, [r3], #1
 80067e2:	e7f9      	b.n	80067d8 <memset+0x4>

080067e4 <_localeconv_r>:
 80067e4:	4800      	ldr	r0, [pc, #0]	; (80067e8 <_localeconv_r+0x4>)
 80067e6:	4770      	bx	lr
 80067e8:	20000158 	.word	0x20000158

080067ec <_close_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4d06      	ldr	r5, [pc, #24]	; (8006808 <_close_r+0x1c>)
 80067f0:	2300      	movs	r3, #0
 80067f2:	4604      	mov	r4, r0
 80067f4:	4608      	mov	r0, r1
 80067f6:	602b      	str	r3, [r5, #0]
 80067f8:	f7fb f9f3 	bl	8001be2 <_close>
 80067fc:	1c43      	adds	r3, r0, #1
 80067fe:	d102      	bne.n	8006806 <_close_r+0x1a>
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	b103      	cbz	r3, 8006806 <_close_r+0x1a>
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	2000089c 	.word	0x2000089c

0800680c <_lseek_r>:
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4d07      	ldr	r5, [pc, #28]	; (800682c <_lseek_r+0x20>)
 8006810:	4604      	mov	r4, r0
 8006812:	4608      	mov	r0, r1
 8006814:	4611      	mov	r1, r2
 8006816:	2200      	movs	r2, #0
 8006818:	602a      	str	r2, [r5, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	f7fb fa08 	bl	8001c30 <_lseek>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_lseek_r+0x1e>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	b103      	cbz	r3, 800682a <_lseek_r+0x1e>
 8006828:	6023      	str	r3, [r4, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	2000089c 	.word	0x2000089c

08006830 <_read_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	4d07      	ldr	r5, [pc, #28]	; (8006850 <_read_r+0x20>)
 8006834:	4604      	mov	r4, r0
 8006836:	4608      	mov	r0, r1
 8006838:	4611      	mov	r1, r2
 800683a:	2200      	movs	r2, #0
 800683c:	602a      	str	r2, [r5, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	f7fb f996 	bl	8001b70 <_read>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_read_r+0x1e>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_read_r+0x1e>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	2000089c 	.word	0x2000089c

08006854 <_write_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4d07      	ldr	r5, [pc, #28]	; (8006874 <_write_r+0x20>)
 8006858:	4604      	mov	r4, r0
 800685a:	4608      	mov	r0, r1
 800685c:	4611      	mov	r1, r2
 800685e:	2200      	movs	r2, #0
 8006860:	602a      	str	r2, [r5, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	f7fb f9a1 	bl	8001baa <_write>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d102      	bne.n	8006872 <_write_r+0x1e>
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	b103      	cbz	r3, 8006872 <_write_r+0x1e>
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	bd38      	pop	{r3, r4, r5, pc}
 8006874:	2000089c 	.word	0x2000089c

08006878 <__errno>:
 8006878:	4b01      	ldr	r3, [pc, #4]	; (8006880 <__errno+0x8>)
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	20000064 	.word	0x20000064

08006884 <__libc_init_array>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4d0d      	ldr	r5, [pc, #52]	; (80068bc <__libc_init_array+0x38>)
 8006888:	4c0d      	ldr	r4, [pc, #52]	; (80068c0 <__libc_init_array+0x3c>)
 800688a:	1b64      	subs	r4, r4, r5
 800688c:	10a4      	asrs	r4, r4, #2
 800688e:	2600      	movs	r6, #0
 8006890:	42a6      	cmp	r6, r4
 8006892:	d109      	bne.n	80068a8 <__libc_init_array+0x24>
 8006894:	4d0b      	ldr	r5, [pc, #44]	; (80068c4 <__libc_init_array+0x40>)
 8006896:	4c0c      	ldr	r4, [pc, #48]	; (80068c8 <__libc_init_array+0x44>)
 8006898:	f003 fbd6 	bl	800a048 <_init>
 800689c:	1b64      	subs	r4, r4, r5
 800689e:	10a4      	asrs	r4, r4, #2
 80068a0:	2600      	movs	r6, #0
 80068a2:	42a6      	cmp	r6, r4
 80068a4:	d105      	bne.n	80068b2 <__libc_init_array+0x2e>
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ac:	4798      	blx	r3
 80068ae:	3601      	adds	r6, #1
 80068b0:	e7ee      	b.n	8006890 <__libc_init_array+0xc>
 80068b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b6:	4798      	blx	r3
 80068b8:	3601      	adds	r6, #1
 80068ba:	e7f2      	b.n	80068a2 <__libc_init_array+0x1e>
 80068bc:	0800a6b8 	.word	0x0800a6b8
 80068c0:	0800a6b8 	.word	0x0800a6b8
 80068c4:	0800a6b8 	.word	0x0800a6b8
 80068c8:	0800a6bc 	.word	0x0800a6bc

080068cc <__retarget_lock_init_recursive>:
 80068cc:	4770      	bx	lr

080068ce <__retarget_lock_acquire_recursive>:
 80068ce:	4770      	bx	lr

080068d0 <__retarget_lock_release_recursive>:
 80068d0:	4770      	bx	lr

080068d2 <memcpy>:
 80068d2:	440a      	add	r2, r1
 80068d4:	4291      	cmp	r1, r2
 80068d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80068da:	d100      	bne.n	80068de <memcpy+0xc>
 80068dc:	4770      	bx	lr
 80068de:	b510      	push	{r4, lr}
 80068e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068e8:	4291      	cmp	r1, r2
 80068ea:	d1f9      	bne.n	80068e0 <memcpy+0xe>
 80068ec:	bd10      	pop	{r4, pc}
	...

080068f0 <nanf>:
 80068f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80068f8 <nanf+0x8>
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	7fc00000 	.word	0x7fc00000

080068fc <quorem>:
 80068fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006900:	6903      	ldr	r3, [r0, #16]
 8006902:	690c      	ldr	r4, [r1, #16]
 8006904:	42a3      	cmp	r3, r4
 8006906:	4607      	mov	r7, r0
 8006908:	db7e      	blt.n	8006a08 <quorem+0x10c>
 800690a:	3c01      	subs	r4, #1
 800690c:	f101 0814 	add.w	r8, r1, #20
 8006910:	f100 0514 	add.w	r5, r0, #20
 8006914:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800691e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006922:	3301      	adds	r3, #1
 8006924:	429a      	cmp	r2, r3
 8006926:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800692a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800692e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006932:	d331      	bcc.n	8006998 <quorem+0x9c>
 8006934:	f04f 0e00 	mov.w	lr, #0
 8006938:	4640      	mov	r0, r8
 800693a:	46ac      	mov	ip, r5
 800693c:	46f2      	mov	sl, lr
 800693e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006942:	b293      	uxth	r3, r2
 8006944:	fb06 e303 	mla	r3, r6, r3, lr
 8006948:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800694c:	0c1a      	lsrs	r2, r3, #16
 800694e:	b29b      	uxth	r3, r3
 8006950:	ebaa 0303 	sub.w	r3, sl, r3
 8006954:	f8dc a000 	ldr.w	sl, [ip]
 8006958:	fa13 f38a 	uxtah	r3, r3, sl
 800695c:	fb06 220e 	mla	r2, r6, lr, r2
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	9b00      	ldr	r3, [sp, #0]
 8006964:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006968:	b292      	uxth	r2, r2
 800696a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800696e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006972:	f8bd 3000 	ldrh.w	r3, [sp]
 8006976:	4581      	cmp	r9, r0
 8006978:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800697c:	f84c 3b04 	str.w	r3, [ip], #4
 8006980:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006984:	d2db      	bcs.n	800693e <quorem+0x42>
 8006986:	f855 300b 	ldr.w	r3, [r5, fp]
 800698a:	b92b      	cbnz	r3, 8006998 <quorem+0x9c>
 800698c:	9b01      	ldr	r3, [sp, #4]
 800698e:	3b04      	subs	r3, #4
 8006990:	429d      	cmp	r5, r3
 8006992:	461a      	mov	r2, r3
 8006994:	d32c      	bcc.n	80069f0 <quorem+0xf4>
 8006996:	613c      	str	r4, [r7, #16]
 8006998:	4638      	mov	r0, r7
 800699a:	f001 f9f1 	bl	8007d80 <__mcmp>
 800699e:	2800      	cmp	r0, #0
 80069a0:	db22      	blt.n	80069e8 <quorem+0xec>
 80069a2:	3601      	adds	r6, #1
 80069a4:	4629      	mov	r1, r5
 80069a6:	2000      	movs	r0, #0
 80069a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80069ac:	f8d1 c000 	ldr.w	ip, [r1]
 80069b0:	b293      	uxth	r3, r2
 80069b2:	1ac3      	subs	r3, r0, r3
 80069b4:	0c12      	lsrs	r2, r2, #16
 80069b6:	fa13 f38c 	uxtah	r3, r3, ip
 80069ba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069c8:	45c1      	cmp	r9, r8
 80069ca:	f841 3b04 	str.w	r3, [r1], #4
 80069ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069d2:	d2e9      	bcs.n	80069a8 <quorem+0xac>
 80069d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069dc:	b922      	cbnz	r2, 80069e8 <quorem+0xec>
 80069de:	3b04      	subs	r3, #4
 80069e0:	429d      	cmp	r5, r3
 80069e2:	461a      	mov	r2, r3
 80069e4:	d30a      	bcc.n	80069fc <quorem+0x100>
 80069e6:	613c      	str	r4, [r7, #16]
 80069e8:	4630      	mov	r0, r6
 80069ea:	b003      	add	sp, #12
 80069ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	3b04      	subs	r3, #4
 80069f4:	2a00      	cmp	r2, #0
 80069f6:	d1ce      	bne.n	8006996 <quorem+0x9a>
 80069f8:	3c01      	subs	r4, #1
 80069fa:	e7c9      	b.n	8006990 <quorem+0x94>
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	3b04      	subs	r3, #4
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	d1f0      	bne.n	80069e6 <quorem+0xea>
 8006a04:	3c01      	subs	r4, #1
 8006a06:	e7eb      	b.n	80069e0 <quorem+0xe4>
 8006a08:	2000      	movs	r0, #0
 8006a0a:	e7ee      	b.n	80069ea <quorem+0xee>
 8006a0c:	0000      	movs	r0, r0
	...

08006a10 <_dtoa_r>:
 8006a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a14:	ed2d 8b04 	vpush	{d8-d9}
 8006a18:	69c5      	ldr	r5, [r0, #28]
 8006a1a:	b093      	sub	sp, #76	; 0x4c
 8006a1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a20:	ec57 6b10 	vmov	r6, r7, d0
 8006a24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a28:	9107      	str	r1, [sp, #28]
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	920a      	str	r2, [sp, #40]	; 0x28
 8006a2e:	930d      	str	r3, [sp, #52]	; 0x34
 8006a30:	b975      	cbnz	r5, 8006a50 <_dtoa_r+0x40>
 8006a32:	2010      	movs	r0, #16
 8006a34:	f000 fe2a 	bl	800768c <malloc>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	61e0      	str	r0, [r4, #28]
 8006a3c:	b920      	cbnz	r0, 8006a48 <_dtoa_r+0x38>
 8006a3e:	4bae      	ldr	r3, [pc, #696]	; (8006cf8 <_dtoa_r+0x2e8>)
 8006a40:	21ef      	movs	r1, #239	; 0xef
 8006a42:	48ae      	ldr	r0, [pc, #696]	; (8006cfc <_dtoa_r+0x2ec>)
 8006a44:	f002 fc64 	bl	8009310 <__assert_func>
 8006a48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a4c:	6005      	str	r5, [r0, #0]
 8006a4e:	60c5      	str	r5, [r0, #12]
 8006a50:	69e3      	ldr	r3, [r4, #28]
 8006a52:	6819      	ldr	r1, [r3, #0]
 8006a54:	b151      	cbz	r1, 8006a6c <_dtoa_r+0x5c>
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	604a      	str	r2, [r1, #4]
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4093      	lsls	r3, r2
 8006a5e:	608b      	str	r3, [r1, #8]
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 ff07 	bl	8007874 <_Bfree>
 8006a66:	69e3      	ldr	r3, [r4, #28]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	1e3b      	subs	r3, r7, #0
 8006a6e:	bfbb      	ittet	lt
 8006a70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a74:	9303      	strlt	r3, [sp, #12]
 8006a76:	2300      	movge	r3, #0
 8006a78:	2201      	movlt	r2, #1
 8006a7a:	bfac      	ite	ge
 8006a7c:	f8c8 3000 	strge.w	r3, [r8]
 8006a80:	f8c8 2000 	strlt.w	r2, [r8]
 8006a84:	4b9e      	ldr	r3, [pc, #632]	; (8006d00 <_dtoa_r+0x2f0>)
 8006a86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006a8a:	ea33 0308 	bics.w	r3, r3, r8
 8006a8e:	d11b      	bne.n	8006ac8 <_dtoa_r+0xb8>
 8006a90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a92:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006a9c:	4333      	orrs	r3, r6
 8006a9e:	f000 8593 	beq.w	80075c8 <_dtoa_r+0xbb8>
 8006aa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aa4:	b963      	cbnz	r3, 8006ac0 <_dtoa_r+0xb0>
 8006aa6:	4b97      	ldr	r3, [pc, #604]	; (8006d04 <_dtoa_r+0x2f4>)
 8006aa8:	e027      	b.n	8006afa <_dtoa_r+0xea>
 8006aaa:	4b97      	ldr	r3, [pc, #604]	; (8006d08 <_dtoa_r+0x2f8>)
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	9800      	ldr	r0, [sp, #0]
 8006ab6:	b013      	add	sp, #76	; 0x4c
 8006ab8:	ecbd 8b04 	vpop	{d8-d9}
 8006abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac0:	4b90      	ldr	r3, [pc, #576]	; (8006d04 <_dtoa_r+0x2f4>)
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	3303      	adds	r3, #3
 8006ac6:	e7f3      	b.n	8006ab0 <_dtoa_r+0xa0>
 8006ac8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006acc:	2200      	movs	r2, #0
 8006ace:	ec51 0b17 	vmov	r0, r1, d7
 8006ad2:	eeb0 8a47 	vmov.f32	s16, s14
 8006ad6:	eef0 8a67 	vmov.f32	s17, s15
 8006ada:	2300      	movs	r3, #0
 8006adc:	f7f9 fff4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ae0:	4681      	mov	r9, r0
 8006ae2:	b160      	cbz	r0, 8006afe <_dtoa_r+0xee>
 8006ae4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 8568 	beq.w	80075c2 <_dtoa_r+0xbb2>
 8006af2:	4b86      	ldr	r3, [pc, #536]	; (8006d0c <_dtoa_r+0x2fc>)
 8006af4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	3b01      	subs	r3, #1
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	e7da      	b.n	8006ab4 <_dtoa_r+0xa4>
 8006afe:	aa10      	add	r2, sp, #64	; 0x40
 8006b00:	a911      	add	r1, sp, #68	; 0x44
 8006b02:	4620      	mov	r0, r4
 8006b04:	eeb0 0a48 	vmov.f32	s0, s16
 8006b08:	eef0 0a68 	vmov.f32	s1, s17
 8006b0c:	f001 fa4e 	bl	8007fac <__d2b>
 8006b10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b14:	4682      	mov	sl, r0
 8006b16:	2d00      	cmp	r5, #0
 8006b18:	d07f      	beq.n	8006c1a <_dtoa_r+0x20a>
 8006b1a:	ee18 3a90 	vmov	r3, s17
 8006b1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b26:	ec51 0b18 	vmov	r0, r1, d8
 8006b2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006b36:	4619      	mov	r1, r3
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4b75      	ldr	r3, [pc, #468]	; (8006d10 <_dtoa_r+0x300>)
 8006b3c:	f7f9 fba4 	bl	8000288 <__aeabi_dsub>
 8006b40:	a367      	add	r3, pc, #412	; (adr r3, 8006ce0 <_dtoa_r+0x2d0>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f7f9 fd57 	bl	80005f8 <__aeabi_dmul>
 8006b4a:	a367      	add	r3, pc, #412	; (adr r3, 8006ce8 <_dtoa_r+0x2d8>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f7f9 fb9c 	bl	800028c <__adddf3>
 8006b54:	4606      	mov	r6, r0
 8006b56:	4628      	mov	r0, r5
 8006b58:	460f      	mov	r7, r1
 8006b5a:	f7f9 fce3 	bl	8000524 <__aeabi_i2d>
 8006b5e:	a364      	add	r3, pc, #400	; (adr r3, 8006cf0 <_dtoa_r+0x2e0>)
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f7f9 fd48 	bl	80005f8 <__aeabi_dmul>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7f9 fb8c 	bl	800028c <__adddf3>
 8006b74:	4606      	mov	r6, r0
 8006b76:	460f      	mov	r7, r1
 8006b78:	f7f9 ffee 	bl	8000b58 <__aeabi_d2iz>
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4683      	mov	fp, r0
 8006b80:	2300      	movs	r3, #0
 8006b82:	4630      	mov	r0, r6
 8006b84:	4639      	mov	r1, r7
 8006b86:	f7f9 ffa9 	bl	8000adc <__aeabi_dcmplt>
 8006b8a:	b148      	cbz	r0, 8006ba0 <_dtoa_r+0x190>
 8006b8c:	4658      	mov	r0, fp
 8006b8e:	f7f9 fcc9 	bl	8000524 <__aeabi_i2d>
 8006b92:	4632      	mov	r2, r6
 8006b94:	463b      	mov	r3, r7
 8006b96:	f7f9 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b9a:	b908      	cbnz	r0, 8006ba0 <_dtoa_r+0x190>
 8006b9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ba0:	f1bb 0f16 	cmp.w	fp, #22
 8006ba4:	d857      	bhi.n	8006c56 <_dtoa_r+0x246>
 8006ba6:	4b5b      	ldr	r3, [pc, #364]	; (8006d14 <_dtoa_r+0x304>)
 8006ba8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb0:	ec51 0b18 	vmov	r0, r1, d8
 8006bb4:	f7f9 ff92 	bl	8000adc <__aeabi_dcmplt>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d04e      	beq.n	8006c5a <_dtoa_r+0x24a>
 8006bbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	930c      	str	r3, [sp, #48]	; 0x30
 8006bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bc6:	1b5b      	subs	r3, r3, r5
 8006bc8:	1e5a      	subs	r2, r3, #1
 8006bca:	bf45      	ittet	mi
 8006bcc:	f1c3 0301 	rsbmi	r3, r3, #1
 8006bd0:	9305      	strmi	r3, [sp, #20]
 8006bd2:	2300      	movpl	r3, #0
 8006bd4:	2300      	movmi	r3, #0
 8006bd6:	9206      	str	r2, [sp, #24]
 8006bd8:	bf54      	ite	pl
 8006bda:	9305      	strpl	r3, [sp, #20]
 8006bdc:	9306      	strmi	r3, [sp, #24]
 8006bde:	f1bb 0f00 	cmp.w	fp, #0
 8006be2:	db3c      	blt.n	8006c5e <_dtoa_r+0x24e>
 8006be4:	9b06      	ldr	r3, [sp, #24]
 8006be6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006bea:	445b      	add	r3, fp
 8006bec:	9306      	str	r3, [sp, #24]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	9308      	str	r3, [sp, #32]
 8006bf2:	9b07      	ldr	r3, [sp, #28]
 8006bf4:	2b09      	cmp	r3, #9
 8006bf6:	d868      	bhi.n	8006cca <_dtoa_r+0x2ba>
 8006bf8:	2b05      	cmp	r3, #5
 8006bfa:	bfc4      	itt	gt
 8006bfc:	3b04      	subgt	r3, #4
 8006bfe:	9307      	strgt	r3, [sp, #28]
 8006c00:	9b07      	ldr	r3, [sp, #28]
 8006c02:	f1a3 0302 	sub.w	r3, r3, #2
 8006c06:	bfcc      	ite	gt
 8006c08:	2500      	movgt	r5, #0
 8006c0a:	2501      	movle	r5, #1
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	f200 8085 	bhi.w	8006d1c <_dtoa_r+0x30c>
 8006c12:	e8df f003 	tbb	[pc, r3]
 8006c16:	3b2e      	.short	0x3b2e
 8006c18:	5839      	.short	0x5839
 8006c1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c1e:	441d      	add	r5, r3
 8006c20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	bfc1      	itttt	gt
 8006c28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c2c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006c30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006c34:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c38:	bfd6      	itet	le
 8006c3a:	f1c3 0320 	rsble	r3, r3, #32
 8006c3e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006c42:	fa06 f003 	lslle.w	r0, r6, r3
 8006c46:	f7f9 fc5d 	bl	8000504 <__aeabi_ui2d>
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c50:	3d01      	subs	r5, #1
 8006c52:	920e      	str	r2, [sp, #56]	; 0x38
 8006c54:	e76f      	b.n	8006b36 <_dtoa_r+0x126>
 8006c56:	2301      	movs	r3, #1
 8006c58:	e7b3      	b.n	8006bc2 <_dtoa_r+0x1b2>
 8006c5a:	900c      	str	r0, [sp, #48]	; 0x30
 8006c5c:	e7b2      	b.n	8006bc4 <_dtoa_r+0x1b4>
 8006c5e:	9b05      	ldr	r3, [sp, #20]
 8006c60:	eba3 030b 	sub.w	r3, r3, fp
 8006c64:	9305      	str	r3, [sp, #20]
 8006c66:	f1cb 0300 	rsb	r3, fp, #0
 8006c6a:	9308      	str	r3, [sp, #32]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c70:	e7bf      	b.n	8006bf2 <_dtoa_r+0x1e2>
 8006c72:	2300      	movs	r3, #0
 8006c74:	9309      	str	r3, [sp, #36]	; 0x24
 8006c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dc52      	bgt.n	8006d22 <_dtoa_r+0x312>
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	9304      	str	r3, [sp, #16]
 8006c82:	461a      	mov	r2, r3
 8006c84:	920a      	str	r2, [sp, #40]	; 0x28
 8006c86:	e00b      	b.n	8006ca0 <_dtoa_r+0x290>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e7f3      	b.n	8006c74 <_dtoa_r+0x264>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c92:	445b      	add	r3, fp
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	3301      	adds	r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	9304      	str	r3, [sp, #16]
 8006c9c:	bfb8      	it	lt
 8006c9e:	2301      	movlt	r3, #1
 8006ca0:	69e0      	ldr	r0, [r4, #28]
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	2204      	movs	r2, #4
 8006ca6:	f102 0614 	add.w	r6, r2, #20
 8006caa:	429e      	cmp	r6, r3
 8006cac:	d93d      	bls.n	8006d2a <_dtoa_r+0x31a>
 8006cae:	6041      	str	r1, [r0, #4]
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 fd9f 	bl	80077f4 <_Balloc>
 8006cb6:	9000      	str	r0, [sp, #0]
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d139      	bne.n	8006d30 <_dtoa_r+0x320>
 8006cbc:	4b16      	ldr	r3, [pc, #88]	; (8006d18 <_dtoa_r+0x308>)
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	f240 11af 	movw	r1, #431	; 0x1af
 8006cc4:	e6bd      	b.n	8006a42 <_dtoa_r+0x32>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e7e1      	b.n	8006c8e <_dtoa_r+0x27e>
 8006cca:	2501      	movs	r5, #1
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9307      	str	r3, [sp, #28]
 8006cd0:	9509      	str	r5, [sp, #36]	; 0x24
 8006cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	9304      	str	r3, [sp, #16]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2312      	movs	r3, #18
 8006cde:	e7d1      	b.n	8006c84 <_dtoa_r+0x274>
 8006ce0:	636f4361 	.word	0x636f4361
 8006ce4:	3fd287a7 	.word	0x3fd287a7
 8006ce8:	8b60c8b3 	.word	0x8b60c8b3
 8006cec:	3fc68a28 	.word	0x3fc68a28
 8006cf0:	509f79fb 	.word	0x509f79fb
 8006cf4:	3fd34413 	.word	0x3fd34413
 8006cf8:	0800a2ca 	.word	0x0800a2ca
 8006cfc:	0800a2e1 	.word	0x0800a2e1
 8006d00:	7ff00000 	.word	0x7ff00000
 8006d04:	0800a2c6 	.word	0x0800a2c6
 8006d08:	0800a2bd 	.word	0x0800a2bd
 8006d0c:	0800a295 	.word	0x0800a295
 8006d10:	3ff80000 	.word	0x3ff80000
 8006d14:	0800a3d0 	.word	0x0800a3d0
 8006d18:	0800a339 	.word	0x0800a339
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d20:	e7d7      	b.n	8006cd2 <_dtoa_r+0x2c2>
 8006d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	9304      	str	r3, [sp, #16]
 8006d28:	e7ba      	b.n	8006ca0 <_dtoa_r+0x290>
 8006d2a:	3101      	adds	r1, #1
 8006d2c:	0052      	lsls	r2, r2, #1
 8006d2e:	e7ba      	b.n	8006ca6 <_dtoa_r+0x296>
 8006d30:	69e3      	ldr	r3, [r4, #28]
 8006d32:	9a00      	ldr	r2, [sp, #0]
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	9b04      	ldr	r3, [sp, #16]
 8006d38:	2b0e      	cmp	r3, #14
 8006d3a:	f200 80a8 	bhi.w	8006e8e <_dtoa_r+0x47e>
 8006d3e:	2d00      	cmp	r5, #0
 8006d40:	f000 80a5 	beq.w	8006e8e <_dtoa_r+0x47e>
 8006d44:	f1bb 0f00 	cmp.w	fp, #0
 8006d48:	dd38      	ble.n	8006dbc <_dtoa_r+0x3ac>
 8006d4a:	4bc0      	ldr	r3, [pc, #768]	; (800704c <_dtoa_r+0x63c>)
 8006d4c:	f00b 020f 	and.w	r2, fp, #15
 8006d50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d58:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006d5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006d60:	d019      	beq.n	8006d96 <_dtoa_r+0x386>
 8006d62:	4bbb      	ldr	r3, [pc, #748]	; (8007050 <_dtoa_r+0x640>)
 8006d64:	ec51 0b18 	vmov	r0, r1, d8
 8006d68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d6c:	f7f9 fd6e 	bl	800084c <__aeabi_ddiv>
 8006d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d74:	f008 080f 	and.w	r8, r8, #15
 8006d78:	2503      	movs	r5, #3
 8006d7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007050 <_dtoa_r+0x640>
 8006d7e:	f1b8 0f00 	cmp.w	r8, #0
 8006d82:	d10a      	bne.n	8006d9a <_dtoa_r+0x38a>
 8006d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d88:	4632      	mov	r2, r6
 8006d8a:	463b      	mov	r3, r7
 8006d8c:	f7f9 fd5e 	bl	800084c <__aeabi_ddiv>
 8006d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d94:	e02b      	b.n	8006dee <_dtoa_r+0x3de>
 8006d96:	2502      	movs	r5, #2
 8006d98:	e7ef      	b.n	8006d7a <_dtoa_r+0x36a>
 8006d9a:	f018 0f01 	tst.w	r8, #1
 8006d9e:	d008      	beq.n	8006db2 <_dtoa_r+0x3a2>
 8006da0:	4630      	mov	r0, r6
 8006da2:	4639      	mov	r1, r7
 8006da4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006da8:	f7f9 fc26 	bl	80005f8 <__aeabi_dmul>
 8006dac:	3501      	adds	r5, #1
 8006dae:	4606      	mov	r6, r0
 8006db0:	460f      	mov	r7, r1
 8006db2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006db6:	f109 0908 	add.w	r9, r9, #8
 8006dba:	e7e0      	b.n	8006d7e <_dtoa_r+0x36e>
 8006dbc:	f000 809f 	beq.w	8006efe <_dtoa_r+0x4ee>
 8006dc0:	f1cb 0600 	rsb	r6, fp, #0
 8006dc4:	4ba1      	ldr	r3, [pc, #644]	; (800704c <_dtoa_r+0x63c>)
 8006dc6:	4fa2      	ldr	r7, [pc, #648]	; (8007050 <_dtoa_r+0x640>)
 8006dc8:	f006 020f 	and.w	r2, r6, #15
 8006dcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	ec51 0b18 	vmov	r0, r1, d8
 8006dd8:	f7f9 fc0e 	bl	80005f8 <__aeabi_dmul>
 8006ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006de0:	1136      	asrs	r6, r6, #4
 8006de2:	2300      	movs	r3, #0
 8006de4:	2502      	movs	r5, #2
 8006de6:	2e00      	cmp	r6, #0
 8006de8:	d17e      	bne.n	8006ee8 <_dtoa_r+0x4d8>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1d0      	bne.n	8006d90 <_dtoa_r+0x380>
 8006dee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006df0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 8084 	beq.w	8006f02 <_dtoa_r+0x4f2>
 8006dfa:	4b96      	ldr	r3, [pc, #600]	; (8007054 <_dtoa_r+0x644>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4640      	mov	r0, r8
 8006e00:	4649      	mov	r1, r9
 8006e02:	f7f9 fe6b 	bl	8000adc <__aeabi_dcmplt>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d07b      	beq.n	8006f02 <_dtoa_r+0x4f2>
 8006e0a:	9b04      	ldr	r3, [sp, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d078      	beq.n	8006f02 <_dtoa_r+0x4f2>
 8006e10:	9b01      	ldr	r3, [sp, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	dd39      	ble.n	8006e8a <_dtoa_r+0x47a>
 8006e16:	4b90      	ldr	r3, [pc, #576]	; (8007058 <_dtoa_r+0x648>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	4649      	mov	r1, r9
 8006e1e:	f7f9 fbeb 	bl	80005f8 <__aeabi_dmul>
 8006e22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e26:	9e01      	ldr	r6, [sp, #4]
 8006e28:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006e32:	4628      	mov	r0, r5
 8006e34:	f7f9 fb76 	bl	8000524 <__aeabi_i2d>
 8006e38:	4642      	mov	r2, r8
 8006e3a:	464b      	mov	r3, r9
 8006e3c:	f7f9 fbdc 	bl	80005f8 <__aeabi_dmul>
 8006e40:	4b86      	ldr	r3, [pc, #536]	; (800705c <_dtoa_r+0x64c>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	f7f9 fa22 	bl	800028c <__adddf3>
 8006e48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006e4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e50:	9303      	str	r3, [sp, #12]
 8006e52:	2e00      	cmp	r6, #0
 8006e54:	d158      	bne.n	8006f08 <_dtoa_r+0x4f8>
 8006e56:	4b82      	ldr	r3, [pc, #520]	; (8007060 <_dtoa_r+0x650>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	f7f9 fa13 	bl	8000288 <__aeabi_dsub>
 8006e62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e66:	4680      	mov	r8, r0
 8006e68:	4689      	mov	r9, r1
 8006e6a:	f7f9 fe55 	bl	8000b18 <__aeabi_dcmpgt>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	f040 8296 	bne.w	80073a0 <_dtoa_r+0x990>
 8006e74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006e78:	4640      	mov	r0, r8
 8006e7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e7e:	4649      	mov	r1, r9
 8006e80:	f7f9 fe2c 	bl	8000adc <__aeabi_dcmplt>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f040 8289 	bne.w	800739c <_dtoa_r+0x98c>
 8006e8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006e8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f2c0 814e 	blt.w	8007132 <_dtoa_r+0x722>
 8006e96:	f1bb 0f0e 	cmp.w	fp, #14
 8006e9a:	f300 814a 	bgt.w	8007132 <_dtoa_r+0x722>
 8006e9e:	4b6b      	ldr	r3, [pc, #428]	; (800704c <_dtoa_r+0x63c>)
 8006ea0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ea4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f280 80dc 	bge.w	8007068 <_dtoa_r+0x658>
 8006eb0:	9b04      	ldr	r3, [sp, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f300 80d8 	bgt.w	8007068 <_dtoa_r+0x658>
 8006eb8:	f040 826f 	bne.w	800739a <_dtoa_r+0x98a>
 8006ebc:	4b68      	ldr	r3, [pc, #416]	; (8007060 <_dtoa_r+0x650>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	f7f9 fb98 	bl	80005f8 <__aeabi_dmul>
 8006ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ecc:	f7f9 fe1a 	bl	8000b04 <__aeabi_dcmpge>
 8006ed0:	9e04      	ldr	r6, [sp, #16]
 8006ed2:	4637      	mov	r7, r6
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	f040 8245 	bne.w	8007364 <_dtoa_r+0x954>
 8006eda:	9d00      	ldr	r5, [sp, #0]
 8006edc:	2331      	movs	r3, #49	; 0x31
 8006ede:	f805 3b01 	strb.w	r3, [r5], #1
 8006ee2:	f10b 0b01 	add.w	fp, fp, #1
 8006ee6:	e241      	b.n	800736c <_dtoa_r+0x95c>
 8006ee8:	07f2      	lsls	r2, r6, #31
 8006eea:	d505      	bpl.n	8006ef8 <_dtoa_r+0x4e8>
 8006eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef0:	f7f9 fb82 	bl	80005f8 <__aeabi_dmul>
 8006ef4:	3501      	adds	r5, #1
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	1076      	asrs	r6, r6, #1
 8006efa:	3708      	adds	r7, #8
 8006efc:	e773      	b.n	8006de6 <_dtoa_r+0x3d6>
 8006efe:	2502      	movs	r5, #2
 8006f00:	e775      	b.n	8006dee <_dtoa_r+0x3de>
 8006f02:	9e04      	ldr	r6, [sp, #16]
 8006f04:	465f      	mov	r7, fp
 8006f06:	e792      	b.n	8006e2e <_dtoa_r+0x41e>
 8006f08:	9900      	ldr	r1, [sp, #0]
 8006f0a:	4b50      	ldr	r3, [pc, #320]	; (800704c <_dtoa_r+0x63c>)
 8006f0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f10:	4431      	add	r1, r6
 8006f12:	9102      	str	r1, [sp, #8]
 8006f14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f16:	eeb0 9a47 	vmov.f32	s18, s14
 8006f1a:	eef0 9a67 	vmov.f32	s19, s15
 8006f1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f26:	2900      	cmp	r1, #0
 8006f28:	d044      	beq.n	8006fb4 <_dtoa_r+0x5a4>
 8006f2a:	494e      	ldr	r1, [pc, #312]	; (8007064 <_dtoa_r+0x654>)
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	f7f9 fc8d 	bl	800084c <__aeabi_ddiv>
 8006f32:	ec53 2b19 	vmov	r2, r3, d9
 8006f36:	f7f9 f9a7 	bl	8000288 <__aeabi_dsub>
 8006f3a:	9d00      	ldr	r5, [sp, #0]
 8006f3c:	ec41 0b19 	vmov	d9, r0, r1
 8006f40:	4649      	mov	r1, r9
 8006f42:	4640      	mov	r0, r8
 8006f44:	f7f9 fe08 	bl	8000b58 <__aeabi_d2iz>
 8006f48:	4606      	mov	r6, r0
 8006f4a:	f7f9 faeb 	bl	8000524 <__aeabi_i2d>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4640      	mov	r0, r8
 8006f54:	4649      	mov	r1, r9
 8006f56:	f7f9 f997 	bl	8000288 <__aeabi_dsub>
 8006f5a:	3630      	adds	r6, #48	; 0x30
 8006f5c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f60:	ec53 2b19 	vmov	r2, r3, d9
 8006f64:	4680      	mov	r8, r0
 8006f66:	4689      	mov	r9, r1
 8006f68:	f7f9 fdb8 	bl	8000adc <__aeabi_dcmplt>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d164      	bne.n	800703a <_dtoa_r+0x62a>
 8006f70:	4642      	mov	r2, r8
 8006f72:	464b      	mov	r3, r9
 8006f74:	4937      	ldr	r1, [pc, #220]	; (8007054 <_dtoa_r+0x644>)
 8006f76:	2000      	movs	r0, #0
 8006f78:	f7f9 f986 	bl	8000288 <__aeabi_dsub>
 8006f7c:	ec53 2b19 	vmov	r2, r3, d9
 8006f80:	f7f9 fdac 	bl	8000adc <__aeabi_dcmplt>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	f040 80b6 	bne.w	80070f6 <_dtoa_r+0x6e6>
 8006f8a:	9b02      	ldr	r3, [sp, #8]
 8006f8c:	429d      	cmp	r5, r3
 8006f8e:	f43f af7c 	beq.w	8006e8a <_dtoa_r+0x47a>
 8006f92:	4b31      	ldr	r3, [pc, #196]	; (8007058 <_dtoa_r+0x648>)
 8006f94:	ec51 0b19 	vmov	r0, r1, d9
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f7f9 fb2d 	bl	80005f8 <__aeabi_dmul>
 8006f9e:	4b2e      	ldr	r3, [pc, #184]	; (8007058 <_dtoa_r+0x648>)
 8006fa0:	ec41 0b19 	vmov	d9, r0, r1
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	4649      	mov	r1, r9
 8006faa:	f7f9 fb25 	bl	80005f8 <__aeabi_dmul>
 8006fae:	4680      	mov	r8, r0
 8006fb0:	4689      	mov	r9, r1
 8006fb2:	e7c5      	b.n	8006f40 <_dtoa_r+0x530>
 8006fb4:	ec51 0b17 	vmov	r0, r1, d7
 8006fb8:	f7f9 fb1e 	bl	80005f8 <__aeabi_dmul>
 8006fbc:	9b02      	ldr	r3, [sp, #8]
 8006fbe:	9d00      	ldr	r5, [sp, #0]
 8006fc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fc2:	ec41 0b19 	vmov	d9, r0, r1
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	4640      	mov	r0, r8
 8006fca:	f7f9 fdc5 	bl	8000b58 <__aeabi_d2iz>
 8006fce:	4606      	mov	r6, r0
 8006fd0:	f7f9 faa8 	bl	8000524 <__aeabi_i2d>
 8006fd4:	3630      	adds	r6, #48	; 0x30
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	460b      	mov	r3, r1
 8006fda:	4640      	mov	r0, r8
 8006fdc:	4649      	mov	r1, r9
 8006fde:	f7f9 f953 	bl	8000288 <__aeabi_dsub>
 8006fe2:	f805 6b01 	strb.w	r6, [r5], #1
 8006fe6:	9b02      	ldr	r3, [sp, #8]
 8006fe8:	429d      	cmp	r5, r3
 8006fea:	4680      	mov	r8, r0
 8006fec:	4689      	mov	r9, r1
 8006fee:	f04f 0200 	mov.w	r2, #0
 8006ff2:	d124      	bne.n	800703e <_dtoa_r+0x62e>
 8006ff4:	4b1b      	ldr	r3, [pc, #108]	; (8007064 <_dtoa_r+0x654>)
 8006ff6:	ec51 0b19 	vmov	r0, r1, d9
 8006ffa:	f7f9 f947 	bl	800028c <__adddf3>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 fd87 	bl	8000b18 <__aeabi_dcmpgt>
 800700a:	2800      	cmp	r0, #0
 800700c:	d173      	bne.n	80070f6 <_dtoa_r+0x6e6>
 800700e:	ec53 2b19 	vmov	r2, r3, d9
 8007012:	4914      	ldr	r1, [pc, #80]	; (8007064 <_dtoa_r+0x654>)
 8007014:	2000      	movs	r0, #0
 8007016:	f7f9 f937 	bl	8000288 <__aeabi_dsub>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4640      	mov	r0, r8
 8007020:	4649      	mov	r1, r9
 8007022:	f7f9 fd5b 	bl	8000adc <__aeabi_dcmplt>
 8007026:	2800      	cmp	r0, #0
 8007028:	f43f af2f 	beq.w	8006e8a <_dtoa_r+0x47a>
 800702c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800702e:	1e6b      	subs	r3, r5, #1
 8007030:	930f      	str	r3, [sp, #60]	; 0x3c
 8007032:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007036:	2b30      	cmp	r3, #48	; 0x30
 8007038:	d0f8      	beq.n	800702c <_dtoa_r+0x61c>
 800703a:	46bb      	mov	fp, r7
 800703c:	e04a      	b.n	80070d4 <_dtoa_r+0x6c4>
 800703e:	4b06      	ldr	r3, [pc, #24]	; (8007058 <_dtoa_r+0x648>)
 8007040:	f7f9 fada 	bl	80005f8 <__aeabi_dmul>
 8007044:	4680      	mov	r8, r0
 8007046:	4689      	mov	r9, r1
 8007048:	e7bd      	b.n	8006fc6 <_dtoa_r+0x5b6>
 800704a:	bf00      	nop
 800704c:	0800a3d0 	.word	0x0800a3d0
 8007050:	0800a3a8 	.word	0x0800a3a8
 8007054:	3ff00000 	.word	0x3ff00000
 8007058:	40240000 	.word	0x40240000
 800705c:	401c0000 	.word	0x401c0000
 8007060:	40140000 	.word	0x40140000
 8007064:	3fe00000 	.word	0x3fe00000
 8007068:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800706c:	9d00      	ldr	r5, [sp, #0]
 800706e:	4642      	mov	r2, r8
 8007070:	464b      	mov	r3, r9
 8007072:	4630      	mov	r0, r6
 8007074:	4639      	mov	r1, r7
 8007076:	f7f9 fbe9 	bl	800084c <__aeabi_ddiv>
 800707a:	f7f9 fd6d 	bl	8000b58 <__aeabi_d2iz>
 800707e:	9001      	str	r0, [sp, #4]
 8007080:	f7f9 fa50 	bl	8000524 <__aeabi_i2d>
 8007084:	4642      	mov	r2, r8
 8007086:	464b      	mov	r3, r9
 8007088:	f7f9 fab6 	bl	80005f8 <__aeabi_dmul>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4630      	mov	r0, r6
 8007092:	4639      	mov	r1, r7
 8007094:	f7f9 f8f8 	bl	8000288 <__aeabi_dsub>
 8007098:	9e01      	ldr	r6, [sp, #4]
 800709a:	9f04      	ldr	r7, [sp, #16]
 800709c:	3630      	adds	r6, #48	; 0x30
 800709e:	f805 6b01 	strb.w	r6, [r5], #1
 80070a2:	9e00      	ldr	r6, [sp, #0]
 80070a4:	1bae      	subs	r6, r5, r6
 80070a6:	42b7      	cmp	r7, r6
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	d134      	bne.n	8007118 <_dtoa_r+0x708>
 80070ae:	f7f9 f8ed 	bl	800028c <__adddf3>
 80070b2:	4642      	mov	r2, r8
 80070b4:	464b      	mov	r3, r9
 80070b6:	4606      	mov	r6, r0
 80070b8:	460f      	mov	r7, r1
 80070ba:	f7f9 fd2d 	bl	8000b18 <__aeabi_dcmpgt>
 80070be:	b9c8      	cbnz	r0, 80070f4 <_dtoa_r+0x6e4>
 80070c0:	4642      	mov	r2, r8
 80070c2:	464b      	mov	r3, r9
 80070c4:	4630      	mov	r0, r6
 80070c6:	4639      	mov	r1, r7
 80070c8:	f7f9 fcfe 	bl	8000ac8 <__aeabi_dcmpeq>
 80070cc:	b110      	cbz	r0, 80070d4 <_dtoa_r+0x6c4>
 80070ce:	9b01      	ldr	r3, [sp, #4]
 80070d0:	07db      	lsls	r3, r3, #31
 80070d2:	d40f      	bmi.n	80070f4 <_dtoa_r+0x6e4>
 80070d4:	4651      	mov	r1, sl
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 fbcc 	bl	8007874 <_Bfree>
 80070dc:	2300      	movs	r3, #0
 80070de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070e0:	702b      	strb	r3, [r5, #0]
 80070e2:	f10b 0301 	add.w	r3, fp, #1
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f43f ace2 	beq.w	8006ab4 <_dtoa_r+0xa4>
 80070f0:	601d      	str	r5, [r3, #0]
 80070f2:	e4df      	b.n	8006ab4 <_dtoa_r+0xa4>
 80070f4:	465f      	mov	r7, fp
 80070f6:	462b      	mov	r3, r5
 80070f8:	461d      	mov	r5, r3
 80070fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070fe:	2a39      	cmp	r2, #57	; 0x39
 8007100:	d106      	bne.n	8007110 <_dtoa_r+0x700>
 8007102:	9a00      	ldr	r2, [sp, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d1f7      	bne.n	80070f8 <_dtoa_r+0x6e8>
 8007108:	9900      	ldr	r1, [sp, #0]
 800710a:	2230      	movs	r2, #48	; 0x30
 800710c:	3701      	adds	r7, #1
 800710e:	700a      	strb	r2, [r1, #0]
 8007110:	781a      	ldrb	r2, [r3, #0]
 8007112:	3201      	adds	r2, #1
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e790      	b.n	800703a <_dtoa_r+0x62a>
 8007118:	4ba3      	ldr	r3, [pc, #652]	; (80073a8 <_dtoa_r+0x998>)
 800711a:	2200      	movs	r2, #0
 800711c:	f7f9 fa6c 	bl	80005f8 <__aeabi_dmul>
 8007120:	2200      	movs	r2, #0
 8007122:	2300      	movs	r3, #0
 8007124:	4606      	mov	r6, r0
 8007126:	460f      	mov	r7, r1
 8007128:	f7f9 fcce 	bl	8000ac8 <__aeabi_dcmpeq>
 800712c:	2800      	cmp	r0, #0
 800712e:	d09e      	beq.n	800706e <_dtoa_r+0x65e>
 8007130:	e7d0      	b.n	80070d4 <_dtoa_r+0x6c4>
 8007132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007134:	2a00      	cmp	r2, #0
 8007136:	f000 80ca 	beq.w	80072ce <_dtoa_r+0x8be>
 800713a:	9a07      	ldr	r2, [sp, #28]
 800713c:	2a01      	cmp	r2, #1
 800713e:	f300 80ad 	bgt.w	800729c <_dtoa_r+0x88c>
 8007142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007144:	2a00      	cmp	r2, #0
 8007146:	f000 80a5 	beq.w	8007294 <_dtoa_r+0x884>
 800714a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800714e:	9e08      	ldr	r6, [sp, #32]
 8007150:	9d05      	ldr	r5, [sp, #20]
 8007152:	9a05      	ldr	r2, [sp, #20]
 8007154:	441a      	add	r2, r3
 8007156:	9205      	str	r2, [sp, #20]
 8007158:	9a06      	ldr	r2, [sp, #24]
 800715a:	2101      	movs	r1, #1
 800715c:	441a      	add	r2, r3
 800715e:	4620      	mov	r0, r4
 8007160:	9206      	str	r2, [sp, #24]
 8007162:	f000 fc87 	bl	8007a74 <__i2b>
 8007166:	4607      	mov	r7, r0
 8007168:	b165      	cbz	r5, 8007184 <_dtoa_r+0x774>
 800716a:	9b06      	ldr	r3, [sp, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	dd09      	ble.n	8007184 <_dtoa_r+0x774>
 8007170:	42ab      	cmp	r3, r5
 8007172:	9a05      	ldr	r2, [sp, #20]
 8007174:	bfa8      	it	ge
 8007176:	462b      	movge	r3, r5
 8007178:	1ad2      	subs	r2, r2, r3
 800717a:	9205      	str	r2, [sp, #20]
 800717c:	9a06      	ldr	r2, [sp, #24]
 800717e:	1aed      	subs	r5, r5, r3
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	9306      	str	r3, [sp, #24]
 8007184:	9b08      	ldr	r3, [sp, #32]
 8007186:	b1f3      	cbz	r3, 80071c6 <_dtoa_r+0x7b6>
 8007188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 80a3 	beq.w	80072d6 <_dtoa_r+0x8c6>
 8007190:	2e00      	cmp	r6, #0
 8007192:	dd10      	ble.n	80071b6 <_dtoa_r+0x7a6>
 8007194:	4639      	mov	r1, r7
 8007196:	4632      	mov	r2, r6
 8007198:	4620      	mov	r0, r4
 800719a:	f000 fd2b 	bl	8007bf4 <__pow5mult>
 800719e:	4652      	mov	r2, sl
 80071a0:	4601      	mov	r1, r0
 80071a2:	4607      	mov	r7, r0
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 fc7b 	bl	8007aa0 <__multiply>
 80071aa:	4651      	mov	r1, sl
 80071ac:	4680      	mov	r8, r0
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 fb60 	bl	8007874 <_Bfree>
 80071b4:	46c2      	mov	sl, r8
 80071b6:	9b08      	ldr	r3, [sp, #32]
 80071b8:	1b9a      	subs	r2, r3, r6
 80071ba:	d004      	beq.n	80071c6 <_dtoa_r+0x7b6>
 80071bc:	4651      	mov	r1, sl
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 fd18 	bl	8007bf4 <__pow5mult>
 80071c4:	4682      	mov	sl, r0
 80071c6:	2101      	movs	r1, #1
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 fc53 	bl	8007a74 <__i2b>
 80071ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	4606      	mov	r6, r0
 80071d4:	f340 8081 	ble.w	80072da <_dtoa_r+0x8ca>
 80071d8:	461a      	mov	r2, r3
 80071da:	4601      	mov	r1, r0
 80071dc:	4620      	mov	r0, r4
 80071de:	f000 fd09 	bl	8007bf4 <__pow5mult>
 80071e2:	9b07      	ldr	r3, [sp, #28]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	4606      	mov	r6, r0
 80071e8:	dd7a      	ble.n	80072e0 <_dtoa_r+0x8d0>
 80071ea:	f04f 0800 	mov.w	r8, #0
 80071ee:	6933      	ldr	r3, [r6, #16]
 80071f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071f4:	6918      	ldr	r0, [r3, #16]
 80071f6:	f000 fbef 	bl	80079d8 <__hi0bits>
 80071fa:	f1c0 0020 	rsb	r0, r0, #32
 80071fe:	9b06      	ldr	r3, [sp, #24]
 8007200:	4418      	add	r0, r3
 8007202:	f010 001f 	ands.w	r0, r0, #31
 8007206:	f000 8094 	beq.w	8007332 <_dtoa_r+0x922>
 800720a:	f1c0 0320 	rsb	r3, r0, #32
 800720e:	2b04      	cmp	r3, #4
 8007210:	f340 8085 	ble.w	800731e <_dtoa_r+0x90e>
 8007214:	9b05      	ldr	r3, [sp, #20]
 8007216:	f1c0 001c 	rsb	r0, r0, #28
 800721a:	4403      	add	r3, r0
 800721c:	9305      	str	r3, [sp, #20]
 800721e:	9b06      	ldr	r3, [sp, #24]
 8007220:	4403      	add	r3, r0
 8007222:	4405      	add	r5, r0
 8007224:	9306      	str	r3, [sp, #24]
 8007226:	9b05      	ldr	r3, [sp, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	dd05      	ble.n	8007238 <_dtoa_r+0x828>
 800722c:	4651      	mov	r1, sl
 800722e:	461a      	mov	r2, r3
 8007230:	4620      	mov	r0, r4
 8007232:	f000 fd39 	bl	8007ca8 <__lshift>
 8007236:	4682      	mov	sl, r0
 8007238:	9b06      	ldr	r3, [sp, #24]
 800723a:	2b00      	cmp	r3, #0
 800723c:	dd05      	ble.n	800724a <_dtoa_r+0x83a>
 800723e:	4631      	mov	r1, r6
 8007240:	461a      	mov	r2, r3
 8007242:	4620      	mov	r0, r4
 8007244:	f000 fd30 	bl	8007ca8 <__lshift>
 8007248:	4606      	mov	r6, r0
 800724a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800724c:	2b00      	cmp	r3, #0
 800724e:	d072      	beq.n	8007336 <_dtoa_r+0x926>
 8007250:	4631      	mov	r1, r6
 8007252:	4650      	mov	r0, sl
 8007254:	f000 fd94 	bl	8007d80 <__mcmp>
 8007258:	2800      	cmp	r0, #0
 800725a:	da6c      	bge.n	8007336 <_dtoa_r+0x926>
 800725c:	2300      	movs	r3, #0
 800725e:	4651      	mov	r1, sl
 8007260:	220a      	movs	r2, #10
 8007262:	4620      	mov	r0, r4
 8007264:	f000 fb28 	bl	80078b8 <__multadd>
 8007268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800726e:	4682      	mov	sl, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 81b0 	beq.w	80075d6 <_dtoa_r+0xbc6>
 8007276:	2300      	movs	r3, #0
 8007278:	4639      	mov	r1, r7
 800727a:	220a      	movs	r2, #10
 800727c:	4620      	mov	r0, r4
 800727e:	f000 fb1b 	bl	80078b8 <__multadd>
 8007282:	9b01      	ldr	r3, [sp, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	4607      	mov	r7, r0
 8007288:	f300 8096 	bgt.w	80073b8 <_dtoa_r+0x9a8>
 800728c:	9b07      	ldr	r3, [sp, #28]
 800728e:	2b02      	cmp	r3, #2
 8007290:	dc59      	bgt.n	8007346 <_dtoa_r+0x936>
 8007292:	e091      	b.n	80073b8 <_dtoa_r+0x9a8>
 8007294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007296:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800729a:	e758      	b.n	800714e <_dtoa_r+0x73e>
 800729c:	9b04      	ldr	r3, [sp, #16]
 800729e:	1e5e      	subs	r6, r3, #1
 80072a0:	9b08      	ldr	r3, [sp, #32]
 80072a2:	42b3      	cmp	r3, r6
 80072a4:	bfbf      	itttt	lt
 80072a6:	9b08      	ldrlt	r3, [sp, #32]
 80072a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80072aa:	9608      	strlt	r6, [sp, #32]
 80072ac:	1af3      	sublt	r3, r6, r3
 80072ae:	bfb4      	ite	lt
 80072b0:	18d2      	addlt	r2, r2, r3
 80072b2:	1b9e      	subge	r6, r3, r6
 80072b4:	9b04      	ldr	r3, [sp, #16]
 80072b6:	bfbc      	itt	lt
 80072b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80072ba:	2600      	movlt	r6, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	bfb7      	itett	lt
 80072c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80072c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80072c8:	1a9d      	sublt	r5, r3, r2
 80072ca:	2300      	movlt	r3, #0
 80072cc:	e741      	b.n	8007152 <_dtoa_r+0x742>
 80072ce:	9e08      	ldr	r6, [sp, #32]
 80072d0:	9d05      	ldr	r5, [sp, #20]
 80072d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072d4:	e748      	b.n	8007168 <_dtoa_r+0x758>
 80072d6:	9a08      	ldr	r2, [sp, #32]
 80072d8:	e770      	b.n	80071bc <_dtoa_r+0x7ac>
 80072da:	9b07      	ldr	r3, [sp, #28]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	dc19      	bgt.n	8007314 <_dtoa_r+0x904>
 80072e0:	9b02      	ldr	r3, [sp, #8]
 80072e2:	b9bb      	cbnz	r3, 8007314 <_dtoa_r+0x904>
 80072e4:	9b03      	ldr	r3, [sp, #12]
 80072e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072ea:	b99b      	cbnz	r3, 8007314 <_dtoa_r+0x904>
 80072ec:	9b03      	ldr	r3, [sp, #12]
 80072ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072f2:	0d1b      	lsrs	r3, r3, #20
 80072f4:	051b      	lsls	r3, r3, #20
 80072f6:	b183      	cbz	r3, 800731a <_dtoa_r+0x90a>
 80072f8:	9b05      	ldr	r3, [sp, #20]
 80072fa:	3301      	adds	r3, #1
 80072fc:	9305      	str	r3, [sp, #20]
 80072fe:	9b06      	ldr	r3, [sp, #24]
 8007300:	3301      	adds	r3, #1
 8007302:	9306      	str	r3, [sp, #24]
 8007304:	f04f 0801 	mov.w	r8, #1
 8007308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800730a:	2b00      	cmp	r3, #0
 800730c:	f47f af6f 	bne.w	80071ee <_dtoa_r+0x7de>
 8007310:	2001      	movs	r0, #1
 8007312:	e774      	b.n	80071fe <_dtoa_r+0x7ee>
 8007314:	f04f 0800 	mov.w	r8, #0
 8007318:	e7f6      	b.n	8007308 <_dtoa_r+0x8f8>
 800731a:	4698      	mov	r8, r3
 800731c:	e7f4      	b.n	8007308 <_dtoa_r+0x8f8>
 800731e:	d082      	beq.n	8007226 <_dtoa_r+0x816>
 8007320:	9a05      	ldr	r2, [sp, #20]
 8007322:	331c      	adds	r3, #28
 8007324:	441a      	add	r2, r3
 8007326:	9205      	str	r2, [sp, #20]
 8007328:	9a06      	ldr	r2, [sp, #24]
 800732a:	441a      	add	r2, r3
 800732c:	441d      	add	r5, r3
 800732e:	9206      	str	r2, [sp, #24]
 8007330:	e779      	b.n	8007226 <_dtoa_r+0x816>
 8007332:	4603      	mov	r3, r0
 8007334:	e7f4      	b.n	8007320 <_dtoa_r+0x910>
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	dc37      	bgt.n	80073ac <_dtoa_r+0x99c>
 800733c:	9b07      	ldr	r3, [sp, #28]
 800733e:	2b02      	cmp	r3, #2
 8007340:	dd34      	ble.n	80073ac <_dtoa_r+0x99c>
 8007342:	9b04      	ldr	r3, [sp, #16]
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	9b01      	ldr	r3, [sp, #4]
 8007348:	b963      	cbnz	r3, 8007364 <_dtoa_r+0x954>
 800734a:	4631      	mov	r1, r6
 800734c:	2205      	movs	r2, #5
 800734e:	4620      	mov	r0, r4
 8007350:	f000 fab2 	bl	80078b8 <__multadd>
 8007354:	4601      	mov	r1, r0
 8007356:	4606      	mov	r6, r0
 8007358:	4650      	mov	r0, sl
 800735a:	f000 fd11 	bl	8007d80 <__mcmp>
 800735e:	2800      	cmp	r0, #0
 8007360:	f73f adbb 	bgt.w	8006eda <_dtoa_r+0x4ca>
 8007364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007366:	9d00      	ldr	r5, [sp, #0]
 8007368:	ea6f 0b03 	mvn.w	fp, r3
 800736c:	f04f 0800 	mov.w	r8, #0
 8007370:	4631      	mov	r1, r6
 8007372:	4620      	mov	r0, r4
 8007374:	f000 fa7e 	bl	8007874 <_Bfree>
 8007378:	2f00      	cmp	r7, #0
 800737a:	f43f aeab 	beq.w	80070d4 <_dtoa_r+0x6c4>
 800737e:	f1b8 0f00 	cmp.w	r8, #0
 8007382:	d005      	beq.n	8007390 <_dtoa_r+0x980>
 8007384:	45b8      	cmp	r8, r7
 8007386:	d003      	beq.n	8007390 <_dtoa_r+0x980>
 8007388:	4641      	mov	r1, r8
 800738a:	4620      	mov	r0, r4
 800738c:	f000 fa72 	bl	8007874 <_Bfree>
 8007390:	4639      	mov	r1, r7
 8007392:	4620      	mov	r0, r4
 8007394:	f000 fa6e 	bl	8007874 <_Bfree>
 8007398:	e69c      	b.n	80070d4 <_dtoa_r+0x6c4>
 800739a:	2600      	movs	r6, #0
 800739c:	4637      	mov	r7, r6
 800739e:	e7e1      	b.n	8007364 <_dtoa_r+0x954>
 80073a0:	46bb      	mov	fp, r7
 80073a2:	4637      	mov	r7, r6
 80073a4:	e599      	b.n	8006eda <_dtoa_r+0x4ca>
 80073a6:	bf00      	nop
 80073a8:	40240000 	.word	0x40240000
 80073ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 80c8 	beq.w	8007544 <_dtoa_r+0xb34>
 80073b4:	9b04      	ldr	r3, [sp, #16]
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	2d00      	cmp	r5, #0
 80073ba:	dd05      	ble.n	80073c8 <_dtoa_r+0x9b8>
 80073bc:	4639      	mov	r1, r7
 80073be:	462a      	mov	r2, r5
 80073c0:	4620      	mov	r0, r4
 80073c2:	f000 fc71 	bl	8007ca8 <__lshift>
 80073c6:	4607      	mov	r7, r0
 80073c8:	f1b8 0f00 	cmp.w	r8, #0
 80073cc:	d05b      	beq.n	8007486 <_dtoa_r+0xa76>
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	4620      	mov	r0, r4
 80073d2:	f000 fa0f 	bl	80077f4 <_Balloc>
 80073d6:	4605      	mov	r5, r0
 80073d8:	b928      	cbnz	r0, 80073e6 <_dtoa_r+0x9d6>
 80073da:	4b83      	ldr	r3, [pc, #524]	; (80075e8 <_dtoa_r+0xbd8>)
 80073dc:	4602      	mov	r2, r0
 80073de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80073e2:	f7ff bb2e 	b.w	8006a42 <_dtoa_r+0x32>
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	3202      	adds	r2, #2
 80073ea:	0092      	lsls	r2, r2, #2
 80073ec:	f107 010c 	add.w	r1, r7, #12
 80073f0:	300c      	adds	r0, #12
 80073f2:	f7ff fa6e 	bl	80068d2 <memcpy>
 80073f6:	2201      	movs	r2, #1
 80073f8:	4629      	mov	r1, r5
 80073fa:	4620      	mov	r0, r4
 80073fc:	f000 fc54 	bl	8007ca8 <__lshift>
 8007400:	9b00      	ldr	r3, [sp, #0]
 8007402:	3301      	adds	r3, #1
 8007404:	9304      	str	r3, [sp, #16]
 8007406:	e9dd 2300 	ldrd	r2, r3, [sp]
 800740a:	4413      	add	r3, r2
 800740c:	9308      	str	r3, [sp, #32]
 800740e:	9b02      	ldr	r3, [sp, #8]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	46b8      	mov	r8, r7
 8007416:	9306      	str	r3, [sp, #24]
 8007418:	4607      	mov	r7, r0
 800741a:	9b04      	ldr	r3, [sp, #16]
 800741c:	4631      	mov	r1, r6
 800741e:	3b01      	subs	r3, #1
 8007420:	4650      	mov	r0, sl
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	f7ff fa6a 	bl	80068fc <quorem>
 8007428:	4641      	mov	r1, r8
 800742a:	9002      	str	r0, [sp, #8]
 800742c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007430:	4650      	mov	r0, sl
 8007432:	f000 fca5 	bl	8007d80 <__mcmp>
 8007436:	463a      	mov	r2, r7
 8007438:	9005      	str	r0, [sp, #20]
 800743a:	4631      	mov	r1, r6
 800743c:	4620      	mov	r0, r4
 800743e:	f000 fcbb 	bl	8007db8 <__mdiff>
 8007442:	68c2      	ldr	r2, [r0, #12]
 8007444:	4605      	mov	r5, r0
 8007446:	bb02      	cbnz	r2, 800748a <_dtoa_r+0xa7a>
 8007448:	4601      	mov	r1, r0
 800744a:	4650      	mov	r0, sl
 800744c:	f000 fc98 	bl	8007d80 <__mcmp>
 8007450:	4602      	mov	r2, r0
 8007452:	4629      	mov	r1, r5
 8007454:	4620      	mov	r0, r4
 8007456:	9209      	str	r2, [sp, #36]	; 0x24
 8007458:	f000 fa0c 	bl	8007874 <_Bfree>
 800745c:	9b07      	ldr	r3, [sp, #28]
 800745e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007460:	9d04      	ldr	r5, [sp, #16]
 8007462:	ea43 0102 	orr.w	r1, r3, r2
 8007466:	9b06      	ldr	r3, [sp, #24]
 8007468:	4319      	orrs	r1, r3
 800746a:	d110      	bne.n	800748e <_dtoa_r+0xa7e>
 800746c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007470:	d029      	beq.n	80074c6 <_dtoa_r+0xab6>
 8007472:	9b05      	ldr	r3, [sp, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	dd02      	ble.n	800747e <_dtoa_r+0xa6e>
 8007478:	9b02      	ldr	r3, [sp, #8]
 800747a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	f883 9000 	strb.w	r9, [r3]
 8007484:	e774      	b.n	8007370 <_dtoa_r+0x960>
 8007486:	4638      	mov	r0, r7
 8007488:	e7ba      	b.n	8007400 <_dtoa_r+0x9f0>
 800748a:	2201      	movs	r2, #1
 800748c:	e7e1      	b.n	8007452 <_dtoa_r+0xa42>
 800748e:	9b05      	ldr	r3, [sp, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	db04      	blt.n	800749e <_dtoa_r+0xa8e>
 8007494:	9907      	ldr	r1, [sp, #28]
 8007496:	430b      	orrs	r3, r1
 8007498:	9906      	ldr	r1, [sp, #24]
 800749a:	430b      	orrs	r3, r1
 800749c:	d120      	bne.n	80074e0 <_dtoa_r+0xad0>
 800749e:	2a00      	cmp	r2, #0
 80074a0:	dded      	ble.n	800747e <_dtoa_r+0xa6e>
 80074a2:	4651      	mov	r1, sl
 80074a4:	2201      	movs	r2, #1
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 fbfe 	bl	8007ca8 <__lshift>
 80074ac:	4631      	mov	r1, r6
 80074ae:	4682      	mov	sl, r0
 80074b0:	f000 fc66 	bl	8007d80 <__mcmp>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	dc03      	bgt.n	80074c0 <_dtoa_r+0xab0>
 80074b8:	d1e1      	bne.n	800747e <_dtoa_r+0xa6e>
 80074ba:	f019 0f01 	tst.w	r9, #1
 80074be:	d0de      	beq.n	800747e <_dtoa_r+0xa6e>
 80074c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074c4:	d1d8      	bne.n	8007478 <_dtoa_r+0xa68>
 80074c6:	9a01      	ldr	r2, [sp, #4]
 80074c8:	2339      	movs	r3, #57	; 0x39
 80074ca:	7013      	strb	r3, [r2, #0]
 80074cc:	462b      	mov	r3, r5
 80074ce:	461d      	mov	r5, r3
 80074d0:	3b01      	subs	r3, #1
 80074d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074d6:	2a39      	cmp	r2, #57	; 0x39
 80074d8:	d06c      	beq.n	80075b4 <_dtoa_r+0xba4>
 80074da:	3201      	adds	r2, #1
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	e747      	b.n	8007370 <_dtoa_r+0x960>
 80074e0:	2a00      	cmp	r2, #0
 80074e2:	dd07      	ble.n	80074f4 <_dtoa_r+0xae4>
 80074e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074e8:	d0ed      	beq.n	80074c6 <_dtoa_r+0xab6>
 80074ea:	9a01      	ldr	r2, [sp, #4]
 80074ec:	f109 0301 	add.w	r3, r9, #1
 80074f0:	7013      	strb	r3, [r2, #0]
 80074f2:	e73d      	b.n	8007370 <_dtoa_r+0x960>
 80074f4:	9b04      	ldr	r3, [sp, #16]
 80074f6:	9a08      	ldr	r2, [sp, #32]
 80074f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d043      	beq.n	8007588 <_dtoa_r+0xb78>
 8007500:	4651      	mov	r1, sl
 8007502:	2300      	movs	r3, #0
 8007504:	220a      	movs	r2, #10
 8007506:	4620      	mov	r0, r4
 8007508:	f000 f9d6 	bl	80078b8 <__multadd>
 800750c:	45b8      	cmp	r8, r7
 800750e:	4682      	mov	sl, r0
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	f04f 020a 	mov.w	r2, #10
 8007518:	4641      	mov	r1, r8
 800751a:	4620      	mov	r0, r4
 800751c:	d107      	bne.n	800752e <_dtoa_r+0xb1e>
 800751e:	f000 f9cb 	bl	80078b8 <__multadd>
 8007522:	4680      	mov	r8, r0
 8007524:	4607      	mov	r7, r0
 8007526:	9b04      	ldr	r3, [sp, #16]
 8007528:	3301      	adds	r3, #1
 800752a:	9304      	str	r3, [sp, #16]
 800752c:	e775      	b.n	800741a <_dtoa_r+0xa0a>
 800752e:	f000 f9c3 	bl	80078b8 <__multadd>
 8007532:	4639      	mov	r1, r7
 8007534:	4680      	mov	r8, r0
 8007536:	2300      	movs	r3, #0
 8007538:	220a      	movs	r2, #10
 800753a:	4620      	mov	r0, r4
 800753c:	f000 f9bc 	bl	80078b8 <__multadd>
 8007540:	4607      	mov	r7, r0
 8007542:	e7f0      	b.n	8007526 <_dtoa_r+0xb16>
 8007544:	9b04      	ldr	r3, [sp, #16]
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	9d00      	ldr	r5, [sp, #0]
 800754a:	4631      	mov	r1, r6
 800754c:	4650      	mov	r0, sl
 800754e:	f7ff f9d5 	bl	80068fc <quorem>
 8007552:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007556:	9b00      	ldr	r3, [sp, #0]
 8007558:	f805 9b01 	strb.w	r9, [r5], #1
 800755c:	1aea      	subs	r2, r5, r3
 800755e:	9b01      	ldr	r3, [sp, #4]
 8007560:	4293      	cmp	r3, r2
 8007562:	dd07      	ble.n	8007574 <_dtoa_r+0xb64>
 8007564:	4651      	mov	r1, sl
 8007566:	2300      	movs	r3, #0
 8007568:	220a      	movs	r2, #10
 800756a:	4620      	mov	r0, r4
 800756c:	f000 f9a4 	bl	80078b8 <__multadd>
 8007570:	4682      	mov	sl, r0
 8007572:	e7ea      	b.n	800754a <_dtoa_r+0xb3a>
 8007574:	9b01      	ldr	r3, [sp, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	bfc8      	it	gt
 800757a:	461d      	movgt	r5, r3
 800757c:	9b00      	ldr	r3, [sp, #0]
 800757e:	bfd8      	it	le
 8007580:	2501      	movle	r5, #1
 8007582:	441d      	add	r5, r3
 8007584:	f04f 0800 	mov.w	r8, #0
 8007588:	4651      	mov	r1, sl
 800758a:	2201      	movs	r2, #1
 800758c:	4620      	mov	r0, r4
 800758e:	f000 fb8b 	bl	8007ca8 <__lshift>
 8007592:	4631      	mov	r1, r6
 8007594:	4682      	mov	sl, r0
 8007596:	f000 fbf3 	bl	8007d80 <__mcmp>
 800759a:	2800      	cmp	r0, #0
 800759c:	dc96      	bgt.n	80074cc <_dtoa_r+0xabc>
 800759e:	d102      	bne.n	80075a6 <_dtoa_r+0xb96>
 80075a0:	f019 0f01 	tst.w	r9, #1
 80075a4:	d192      	bne.n	80074cc <_dtoa_r+0xabc>
 80075a6:	462b      	mov	r3, r5
 80075a8:	461d      	mov	r5, r3
 80075aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075ae:	2a30      	cmp	r2, #48	; 0x30
 80075b0:	d0fa      	beq.n	80075a8 <_dtoa_r+0xb98>
 80075b2:	e6dd      	b.n	8007370 <_dtoa_r+0x960>
 80075b4:	9a00      	ldr	r2, [sp, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d189      	bne.n	80074ce <_dtoa_r+0xabe>
 80075ba:	f10b 0b01 	add.w	fp, fp, #1
 80075be:	2331      	movs	r3, #49	; 0x31
 80075c0:	e796      	b.n	80074f0 <_dtoa_r+0xae0>
 80075c2:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <_dtoa_r+0xbdc>)
 80075c4:	f7ff ba99 	b.w	8006afa <_dtoa_r+0xea>
 80075c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f47f aa6d 	bne.w	8006aaa <_dtoa_r+0x9a>
 80075d0:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <_dtoa_r+0xbe0>)
 80075d2:	f7ff ba92 	b.w	8006afa <_dtoa_r+0xea>
 80075d6:	9b01      	ldr	r3, [sp, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	dcb5      	bgt.n	8007548 <_dtoa_r+0xb38>
 80075dc:	9b07      	ldr	r3, [sp, #28]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	f73f aeb1 	bgt.w	8007346 <_dtoa_r+0x936>
 80075e4:	e7b0      	b.n	8007548 <_dtoa_r+0xb38>
 80075e6:	bf00      	nop
 80075e8:	0800a339 	.word	0x0800a339
 80075ec:	0800a294 	.word	0x0800a294
 80075f0:	0800a2bd 	.word	0x0800a2bd

080075f4 <_free_r>:
 80075f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075f6:	2900      	cmp	r1, #0
 80075f8:	d044      	beq.n	8007684 <_free_r+0x90>
 80075fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075fe:	9001      	str	r0, [sp, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f1a1 0404 	sub.w	r4, r1, #4
 8007606:	bfb8      	it	lt
 8007608:	18e4      	addlt	r4, r4, r3
 800760a:	f000 f8e7 	bl	80077dc <__malloc_lock>
 800760e:	4a1e      	ldr	r2, [pc, #120]	; (8007688 <_free_r+0x94>)
 8007610:	9801      	ldr	r0, [sp, #4]
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	b933      	cbnz	r3, 8007624 <_free_r+0x30>
 8007616:	6063      	str	r3, [r4, #4]
 8007618:	6014      	str	r4, [r2, #0]
 800761a:	b003      	add	sp, #12
 800761c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007620:	f000 b8e2 	b.w	80077e8 <__malloc_unlock>
 8007624:	42a3      	cmp	r3, r4
 8007626:	d908      	bls.n	800763a <_free_r+0x46>
 8007628:	6825      	ldr	r5, [r4, #0]
 800762a:	1961      	adds	r1, r4, r5
 800762c:	428b      	cmp	r3, r1
 800762e:	bf01      	itttt	eq
 8007630:	6819      	ldreq	r1, [r3, #0]
 8007632:	685b      	ldreq	r3, [r3, #4]
 8007634:	1949      	addeq	r1, r1, r5
 8007636:	6021      	streq	r1, [r4, #0]
 8007638:	e7ed      	b.n	8007616 <_free_r+0x22>
 800763a:	461a      	mov	r2, r3
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	b10b      	cbz	r3, 8007644 <_free_r+0x50>
 8007640:	42a3      	cmp	r3, r4
 8007642:	d9fa      	bls.n	800763a <_free_r+0x46>
 8007644:	6811      	ldr	r1, [r2, #0]
 8007646:	1855      	adds	r5, r2, r1
 8007648:	42a5      	cmp	r5, r4
 800764a:	d10b      	bne.n	8007664 <_free_r+0x70>
 800764c:	6824      	ldr	r4, [r4, #0]
 800764e:	4421      	add	r1, r4
 8007650:	1854      	adds	r4, r2, r1
 8007652:	42a3      	cmp	r3, r4
 8007654:	6011      	str	r1, [r2, #0]
 8007656:	d1e0      	bne.n	800761a <_free_r+0x26>
 8007658:	681c      	ldr	r4, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	6053      	str	r3, [r2, #4]
 800765e:	440c      	add	r4, r1
 8007660:	6014      	str	r4, [r2, #0]
 8007662:	e7da      	b.n	800761a <_free_r+0x26>
 8007664:	d902      	bls.n	800766c <_free_r+0x78>
 8007666:	230c      	movs	r3, #12
 8007668:	6003      	str	r3, [r0, #0]
 800766a:	e7d6      	b.n	800761a <_free_r+0x26>
 800766c:	6825      	ldr	r5, [r4, #0]
 800766e:	1961      	adds	r1, r4, r5
 8007670:	428b      	cmp	r3, r1
 8007672:	bf04      	itt	eq
 8007674:	6819      	ldreq	r1, [r3, #0]
 8007676:	685b      	ldreq	r3, [r3, #4]
 8007678:	6063      	str	r3, [r4, #4]
 800767a:	bf04      	itt	eq
 800767c:	1949      	addeq	r1, r1, r5
 800767e:	6021      	streq	r1, [r4, #0]
 8007680:	6054      	str	r4, [r2, #4]
 8007682:	e7ca      	b.n	800761a <_free_r+0x26>
 8007684:	b003      	add	sp, #12
 8007686:	bd30      	pop	{r4, r5, pc}
 8007688:	200008a4 	.word	0x200008a4

0800768c <malloc>:
 800768c:	4b02      	ldr	r3, [pc, #8]	; (8007698 <malloc+0xc>)
 800768e:	4601      	mov	r1, r0
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	f000 b823 	b.w	80076dc <_malloc_r>
 8007696:	bf00      	nop
 8007698:	20000064 	.word	0x20000064

0800769c <sbrk_aligned>:
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	4e0e      	ldr	r6, [pc, #56]	; (80076d8 <sbrk_aligned+0x3c>)
 80076a0:	460c      	mov	r4, r1
 80076a2:	6831      	ldr	r1, [r6, #0]
 80076a4:	4605      	mov	r5, r0
 80076a6:	b911      	cbnz	r1, 80076ae <sbrk_aligned+0x12>
 80076a8:	f001 fe1a 	bl	80092e0 <_sbrk_r>
 80076ac:	6030      	str	r0, [r6, #0]
 80076ae:	4621      	mov	r1, r4
 80076b0:	4628      	mov	r0, r5
 80076b2:	f001 fe15 	bl	80092e0 <_sbrk_r>
 80076b6:	1c43      	adds	r3, r0, #1
 80076b8:	d00a      	beq.n	80076d0 <sbrk_aligned+0x34>
 80076ba:	1cc4      	adds	r4, r0, #3
 80076bc:	f024 0403 	bic.w	r4, r4, #3
 80076c0:	42a0      	cmp	r0, r4
 80076c2:	d007      	beq.n	80076d4 <sbrk_aligned+0x38>
 80076c4:	1a21      	subs	r1, r4, r0
 80076c6:	4628      	mov	r0, r5
 80076c8:	f001 fe0a 	bl	80092e0 <_sbrk_r>
 80076cc:	3001      	adds	r0, #1
 80076ce:	d101      	bne.n	80076d4 <sbrk_aligned+0x38>
 80076d0:	f04f 34ff 	mov.w	r4, #4294967295
 80076d4:	4620      	mov	r0, r4
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
 80076d8:	200008a8 	.word	0x200008a8

080076dc <_malloc_r>:
 80076dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e0:	1ccd      	adds	r5, r1, #3
 80076e2:	f025 0503 	bic.w	r5, r5, #3
 80076e6:	3508      	adds	r5, #8
 80076e8:	2d0c      	cmp	r5, #12
 80076ea:	bf38      	it	cc
 80076ec:	250c      	movcc	r5, #12
 80076ee:	2d00      	cmp	r5, #0
 80076f0:	4607      	mov	r7, r0
 80076f2:	db01      	blt.n	80076f8 <_malloc_r+0x1c>
 80076f4:	42a9      	cmp	r1, r5
 80076f6:	d905      	bls.n	8007704 <_malloc_r+0x28>
 80076f8:	230c      	movs	r3, #12
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	2600      	movs	r6, #0
 80076fe:	4630      	mov	r0, r6
 8007700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007704:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077d8 <_malloc_r+0xfc>
 8007708:	f000 f868 	bl	80077dc <__malloc_lock>
 800770c:	f8d8 3000 	ldr.w	r3, [r8]
 8007710:	461c      	mov	r4, r3
 8007712:	bb5c      	cbnz	r4, 800776c <_malloc_r+0x90>
 8007714:	4629      	mov	r1, r5
 8007716:	4638      	mov	r0, r7
 8007718:	f7ff ffc0 	bl	800769c <sbrk_aligned>
 800771c:	1c43      	adds	r3, r0, #1
 800771e:	4604      	mov	r4, r0
 8007720:	d155      	bne.n	80077ce <_malloc_r+0xf2>
 8007722:	f8d8 4000 	ldr.w	r4, [r8]
 8007726:	4626      	mov	r6, r4
 8007728:	2e00      	cmp	r6, #0
 800772a:	d145      	bne.n	80077b8 <_malloc_r+0xdc>
 800772c:	2c00      	cmp	r4, #0
 800772e:	d048      	beq.n	80077c2 <_malloc_r+0xe6>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	4631      	mov	r1, r6
 8007734:	4638      	mov	r0, r7
 8007736:	eb04 0903 	add.w	r9, r4, r3
 800773a:	f001 fdd1 	bl	80092e0 <_sbrk_r>
 800773e:	4581      	cmp	r9, r0
 8007740:	d13f      	bne.n	80077c2 <_malloc_r+0xe6>
 8007742:	6821      	ldr	r1, [r4, #0]
 8007744:	1a6d      	subs	r5, r5, r1
 8007746:	4629      	mov	r1, r5
 8007748:	4638      	mov	r0, r7
 800774a:	f7ff ffa7 	bl	800769c <sbrk_aligned>
 800774e:	3001      	adds	r0, #1
 8007750:	d037      	beq.n	80077c2 <_malloc_r+0xe6>
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	442b      	add	r3, r5
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	f8d8 3000 	ldr.w	r3, [r8]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d038      	beq.n	80077d2 <_malloc_r+0xf6>
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	42a2      	cmp	r2, r4
 8007764:	d12b      	bne.n	80077be <_malloc_r+0xe2>
 8007766:	2200      	movs	r2, #0
 8007768:	605a      	str	r2, [r3, #4]
 800776a:	e00f      	b.n	800778c <_malloc_r+0xb0>
 800776c:	6822      	ldr	r2, [r4, #0]
 800776e:	1b52      	subs	r2, r2, r5
 8007770:	d41f      	bmi.n	80077b2 <_malloc_r+0xd6>
 8007772:	2a0b      	cmp	r2, #11
 8007774:	d917      	bls.n	80077a6 <_malloc_r+0xca>
 8007776:	1961      	adds	r1, r4, r5
 8007778:	42a3      	cmp	r3, r4
 800777a:	6025      	str	r5, [r4, #0]
 800777c:	bf18      	it	ne
 800777e:	6059      	strne	r1, [r3, #4]
 8007780:	6863      	ldr	r3, [r4, #4]
 8007782:	bf08      	it	eq
 8007784:	f8c8 1000 	streq.w	r1, [r8]
 8007788:	5162      	str	r2, [r4, r5]
 800778a:	604b      	str	r3, [r1, #4]
 800778c:	4638      	mov	r0, r7
 800778e:	f104 060b 	add.w	r6, r4, #11
 8007792:	f000 f829 	bl	80077e8 <__malloc_unlock>
 8007796:	f026 0607 	bic.w	r6, r6, #7
 800779a:	1d23      	adds	r3, r4, #4
 800779c:	1af2      	subs	r2, r6, r3
 800779e:	d0ae      	beq.n	80076fe <_malloc_r+0x22>
 80077a0:	1b9b      	subs	r3, r3, r6
 80077a2:	50a3      	str	r3, [r4, r2]
 80077a4:	e7ab      	b.n	80076fe <_malloc_r+0x22>
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	6862      	ldr	r2, [r4, #4]
 80077aa:	d1dd      	bne.n	8007768 <_malloc_r+0x8c>
 80077ac:	f8c8 2000 	str.w	r2, [r8]
 80077b0:	e7ec      	b.n	800778c <_malloc_r+0xb0>
 80077b2:	4623      	mov	r3, r4
 80077b4:	6864      	ldr	r4, [r4, #4]
 80077b6:	e7ac      	b.n	8007712 <_malloc_r+0x36>
 80077b8:	4634      	mov	r4, r6
 80077ba:	6876      	ldr	r6, [r6, #4]
 80077bc:	e7b4      	b.n	8007728 <_malloc_r+0x4c>
 80077be:	4613      	mov	r3, r2
 80077c0:	e7cc      	b.n	800775c <_malloc_r+0x80>
 80077c2:	230c      	movs	r3, #12
 80077c4:	603b      	str	r3, [r7, #0]
 80077c6:	4638      	mov	r0, r7
 80077c8:	f000 f80e 	bl	80077e8 <__malloc_unlock>
 80077cc:	e797      	b.n	80076fe <_malloc_r+0x22>
 80077ce:	6025      	str	r5, [r4, #0]
 80077d0:	e7dc      	b.n	800778c <_malloc_r+0xb0>
 80077d2:	605b      	str	r3, [r3, #4]
 80077d4:	deff      	udf	#255	; 0xff
 80077d6:	bf00      	nop
 80077d8:	200008a4 	.word	0x200008a4

080077dc <__malloc_lock>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__malloc_lock+0x8>)
 80077de:	f7ff b876 	b.w	80068ce <__retarget_lock_acquire_recursive>
 80077e2:	bf00      	nop
 80077e4:	200008a0 	.word	0x200008a0

080077e8 <__malloc_unlock>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__malloc_unlock+0x8>)
 80077ea:	f7ff b871 	b.w	80068d0 <__retarget_lock_release_recursive>
 80077ee:	bf00      	nop
 80077f0:	200008a0 	.word	0x200008a0

080077f4 <_Balloc>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	69c6      	ldr	r6, [r0, #28]
 80077f8:	4604      	mov	r4, r0
 80077fa:	460d      	mov	r5, r1
 80077fc:	b976      	cbnz	r6, 800781c <_Balloc+0x28>
 80077fe:	2010      	movs	r0, #16
 8007800:	f7ff ff44 	bl	800768c <malloc>
 8007804:	4602      	mov	r2, r0
 8007806:	61e0      	str	r0, [r4, #28]
 8007808:	b920      	cbnz	r0, 8007814 <_Balloc+0x20>
 800780a:	4b18      	ldr	r3, [pc, #96]	; (800786c <_Balloc+0x78>)
 800780c:	4818      	ldr	r0, [pc, #96]	; (8007870 <_Balloc+0x7c>)
 800780e:	216b      	movs	r1, #107	; 0x6b
 8007810:	f001 fd7e 	bl	8009310 <__assert_func>
 8007814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007818:	6006      	str	r6, [r0, #0]
 800781a:	60c6      	str	r6, [r0, #12]
 800781c:	69e6      	ldr	r6, [r4, #28]
 800781e:	68f3      	ldr	r3, [r6, #12]
 8007820:	b183      	cbz	r3, 8007844 <_Balloc+0x50>
 8007822:	69e3      	ldr	r3, [r4, #28]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800782a:	b9b8      	cbnz	r0, 800785c <_Balloc+0x68>
 800782c:	2101      	movs	r1, #1
 800782e:	fa01 f605 	lsl.w	r6, r1, r5
 8007832:	1d72      	adds	r2, r6, #5
 8007834:	0092      	lsls	r2, r2, #2
 8007836:	4620      	mov	r0, r4
 8007838:	f001 fd88 	bl	800934c <_calloc_r>
 800783c:	b160      	cbz	r0, 8007858 <_Balloc+0x64>
 800783e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007842:	e00e      	b.n	8007862 <_Balloc+0x6e>
 8007844:	2221      	movs	r2, #33	; 0x21
 8007846:	2104      	movs	r1, #4
 8007848:	4620      	mov	r0, r4
 800784a:	f001 fd7f 	bl	800934c <_calloc_r>
 800784e:	69e3      	ldr	r3, [r4, #28]
 8007850:	60f0      	str	r0, [r6, #12]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e4      	bne.n	8007822 <_Balloc+0x2e>
 8007858:	2000      	movs	r0, #0
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	6802      	ldr	r2, [r0, #0]
 800785e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007862:	2300      	movs	r3, #0
 8007864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007868:	e7f7      	b.n	800785a <_Balloc+0x66>
 800786a:	bf00      	nop
 800786c:	0800a2ca 	.word	0x0800a2ca
 8007870:	0800a34a 	.word	0x0800a34a

08007874 <_Bfree>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	69c6      	ldr	r6, [r0, #28]
 8007878:	4605      	mov	r5, r0
 800787a:	460c      	mov	r4, r1
 800787c:	b976      	cbnz	r6, 800789c <_Bfree+0x28>
 800787e:	2010      	movs	r0, #16
 8007880:	f7ff ff04 	bl	800768c <malloc>
 8007884:	4602      	mov	r2, r0
 8007886:	61e8      	str	r0, [r5, #28]
 8007888:	b920      	cbnz	r0, 8007894 <_Bfree+0x20>
 800788a:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <_Bfree+0x3c>)
 800788c:	4809      	ldr	r0, [pc, #36]	; (80078b4 <_Bfree+0x40>)
 800788e:	218f      	movs	r1, #143	; 0x8f
 8007890:	f001 fd3e 	bl	8009310 <__assert_func>
 8007894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007898:	6006      	str	r6, [r0, #0]
 800789a:	60c6      	str	r6, [r0, #12]
 800789c:	b13c      	cbz	r4, 80078ae <_Bfree+0x3a>
 800789e:	69eb      	ldr	r3, [r5, #28]
 80078a0:	6862      	ldr	r2, [r4, #4]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078a8:	6021      	str	r1, [r4, #0]
 80078aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078ae:	bd70      	pop	{r4, r5, r6, pc}
 80078b0:	0800a2ca 	.word	0x0800a2ca
 80078b4:	0800a34a 	.word	0x0800a34a

080078b8 <__multadd>:
 80078b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078bc:	690d      	ldr	r5, [r1, #16]
 80078be:	4607      	mov	r7, r0
 80078c0:	460c      	mov	r4, r1
 80078c2:	461e      	mov	r6, r3
 80078c4:	f101 0c14 	add.w	ip, r1, #20
 80078c8:	2000      	movs	r0, #0
 80078ca:	f8dc 3000 	ldr.w	r3, [ip]
 80078ce:	b299      	uxth	r1, r3
 80078d0:	fb02 6101 	mla	r1, r2, r1, r6
 80078d4:	0c1e      	lsrs	r6, r3, #16
 80078d6:	0c0b      	lsrs	r3, r1, #16
 80078d8:	fb02 3306 	mla	r3, r2, r6, r3
 80078dc:	b289      	uxth	r1, r1
 80078de:	3001      	adds	r0, #1
 80078e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078e4:	4285      	cmp	r5, r0
 80078e6:	f84c 1b04 	str.w	r1, [ip], #4
 80078ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078ee:	dcec      	bgt.n	80078ca <__multadd+0x12>
 80078f0:	b30e      	cbz	r6, 8007936 <__multadd+0x7e>
 80078f2:	68a3      	ldr	r3, [r4, #8]
 80078f4:	42ab      	cmp	r3, r5
 80078f6:	dc19      	bgt.n	800792c <__multadd+0x74>
 80078f8:	6861      	ldr	r1, [r4, #4]
 80078fa:	4638      	mov	r0, r7
 80078fc:	3101      	adds	r1, #1
 80078fe:	f7ff ff79 	bl	80077f4 <_Balloc>
 8007902:	4680      	mov	r8, r0
 8007904:	b928      	cbnz	r0, 8007912 <__multadd+0x5a>
 8007906:	4602      	mov	r2, r0
 8007908:	4b0c      	ldr	r3, [pc, #48]	; (800793c <__multadd+0x84>)
 800790a:	480d      	ldr	r0, [pc, #52]	; (8007940 <__multadd+0x88>)
 800790c:	21ba      	movs	r1, #186	; 0xba
 800790e:	f001 fcff 	bl	8009310 <__assert_func>
 8007912:	6922      	ldr	r2, [r4, #16]
 8007914:	3202      	adds	r2, #2
 8007916:	f104 010c 	add.w	r1, r4, #12
 800791a:	0092      	lsls	r2, r2, #2
 800791c:	300c      	adds	r0, #12
 800791e:	f7fe ffd8 	bl	80068d2 <memcpy>
 8007922:	4621      	mov	r1, r4
 8007924:	4638      	mov	r0, r7
 8007926:	f7ff ffa5 	bl	8007874 <_Bfree>
 800792a:	4644      	mov	r4, r8
 800792c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007930:	3501      	adds	r5, #1
 8007932:	615e      	str	r6, [r3, #20]
 8007934:	6125      	str	r5, [r4, #16]
 8007936:	4620      	mov	r0, r4
 8007938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800793c:	0800a339 	.word	0x0800a339
 8007940:	0800a34a 	.word	0x0800a34a

08007944 <__s2b>:
 8007944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007948:	460c      	mov	r4, r1
 800794a:	4615      	mov	r5, r2
 800794c:	461f      	mov	r7, r3
 800794e:	2209      	movs	r2, #9
 8007950:	3308      	adds	r3, #8
 8007952:	4606      	mov	r6, r0
 8007954:	fb93 f3f2 	sdiv	r3, r3, r2
 8007958:	2100      	movs	r1, #0
 800795a:	2201      	movs	r2, #1
 800795c:	429a      	cmp	r2, r3
 800795e:	db09      	blt.n	8007974 <__s2b+0x30>
 8007960:	4630      	mov	r0, r6
 8007962:	f7ff ff47 	bl	80077f4 <_Balloc>
 8007966:	b940      	cbnz	r0, 800797a <__s2b+0x36>
 8007968:	4602      	mov	r2, r0
 800796a:	4b19      	ldr	r3, [pc, #100]	; (80079d0 <__s2b+0x8c>)
 800796c:	4819      	ldr	r0, [pc, #100]	; (80079d4 <__s2b+0x90>)
 800796e:	21d3      	movs	r1, #211	; 0xd3
 8007970:	f001 fcce 	bl	8009310 <__assert_func>
 8007974:	0052      	lsls	r2, r2, #1
 8007976:	3101      	adds	r1, #1
 8007978:	e7f0      	b.n	800795c <__s2b+0x18>
 800797a:	9b08      	ldr	r3, [sp, #32]
 800797c:	6143      	str	r3, [r0, #20]
 800797e:	2d09      	cmp	r5, #9
 8007980:	f04f 0301 	mov.w	r3, #1
 8007984:	6103      	str	r3, [r0, #16]
 8007986:	dd16      	ble.n	80079b6 <__s2b+0x72>
 8007988:	f104 0909 	add.w	r9, r4, #9
 800798c:	46c8      	mov	r8, r9
 800798e:	442c      	add	r4, r5
 8007990:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007994:	4601      	mov	r1, r0
 8007996:	3b30      	subs	r3, #48	; 0x30
 8007998:	220a      	movs	r2, #10
 800799a:	4630      	mov	r0, r6
 800799c:	f7ff ff8c 	bl	80078b8 <__multadd>
 80079a0:	45a0      	cmp	r8, r4
 80079a2:	d1f5      	bne.n	8007990 <__s2b+0x4c>
 80079a4:	f1a5 0408 	sub.w	r4, r5, #8
 80079a8:	444c      	add	r4, r9
 80079aa:	1b2d      	subs	r5, r5, r4
 80079ac:	1963      	adds	r3, r4, r5
 80079ae:	42bb      	cmp	r3, r7
 80079b0:	db04      	blt.n	80079bc <__s2b+0x78>
 80079b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b6:	340a      	adds	r4, #10
 80079b8:	2509      	movs	r5, #9
 80079ba:	e7f6      	b.n	80079aa <__s2b+0x66>
 80079bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079c0:	4601      	mov	r1, r0
 80079c2:	3b30      	subs	r3, #48	; 0x30
 80079c4:	220a      	movs	r2, #10
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7ff ff76 	bl	80078b8 <__multadd>
 80079cc:	e7ee      	b.n	80079ac <__s2b+0x68>
 80079ce:	bf00      	nop
 80079d0:	0800a339 	.word	0x0800a339
 80079d4:	0800a34a 	.word	0x0800a34a

080079d8 <__hi0bits>:
 80079d8:	0c03      	lsrs	r3, r0, #16
 80079da:	041b      	lsls	r3, r3, #16
 80079dc:	b9d3      	cbnz	r3, 8007a14 <__hi0bits+0x3c>
 80079de:	0400      	lsls	r0, r0, #16
 80079e0:	2310      	movs	r3, #16
 80079e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80079e6:	bf04      	itt	eq
 80079e8:	0200      	lsleq	r0, r0, #8
 80079ea:	3308      	addeq	r3, #8
 80079ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079f0:	bf04      	itt	eq
 80079f2:	0100      	lsleq	r0, r0, #4
 80079f4:	3304      	addeq	r3, #4
 80079f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079fa:	bf04      	itt	eq
 80079fc:	0080      	lsleq	r0, r0, #2
 80079fe:	3302      	addeq	r3, #2
 8007a00:	2800      	cmp	r0, #0
 8007a02:	db05      	blt.n	8007a10 <__hi0bits+0x38>
 8007a04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007a08:	f103 0301 	add.w	r3, r3, #1
 8007a0c:	bf08      	it	eq
 8007a0e:	2320      	moveq	r3, #32
 8007a10:	4618      	mov	r0, r3
 8007a12:	4770      	bx	lr
 8007a14:	2300      	movs	r3, #0
 8007a16:	e7e4      	b.n	80079e2 <__hi0bits+0xa>

08007a18 <__lo0bits>:
 8007a18:	6803      	ldr	r3, [r0, #0]
 8007a1a:	f013 0207 	ands.w	r2, r3, #7
 8007a1e:	d00c      	beq.n	8007a3a <__lo0bits+0x22>
 8007a20:	07d9      	lsls	r1, r3, #31
 8007a22:	d422      	bmi.n	8007a6a <__lo0bits+0x52>
 8007a24:	079a      	lsls	r2, r3, #30
 8007a26:	bf49      	itett	mi
 8007a28:	085b      	lsrmi	r3, r3, #1
 8007a2a:	089b      	lsrpl	r3, r3, #2
 8007a2c:	6003      	strmi	r3, [r0, #0]
 8007a2e:	2201      	movmi	r2, #1
 8007a30:	bf5c      	itt	pl
 8007a32:	6003      	strpl	r3, [r0, #0]
 8007a34:	2202      	movpl	r2, #2
 8007a36:	4610      	mov	r0, r2
 8007a38:	4770      	bx	lr
 8007a3a:	b299      	uxth	r1, r3
 8007a3c:	b909      	cbnz	r1, 8007a42 <__lo0bits+0x2a>
 8007a3e:	0c1b      	lsrs	r3, r3, #16
 8007a40:	2210      	movs	r2, #16
 8007a42:	b2d9      	uxtb	r1, r3
 8007a44:	b909      	cbnz	r1, 8007a4a <__lo0bits+0x32>
 8007a46:	3208      	adds	r2, #8
 8007a48:	0a1b      	lsrs	r3, r3, #8
 8007a4a:	0719      	lsls	r1, r3, #28
 8007a4c:	bf04      	itt	eq
 8007a4e:	091b      	lsreq	r3, r3, #4
 8007a50:	3204      	addeq	r2, #4
 8007a52:	0799      	lsls	r1, r3, #30
 8007a54:	bf04      	itt	eq
 8007a56:	089b      	lsreq	r3, r3, #2
 8007a58:	3202      	addeq	r2, #2
 8007a5a:	07d9      	lsls	r1, r3, #31
 8007a5c:	d403      	bmi.n	8007a66 <__lo0bits+0x4e>
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	f102 0201 	add.w	r2, r2, #1
 8007a64:	d003      	beq.n	8007a6e <__lo0bits+0x56>
 8007a66:	6003      	str	r3, [r0, #0]
 8007a68:	e7e5      	b.n	8007a36 <__lo0bits+0x1e>
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	e7e3      	b.n	8007a36 <__lo0bits+0x1e>
 8007a6e:	2220      	movs	r2, #32
 8007a70:	e7e1      	b.n	8007a36 <__lo0bits+0x1e>
	...

08007a74 <__i2b>:
 8007a74:	b510      	push	{r4, lr}
 8007a76:	460c      	mov	r4, r1
 8007a78:	2101      	movs	r1, #1
 8007a7a:	f7ff febb 	bl	80077f4 <_Balloc>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	b928      	cbnz	r0, 8007a8e <__i2b+0x1a>
 8007a82:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <__i2b+0x24>)
 8007a84:	4805      	ldr	r0, [pc, #20]	; (8007a9c <__i2b+0x28>)
 8007a86:	f240 1145 	movw	r1, #325	; 0x145
 8007a8a:	f001 fc41 	bl	8009310 <__assert_func>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	6144      	str	r4, [r0, #20]
 8007a92:	6103      	str	r3, [r0, #16]
 8007a94:	bd10      	pop	{r4, pc}
 8007a96:	bf00      	nop
 8007a98:	0800a339 	.word	0x0800a339
 8007a9c:	0800a34a 	.word	0x0800a34a

08007aa0 <__multiply>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	4691      	mov	r9, r2
 8007aa6:	690a      	ldr	r2, [r1, #16]
 8007aa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	bfb8      	it	lt
 8007ab0:	460b      	movlt	r3, r1
 8007ab2:	460c      	mov	r4, r1
 8007ab4:	bfbc      	itt	lt
 8007ab6:	464c      	movlt	r4, r9
 8007ab8:	4699      	movlt	r9, r3
 8007aba:	6927      	ldr	r7, [r4, #16]
 8007abc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ac0:	68a3      	ldr	r3, [r4, #8]
 8007ac2:	6861      	ldr	r1, [r4, #4]
 8007ac4:	eb07 060a 	add.w	r6, r7, sl
 8007ac8:	42b3      	cmp	r3, r6
 8007aca:	b085      	sub	sp, #20
 8007acc:	bfb8      	it	lt
 8007ace:	3101      	addlt	r1, #1
 8007ad0:	f7ff fe90 	bl	80077f4 <_Balloc>
 8007ad4:	b930      	cbnz	r0, 8007ae4 <__multiply+0x44>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	4b44      	ldr	r3, [pc, #272]	; (8007bec <__multiply+0x14c>)
 8007ada:	4845      	ldr	r0, [pc, #276]	; (8007bf0 <__multiply+0x150>)
 8007adc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007ae0:	f001 fc16 	bl	8009310 <__assert_func>
 8007ae4:	f100 0514 	add.w	r5, r0, #20
 8007ae8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007aec:	462b      	mov	r3, r5
 8007aee:	2200      	movs	r2, #0
 8007af0:	4543      	cmp	r3, r8
 8007af2:	d321      	bcc.n	8007b38 <__multiply+0x98>
 8007af4:	f104 0314 	add.w	r3, r4, #20
 8007af8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007afc:	f109 0314 	add.w	r3, r9, #20
 8007b00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b04:	9202      	str	r2, [sp, #8]
 8007b06:	1b3a      	subs	r2, r7, r4
 8007b08:	3a15      	subs	r2, #21
 8007b0a:	f022 0203 	bic.w	r2, r2, #3
 8007b0e:	3204      	adds	r2, #4
 8007b10:	f104 0115 	add.w	r1, r4, #21
 8007b14:	428f      	cmp	r7, r1
 8007b16:	bf38      	it	cc
 8007b18:	2204      	movcc	r2, #4
 8007b1a:	9201      	str	r2, [sp, #4]
 8007b1c:	9a02      	ldr	r2, [sp, #8]
 8007b1e:	9303      	str	r3, [sp, #12]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d80c      	bhi.n	8007b3e <__multiply+0x9e>
 8007b24:	2e00      	cmp	r6, #0
 8007b26:	dd03      	ble.n	8007b30 <__multiply+0x90>
 8007b28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d05b      	beq.n	8007be8 <__multiply+0x148>
 8007b30:	6106      	str	r6, [r0, #16]
 8007b32:	b005      	add	sp, #20
 8007b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b38:	f843 2b04 	str.w	r2, [r3], #4
 8007b3c:	e7d8      	b.n	8007af0 <__multiply+0x50>
 8007b3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b42:	f1ba 0f00 	cmp.w	sl, #0
 8007b46:	d024      	beq.n	8007b92 <__multiply+0xf2>
 8007b48:	f104 0e14 	add.w	lr, r4, #20
 8007b4c:	46a9      	mov	r9, r5
 8007b4e:	f04f 0c00 	mov.w	ip, #0
 8007b52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b56:	f8d9 1000 	ldr.w	r1, [r9]
 8007b5a:	fa1f fb82 	uxth.w	fp, r2
 8007b5e:	b289      	uxth	r1, r1
 8007b60:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b68:	f8d9 2000 	ldr.w	r2, [r9]
 8007b6c:	4461      	add	r1, ip
 8007b6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b72:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b7a:	b289      	uxth	r1, r1
 8007b7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b80:	4577      	cmp	r7, lr
 8007b82:	f849 1b04 	str.w	r1, [r9], #4
 8007b86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b8a:	d8e2      	bhi.n	8007b52 <__multiply+0xb2>
 8007b8c:	9a01      	ldr	r2, [sp, #4]
 8007b8e:	f845 c002 	str.w	ip, [r5, r2]
 8007b92:	9a03      	ldr	r2, [sp, #12]
 8007b94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	f1b9 0f00 	cmp.w	r9, #0
 8007b9e:	d021      	beq.n	8007be4 <__multiply+0x144>
 8007ba0:	6829      	ldr	r1, [r5, #0]
 8007ba2:	f104 0c14 	add.w	ip, r4, #20
 8007ba6:	46ae      	mov	lr, r5
 8007ba8:	f04f 0a00 	mov.w	sl, #0
 8007bac:	f8bc b000 	ldrh.w	fp, [ip]
 8007bb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007bb4:	fb09 220b 	mla	r2, r9, fp, r2
 8007bb8:	4452      	add	r2, sl
 8007bba:	b289      	uxth	r1, r1
 8007bbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007bc0:	f84e 1b04 	str.w	r1, [lr], #4
 8007bc4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007bc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bcc:	f8be 1000 	ldrh.w	r1, [lr]
 8007bd0:	fb09 110a 	mla	r1, r9, sl, r1
 8007bd4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007bd8:	4567      	cmp	r7, ip
 8007bda:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bde:	d8e5      	bhi.n	8007bac <__multiply+0x10c>
 8007be0:	9a01      	ldr	r2, [sp, #4]
 8007be2:	50a9      	str	r1, [r5, r2]
 8007be4:	3504      	adds	r5, #4
 8007be6:	e799      	b.n	8007b1c <__multiply+0x7c>
 8007be8:	3e01      	subs	r6, #1
 8007bea:	e79b      	b.n	8007b24 <__multiply+0x84>
 8007bec:	0800a339 	.word	0x0800a339
 8007bf0:	0800a34a 	.word	0x0800a34a

08007bf4 <__pow5mult>:
 8007bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf8:	4615      	mov	r5, r2
 8007bfa:	f012 0203 	ands.w	r2, r2, #3
 8007bfe:	4606      	mov	r6, r0
 8007c00:	460f      	mov	r7, r1
 8007c02:	d007      	beq.n	8007c14 <__pow5mult+0x20>
 8007c04:	4c25      	ldr	r4, [pc, #148]	; (8007c9c <__pow5mult+0xa8>)
 8007c06:	3a01      	subs	r2, #1
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c0e:	f7ff fe53 	bl	80078b8 <__multadd>
 8007c12:	4607      	mov	r7, r0
 8007c14:	10ad      	asrs	r5, r5, #2
 8007c16:	d03d      	beq.n	8007c94 <__pow5mult+0xa0>
 8007c18:	69f4      	ldr	r4, [r6, #28]
 8007c1a:	b97c      	cbnz	r4, 8007c3c <__pow5mult+0x48>
 8007c1c:	2010      	movs	r0, #16
 8007c1e:	f7ff fd35 	bl	800768c <malloc>
 8007c22:	4602      	mov	r2, r0
 8007c24:	61f0      	str	r0, [r6, #28]
 8007c26:	b928      	cbnz	r0, 8007c34 <__pow5mult+0x40>
 8007c28:	4b1d      	ldr	r3, [pc, #116]	; (8007ca0 <__pow5mult+0xac>)
 8007c2a:	481e      	ldr	r0, [pc, #120]	; (8007ca4 <__pow5mult+0xb0>)
 8007c2c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007c30:	f001 fb6e 	bl	8009310 <__assert_func>
 8007c34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c38:	6004      	str	r4, [r0, #0]
 8007c3a:	60c4      	str	r4, [r0, #12]
 8007c3c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007c40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c44:	b94c      	cbnz	r4, 8007c5a <__pow5mult+0x66>
 8007c46:	f240 2171 	movw	r1, #625	; 0x271
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7ff ff12 	bl	8007a74 <__i2b>
 8007c50:	2300      	movs	r3, #0
 8007c52:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c56:	4604      	mov	r4, r0
 8007c58:	6003      	str	r3, [r0, #0]
 8007c5a:	f04f 0900 	mov.w	r9, #0
 8007c5e:	07eb      	lsls	r3, r5, #31
 8007c60:	d50a      	bpl.n	8007c78 <__pow5mult+0x84>
 8007c62:	4639      	mov	r1, r7
 8007c64:	4622      	mov	r2, r4
 8007c66:	4630      	mov	r0, r6
 8007c68:	f7ff ff1a 	bl	8007aa0 <__multiply>
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	4680      	mov	r8, r0
 8007c70:	4630      	mov	r0, r6
 8007c72:	f7ff fdff 	bl	8007874 <_Bfree>
 8007c76:	4647      	mov	r7, r8
 8007c78:	106d      	asrs	r5, r5, #1
 8007c7a:	d00b      	beq.n	8007c94 <__pow5mult+0xa0>
 8007c7c:	6820      	ldr	r0, [r4, #0]
 8007c7e:	b938      	cbnz	r0, 8007c90 <__pow5mult+0x9c>
 8007c80:	4622      	mov	r2, r4
 8007c82:	4621      	mov	r1, r4
 8007c84:	4630      	mov	r0, r6
 8007c86:	f7ff ff0b 	bl	8007aa0 <__multiply>
 8007c8a:	6020      	str	r0, [r4, #0]
 8007c8c:	f8c0 9000 	str.w	r9, [r0]
 8007c90:	4604      	mov	r4, r0
 8007c92:	e7e4      	b.n	8007c5e <__pow5mult+0x6a>
 8007c94:	4638      	mov	r0, r7
 8007c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c9a:	bf00      	nop
 8007c9c:	0800a498 	.word	0x0800a498
 8007ca0:	0800a2ca 	.word	0x0800a2ca
 8007ca4:	0800a34a 	.word	0x0800a34a

08007ca8 <__lshift>:
 8007ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	460c      	mov	r4, r1
 8007cae:	6849      	ldr	r1, [r1, #4]
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cb6:	68a3      	ldr	r3, [r4, #8]
 8007cb8:	4607      	mov	r7, r0
 8007cba:	4691      	mov	r9, r2
 8007cbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cc0:	f108 0601 	add.w	r6, r8, #1
 8007cc4:	42b3      	cmp	r3, r6
 8007cc6:	db0b      	blt.n	8007ce0 <__lshift+0x38>
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f7ff fd93 	bl	80077f4 <_Balloc>
 8007cce:	4605      	mov	r5, r0
 8007cd0:	b948      	cbnz	r0, 8007ce6 <__lshift+0x3e>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	4b28      	ldr	r3, [pc, #160]	; (8007d78 <__lshift+0xd0>)
 8007cd6:	4829      	ldr	r0, [pc, #164]	; (8007d7c <__lshift+0xd4>)
 8007cd8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007cdc:	f001 fb18 	bl	8009310 <__assert_func>
 8007ce0:	3101      	adds	r1, #1
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	e7ee      	b.n	8007cc4 <__lshift+0x1c>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f100 0114 	add.w	r1, r0, #20
 8007cec:	f100 0210 	add.w	r2, r0, #16
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	4553      	cmp	r3, sl
 8007cf4:	db33      	blt.n	8007d5e <__lshift+0xb6>
 8007cf6:	6920      	ldr	r0, [r4, #16]
 8007cf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cfc:	f104 0314 	add.w	r3, r4, #20
 8007d00:	f019 091f 	ands.w	r9, r9, #31
 8007d04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d0c:	d02b      	beq.n	8007d66 <__lshift+0xbe>
 8007d0e:	f1c9 0e20 	rsb	lr, r9, #32
 8007d12:	468a      	mov	sl, r1
 8007d14:	2200      	movs	r2, #0
 8007d16:	6818      	ldr	r0, [r3, #0]
 8007d18:	fa00 f009 	lsl.w	r0, r0, r9
 8007d1c:	4310      	orrs	r0, r2
 8007d1e:	f84a 0b04 	str.w	r0, [sl], #4
 8007d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d26:	459c      	cmp	ip, r3
 8007d28:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d2c:	d8f3      	bhi.n	8007d16 <__lshift+0x6e>
 8007d2e:	ebac 0304 	sub.w	r3, ip, r4
 8007d32:	3b15      	subs	r3, #21
 8007d34:	f023 0303 	bic.w	r3, r3, #3
 8007d38:	3304      	adds	r3, #4
 8007d3a:	f104 0015 	add.w	r0, r4, #21
 8007d3e:	4584      	cmp	ip, r0
 8007d40:	bf38      	it	cc
 8007d42:	2304      	movcc	r3, #4
 8007d44:	50ca      	str	r2, [r1, r3]
 8007d46:	b10a      	cbz	r2, 8007d4c <__lshift+0xa4>
 8007d48:	f108 0602 	add.w	r6, r8, #2
 8007d4c:	3e01      	subs	r6, #1
 8007d4e:	4638      	mov	r0, r7
 8007d50:	612e      	str	r6, [r5, #16]
 8007d52:	4621      	mov	r1, r4
 8007d54:	f7ff fd8e 	bl	8007874 <_Bfree>
 8007d58:	4628      	mov	r0, r5
 8007d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d62:	3301      	adds	r3, #1
 8007d64:	e7c5      	b.n	8007cf2 <__lshift+0x4a>
 8007d66:	3904      	subs	r1, #4
 8007d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d70:	459c      	cmp	ip, r3
 8007d72:	d8f9      	bhi.n	8007d68 <__lshift+0xc0>
 8007d74:	e7ea      	b.n	8007d4c <__lshift+0xa4>
 8007d76:	bf00      	nop
 8007d78:	0800a339 	.word	0x0800a339
 8007d7c:	0800a34a 	.word	0x0800a34a

08007d80 <__mcmp>:
 8007d80:	b530      	push	{r4, r5, lr}
 8007d82:	6902      	ldr	r2, [r0, #16]
 8007d84:	690c      	ldr	r4, [r1, #16]
 8007d86:	1b12      	subs	r2, r2, r4
 8007d88:	d10e      	bne.n	8007da8 <__mcmp+0x28>
 8007d8a:	f100 0314 	add.w	r3, r0, #20
 8007d8e:	3114      	adds	r1, #20
 8007d90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007da0:	42a5      	cmp	r5, r4
 8007da2:	d003      	beq.n	8007dac <__mcmp+0x2c>
 8007da4:	d305      	bcc.n	8007db2 <__mcmp+0x32>
 8007da6:	2201      	movs	r2, #1
 8007da8:	4610      	mov	r0, r2
 8007daa:	bd30      	pop	{r4, r5, pc}
 8007dac:	4283      	cmp	r3, r0
 8007dae:	d3f3      	bcc.n	8007d98 <__mcmp+0x18>
 8007db0:	e7fa      	b.n	8007da8 <__mcmp+0x28>
 8007db2:	f04f 32ff 	mov.w	r2, #4294967295
 8007db6:	e7f7      	b.n	8007da8 <__mcmp+0x28>

08007db8 <__mdiff>:
 8007db8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	4690      	mov	r8, r2
 8007dc6:	f7ff ffdb 	bl	8007d80 <__mcmp>
 8007dca:	1e05      	subs	r5, r0, #0
 8007dcc:	d110      	bne.n	8007df0 <__mdiff+0x38>
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f7ff fd0f 	bl	80077f4 <_Balloc>
 8007dd6:	b930      	cbnz	r0, 8007de6 <__mdiff+0x2e>
 8007dd8:	4b3a      	ldr	r3, [pc, #232]	; (8007ec4 <__mdiff+0x10c>)
 8007dda:	4602      	mov	r2, r0
 8007ddc:	f240 2137 	movw	r1, #567	; 0x237
 8007de0:	4839      	ldr	r0, [pc, #228]	; (8007ec8 <__mdiff+0x110>)
 8007de2:	f001 fa95 	bl	8009310 <__assert_func>
 8007de6:	2301      	movs	r3, #1
 8007de8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df0:	bfa4      	itt	ge
 8007df2:	4643      	movge	r3, r8
 8007df4:	46a0      	movge	r8, r4
 8007df6:	4630      	mov	r0, r6
 8007df8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007dfc:	bfa6      	itte	ge
 8007dfe:	461c      	movge	r4, r3
 8007e00:	2500      	movge	r5, #0
 8007e02:	2501      	movlt	r5, #1
 8007e04:	f7ff fcf6 	bl	80077f4 <_Balloc>
 8007e08:	b920      	cbnz	r0, 8007e14 <__mdiff+0x5c>
 8007e0a:	4b2e      	ldr	r3, [pc, #184]	; (8007ec4 <__mdiff+0x10c>)
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	f240 2145 	movw	r1, #581	; 0x245
 8007e12:	e7e5      	b.n	8007de0 <__mdiff+0x28>
 8007e14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e18:	6926      	ldr	r6, [r4, #16]
 8007e1a:	60c5      	str	r5, [r0, #12]
 8007e1c:	f104 0914 	add.w	r9, r4, #20
 8007e20:	f108 0514 	add.w	r5, r8, #20
 8007e24:	f100 0e14 	add.w	lr, r0, #20
 8007e28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007e2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e30:	f108 0210 	add.w	r2, r8, #16
 8007e34:	46f2      	mov	sl, lr
 8007e36:	2100      	movs	r1, #0
 8007e38:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e40:	fa11 f88b 	uxtah	r8, r1, fp
 8007e44:	b299      	uxth	r1, r3
 8007e46:	0c1b      	lsrs	r3, r3, #16
 8007e48:	eba8 0801 	sub.w	r8, r8, r1
 8007e4c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e50:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e54:	fa1f f888 	uxth.w	r8, r8
 8007e58:	1419      	asrs	r1, r3, #16
 8007e5a:	454e      	cmp	r6, r9
 8007e5c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e60:	f84a 3b04 	str.w	r3, [sl], #4
 8007e64:	d8e8      	bhi.n	8007e38 <__mdiff+0x80>
 8007e66:	1b33      	subs	r3, r6, r4
 8007e68:	3b15      	subs	r3, #21
 8007e6a:	f023 0303 	bic.w	r3, r3, #3
 8007e6e:	3304      	adds	r3, #4
 8007e70:	3415      	adds	r4, #21
 8007e72:	42a6      	cmp	r6, r4
 8007e74:	bf38      	it	cc
 8007e76:	2304      	movcc	r3, #4
 8007e78:	441d      	add	r5, r3
 8007e7a:	4473      	add	r3, lr
 8007e7c:	469e      	mov	lr, r3
 8007e7e:	462e      	mov	r6, r5
 8007e80:	4566      	cmp	r6, ip
 8007e82:	d30e      	bcc.n	8007ea2 <__mdiff+0xea>
 8007e84:	f10c 0203 	add.w	r2, ip, #3
 8007e88:	1b52      	subs	r2, r2, r5
 8007e8a:	f022 0203 	bic.w	r2, r2, #3
 8007e8e:	3d03      	subs	r5, #3
 8007e90:	45ac      	cmp	ip, r5
 8007e92:	bf38      	it	cc
 8007e94:	2200      	movcc	r2, #0
 8007e96:	4413      	add	r3, r2
 8007e98:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007e9c:	b17a      	cbz	r2, 8007ebe <__mdiff+0x106>
 8007e9e:	6107      	str	r7, [r0, #16]
 8007ea0:	e7a4      	b.n	8007dec <__mdiff+0x34>
 8007ea2:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ea6:	fa11 f288 	uxtah	r2, r1, r8
 8007eaa:	1414      	asrs	r4, r2, #16
 8007eac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007eb0:	b292      	uxth	r2, r2
 8007eb2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007eb6:	f84e 2b04 	str.w	r2, [lr], #4
 8007eba:	1421      	asrs	r1, r4, #16
 8007ebc:	e7e0      	b.n	8007e80 <__mdiff+0xc8>
 8007ebe:	3f01      	subs	r7, #1
 8007ec0:	e7ea      	b.n	8007e98 <__mdiff+0xe0>
 8007ec2:	bf00      	nop
 8007ec4:	0800a339 	.word	0x0800a339
 8007ec8:	0800a34a 	.word	0x0800a34a

08007ecc <__ulp>:
 8007ecc:	b082      	sub	sp, #8
 8007ece:	ed8d 0b00 	vstr	d0, [sp]
 8007ed2:	9a01      	ldr	r2, [sp, #4]
 8007ed4:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <__ulp+0x48>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dc08      	bgt.n	8007ef2 <__ulp+0x26>
 8007ee0:	425b      	negs	r3, r3
 8007ee2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007ee6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007eea:	da04      	bge.n	8007ef6 <__ulp+0x2a>
 8007eec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ef0:	4113      	asrs	r3, r2
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	e008      	b.n	8007f08 <__ulp+0x3c>
 8007ef6:	f1a2 0314 	sub.w	r3, r2, #20
 8007efa:	2b1e      	cmp	r3, #30
 8007efc:	bfda      	itte	le
 8007efe:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007f02:	40da      	lsrle	r2, r3
 8007f04:	2201      	movgt	r2, #1
 8007f06:	2300      	movs	r3, #0
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	ec41 0b10 	vmov	d0, r0, r1
 8007f10:	b002      	add	sp, #8
 8007f12:	4770      	bx	lr
 8007f14:	7ff00000 	.word	0x7ff00000

08007f18 <__b2d>:
 8007f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1c:	6906      	ldr	r6, [r0, #16]
 8007f1e:	f100 0814 	add.w	r8, r0, #20
 8007f22:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007f26:	1f37      	subs	r7, r6, #4
 8007f28:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f7ff fd53 	bl	80079d8 <__hi0bits>
 8007f32:	f1c0 0320 	rsb	r3, r0, #32
 8007f36:	280a      	cmp	r0, #10
 8007f38:	600b      	str	r3, [r1, #0]
 8007f3a:	491b      	ldr	r1, [pc, #108]	; (8007fa8 <__b2d+0x90>)
 8007f3c:	dc15      	bgt.n	8007f6a <__b2d+0x52>
 8007f3e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f42:	fa22 f30c 	lsr.w	r3, r2, ip
 8007f46:	45b8      	cmp	r8, r7
 8007f48:	ea43 0501 	orr.w	r5, r3, r1
 8007f4c:	bf34      	ite	cc
 8007f4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f52:	2300      	movcs	r3, #0
 8007f54:	3015      	adds	r0, #21
 8007f56:	fa02 f000 	lsl.w	r0, r2, r0
 8007f5a:	fa23 f30c 	lsr.w	r3, r3, ip
 8007f5e:	4303      	orrs	r3, r0
 8007f60:	461c      	mov	r4, r3
 8007f62:	ec45 4b10 	vmov	d0, r4, r5
 8007f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f6a:	45b8      	cmp	r8, r7
 8007f6c:	bf3a      	itte	cc
 8007f6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007f72:	f1a6 0708 	subcc.w	r7, r6, #8
 8007f76:	2300      	movcs	r3, #0
 8007f78:	380b      	subs	r0, #11
 8007f7a:	d012      	beq.n	8007fa2 <__b2d+0x8a>
 8007f7c:	f1c0 0120 	rsb	r1, r0, #32
 8007f80:	fa23 f401 	lsr.w	r4, r3, r1
 8007f84:	4082      	lsls	r2, r0
 8007f86:	4322      	orrs	r2, r4
 8007f88:	4547      	cmp	r7, r8
 8007f8a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007f8e:	bf8c      	ite	hi
 8007f90:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f94:	2200      	movls	r2, #0
 8007f96:	4083      	lsls	r3, r0
 8007f98:	40ca      	lsrs	r2, r1
 8007f9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	e7de      	b.n	8007f60 <__b2d+0x48>
 8007fa2:	ea42 0501 	orr.w	r5, r2, r1
 8007fa6:	e7db      	b.n	8007f60 <__b2d+0x48>
 8007fa8:	3ff00000 	.word	0x3ff00000

08007fac <__d2b>:
 8007fac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	ec59 8b10 	vmov	r8, r9, d0
 8007fb8:	4616      	mov	r6, r2
 8007fba:	f7ff fc1b 	bl	80077f4 <_Balloc>
 8007fbe:	4604      	mov	r4, r0
 8007fc0:	b930      	cbnz	r0, 8007fd0 <__d2b+0x24>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	4b24      	ldr	r3, [pc, #144]	; (8008058 <__d2b+0xac>)
 8007fc6:	4825      	ldr	r0, [pc, #148]	; (800805c <__d2b+0xb0>)
 8007fc8:	f240 310f 	movw	r1, #783	; 0x30f
 8007fcc:	f001 f9a0 	bl	8009310 <__assert_func>
 8007fd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007fd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fd8:	bb2d      	cbnz	r5, 8008026 <__d2b+0x7a>
 8007fda:	9301      	str	r3, [sp, #4]
 8007fdc:	f1b8 0300 	subs.w	r3, r8, #0
 8007fe0:	d026      	beq.n	8008030 <__d2b+0x84>
 8007fe2:	4668      	mov	r0, sp
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	f7ff fd17 	bl	8007a18 <__lo0bits>
 8007fea:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007fee:	b1e8      	cbz	r0, 800802c <__d2b+0x80>
 8007ff0:	f1c0 0320 	rsb	r3, r0, #32
 8007ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	40c2      	lsrs	r2, r0
 8007ffc:	6163      	str	r3, [r4, #20]
 8007ffe:	9201      	str	r2, [sp, #4]
 8008000:	9b01      	ldr	r3, [sp, #4]
 8008002:	61a3      	str	r3, [r4, #24]
 8008004:	2b00      	cmp	r3, #0
 8008006:	bf14      	ite	ne
 8008008:	2202      	movne	r2, #2
 800800a:	2201      	moveq	r2, #1
 800800c:	6122      	str	r2, [r4, #16]
 800800e:	b1bd      	cbz	r5, 8008040 <__d2b+0x94>
 8008010:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008014:	4405      	add	r5, r0
 8008016:	603d      	str	r5, [r7, #0]
 8008018:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800801c:	6030      	str	r0, [r6, #0]
 800801e:	4620      	mov	r0, r4
 8008020:	b003      	add	sp, #12
 8008022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800802a:	e7d6      	b.n	8007fda <__d2b+0x2e>
 800802c:	6161      	str	r1, [r4, #20]
 800802e:	e7e7      	b.n	8008000 <__d2b+0x54>
 8008030:	a801      	add	r0, sp, #4
 8008032:	f7ff fcf1 	bl	8007a18 <__lo0bits>
 8008036:	9b01      	ldr	r3, [sp, #4]
 8008038:	6163      	str	r3, [r4, #20]
 800803a:	3020      	adds	r0, #32
 800803c:	2201      	movs	r2, #1
 800803e:	e7e5      	b.n	800800c <__d2b+0x60>
 8008040:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008044:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008048:	6038      	str	r0, [r7, #0]
 800804a:	6918      	ldr	r0, [r3, #16]
 800804c:	f7ff fcc4 	bl	80079d8 <__hi0bits>
 8008050:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008054:	e7e2      	b.n	800801c <__d2b+0x70>
 8008056:	bf00      	nop
 8008058:	0800a339 	.word	0x0800a339
 800805c:	0800a34a 	.word	0x0800a34a

08008060 <__ratio>:
 8008060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	4688      	mov	r8, r1
 8008066:	4669      	mov	r1, sp
 8008068:	4681      	mov	r9, r0
 800806a:	f7ff ff55 	bl	8007f18 <__b2d>
 800806e:	a901      	add	r1, sp, #4
 8008070:	4640      	mov	r0, r8
 8008072:	ec55 4b10 	vmov	r4, r5, d0
 8008076:	f7ff ff4f 	bl	8007f18 <__b2d>
 800807a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800807e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008082:	eba3 0c02 	sub.w	ip, r3, r2
 8008086:	e9dd 3200 	ldrd	r3, r2, [sp]
 800808a:	1a9b      	subs	r3, r3, r2
 800808c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008090:	ec51 0b10 	vmov	r0, r1, d0
 8008094:	2b00      	cmp	r3, #0
 8008096:	bfd6      	itet	le
 8008098:	460a      	movle	r2, r1
 800809a:	462a      	movgt	r2, r5
 800809c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080a0:	468b      	mov	fp, r1
 80080a2:	462f      	mov	r7, r5
 80080a4:	bfd4      	ite	le
 80080a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80080aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80080ae:	4620      	mov	r0, r4
 80080b0:	ee10 2a10 	vmov	r2, s0
 80080b4:	465b      	mov	r3, fp
 80080b6:	4639      	mov	r1, r7
 80080b8:	f7f8 fbc8 	bl	800084c <__aeabi_ddiv>
 80080bc:	ec41 0b10 	vmov	d0, r0, r1
 80080c0:	b003      	add	sp, #12
 80080c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080c6 <__copybits>:
 80080c6:	3901      	subs	r1, #1
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	1149      	asrs	r1, r1, #5
 80080cc:	6914      	ldr	r4, [r2, #16]
 80080ce:	3101      	adds	r1, #1
 80080d0:	f102 0314 	add.w	r3, r2, #20
 80080d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080dc:	1f05      	subs	r5, r0, #4
 80080de:	42a3      	cmp	r3, r4
 80080e0:	d30c      	bcc.n	80080fc <__copybits+0x36>
 80080e2:	1aa3      	subs	r3, r4, r2
 80080e4:	3b11      	subs	r3, #17
 80080e6:	f023 0303 	bic.w	r3, r3, #3
 80080ea:	3211      	adds	r2, #17
 80080ec:	42a2      	cmp	r2, r4
 80080ee:	bf88      	it	hi
 80080f0:	2300      	movhi	r3, #0
 80080f2:	4418      	add	r0, r3
 80080f4:	2300      	movs	r3, #0
 80080f6:	4288      	cmp	r0, r1
 80080f8:	d305      	bcc.n	8008106 <__copybits+0x40>
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	f853 6b04 	ldr.w	r6, [r3], #4
 8008100:	f845 6f04 	str.w	r6, [r5, #4]!
 8008104:	e7eb      	b.n	80080de <__copybits+0x18>
 8008106:	f840 3b04 	str.w	r3, [r0], #4
 800810a:	e7f4      	b.n	80080f6 <__copybits+0x30>

0800810c <__any_on>:
 800810c:	f100 0214 	add.w	r2, r0, #20
 8008110:	6900      	ldr	r0, [r0, #16]
 8008112:	114b      	asrs	r3, r1, #5
 8008114:	4298      	cmp	r0, r3
 8008116:	b510      	push	{r4, lr}
 8008118:	db11      	blt.n	800813e <__any_on+0x32>
 800811a:	dd0a      	ble.n	8008132 <__any_on+0x26>
 800811c:	f011 011f 	ands.w	r1, r1, #31
 8008120:	d007      	beq.n	8008132 <__any_on+0x26>
 8008122:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008126:	fa24 f001 	lsr.w	r0, r4, r1
 800812a:	fa00 f101 	lsl.w	r1, r0, r1
 800812e:	428c      	cmp	r4, r1
 8008130:	d10b      	bne.n	800814a <__any_on+0x3e>
 8008132:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008136:	4293      	cmp	r3, r2
 8008138:	d803      	bhi.n	8008142 <__any_on+0x36>
 800813a:	2000      	movs	r0, #0
 800813c:	bd10      	pop	{r4, pc}
 800813e:	4603      	mov	r3, r0
 8008140:	e7f7      	b.n	8008132 <__any_on+0x26>
 8008142:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008146:	2900      	cmp	r1, #0
 8008148:	d0f5      	beq.n	8008136 <__any_on+0x2a>
 800814a:	2001      	movs	r0, #1
 800814c:	e7f6      	b.n	800813c <__any_on+0x30>

0800814e <sulp>:
 800814e:	b570      	push	{r4, r5, r6, lr}
 8008150:	4604      	mov	r4, r0
 8008152:	460d      	mov	r5, r1
 8008154:	ec45 4b10 	vmov	d0, r4, r5
 8008158:	4616      	mov	r6, r2
 800815a:	f7ff feb7 	bl	8007ecc <__ulp>
 800815e:	ec51 0b10 	vmov	r0, r1, d0
 8008162:	b17e      	cbz	r6, 8008184 <sulp+0x36>
 8008164:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008168:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800816c:	2b00      	cmp	r3, #0
 800816e:	dd09      	ble.n	8008184 <sulp+0x36>
 8008170:	051b      	lsls	r3, r3, #20
 8008172:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008176:	2400      	movs	r4, #0
 8008178:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800817c:	4622      	mov	r2, r4
 800817e:	462b      	mov	r3, r5
 8008180:	f7f8 fa3a 	bl	80005f8 <__aeabi_dmul>
 8008184:	bd70      	pop	{r4, r5, r6, pc}
	...

08008188 <_strtod_l>:
 8008188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	ed2d 8b02 	vpush	{d8}
 8008190:	b09b      	sub	sp, #108	; 0x6c
 8008192:	4604      	mov	r4, r0
 8008194:	9213      	str	r2, [sp, #76]	; 0x4c
 8008196:	2200      	movs	r2, #0
 8008198:	9216      	str	r2, [sp, #88]	; 0x58
 800819a:	460d      	mov	r5, r1
 800819c:	f04f 0800 	mov.w	r8, #0
 80081a0:	f04f 0900 	mov.w	r9, #0
 80081a4:	460a      	mov	r2, r1
 80081a6:	9215      	str	r2, [sp, #84]	; 0x54
 80081a8:	7811      	ldrb	r1, [r2, #0]
 80081aa:	292b      	cmp	r1, #43	; 0x2b
 80081ac:	d04c      	beq.n	8008248 <_strtod_l+0xc0>
 80081ae:	d83a      	bhi.n	8008226 <_strtod_l+0x9e>
 80081b0:	290d      	cmp	r1, #13
 80081b2:	d834      	bhi.n	800821e <_strtod_l+0x96>
 80081b4:	2908      	cmp	r1, #8
 80081b6:	d834      	bhi.n	8008222 <_strtod_l+0x9a>
 80081b8:	2900      	cmp	r1, #0
 80081ba:	d03d      	beq.n	8008238 <_strtod_l+0xb0>
 80081bc:	2200      	movs	r2, #0
 80081be:	920a      	str	r2, [sp, #40]	; 0x28
 80081c0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80081c2:	7832      	ldrb	r2, [r6, #0]
 80081c4:	2a30      	cmp	r2, #48	; 0x30
 80081c6:	f040 80b4 	bne.w	8008332 <_strtod_l+0x1aa>
 80081ca:	7872      	ldrb	r2, [r6, #1]
 80081cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80081d0:	2a58      	cmp	r2, #88	; 0x58
 80081d2:	d170      	bne.n	80082b6 <_strtod_l+0x12e>
 80081d4:	9302      	str	r3, [sp, #8]
 80081d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	ab16      	add	r3, sp, #88	; 0x58
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	4a8e      	ldr	r2, [pc, #568]	; (8008418 <_strtod_l+0x290>)
 80081e0:	ab17      	add	r3, sp, #92	; 0x5c
 80081e2:	a915      	add	r1, sp, #84	; 0x54
 80081e4:	4620      	mov	r0, r4
 80081e6:	f001 f92f 	bl	8009448 <__gethex>
 80081ea:	f010 070f 	ands.w	r7, r0, #15
 80081ee:	4605      	mov	r5, r0
 80081f0:	d005      	beq.n	80081fe <_strtod_l+0x76>
 80081f2:	2f06      	cmp	r7, #6
 80081f4:	d12a      	bne.n	800824c <_strtod_l+0xc4>
 80081f6:	3601      	adds	r6, #1
 80081f8:	2300      	movs	r3, #0
 80081fa:	9615      	str	r6, [sp, #84]	; 0x54
 80081fc:	930a      	str	r3, [sp, #40]	; 0x28
 80081fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008200:	2b00      	cmp	r3, #0
 8008202:	f040 857f 	bne.w	8008d04 <_strtod_l+0xb7c>
 8008206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008208:	b1db      	cbz	r3, 8008242 <_strtod_l+0xba>
 800820a:	4642      	mov	r2, r8
 800820c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008210:	ec43 2b10 	vmov	d0, r2, r3
 8008214:	b01b      	add	sp, #108	; 0x6c
 8008216:	ecbd 8b02 	vpop	{d8}
 800821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821e:	2920      	cmp	r1, #32
 8008220:	d1cc      	bne.n	80081bc <_strtod_l+0x34>
 8008222:	3201      	adds	r2, #1
 8008224:	e7bf      	b.n	80081a6 <_strtod_l+0x1e>
 8008226:	292d      	cmp	r1, #45	; 0x2d
 8008228:	d1c8      	bne.n	80081bc <_strtod_l+0x34>
 800822a:	2101      	movs	r1, #1
 800822c:	910a      	str	r1, [sp, #40]	; 0x28
 800822e:	1c51      	adds	r1, r2, #1
 8008230:	9115      	str	r1, [sp, #84]	; 0x54
 8008232:	7852      	ldrb	r2, [r2, #1]
 8008234:	2a00      	cmp	r2, #0
 8008236:	d1c3      	bne.n	80081c0 <_strtod_l+0x38>
 8008238:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800823a:	9515      	str	r5, [sp, #84]	; 0x54
 800823c:	2b00      	cmp	r3, #0
 800823e:	f040 855f 	bne.w	8008d00 <_strtod_l+0xb78>
 8008242:	4642      	mov	r2, r8
 8008244:	464b      	mov	r3, r9
 8008246:	e7e3      	b.n	8008210 <_strtod_l+0x88>
 8008248:	2100      	movs	r1, #0
 800824a:	e7ef      	b.n	800822c <_strtod_l+0xa4>
 800824c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800824e:	b13a      	cbz	r2, 8008260 <_strtod_l+0xd8>
 8008250:	2135      	movs	r1, #53	; 0x35
 8008252:	a818      	add	r0, sp, #96	; 0x60
 8008254:	f7ff ff37 	bl	80080c6 <__copybits>
 8008258:	9916      	ldr	r1, [sp, #88]	; 0x58
 800825a:	4620      	mov	r0, r4
 800825c:	f7ff fb0a 	bl	8007874 <_Bfree>
 8008260:	3f01      	subs	r7, #1
 8008262:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008264:	2f04      	cmp	r7, #4
 8008266:	d806      	bhi.n	8008276 <_strtod_l+0xee>
 8008268:	e8df f007 	tbb	[pc, r7]
 800826c:	201d0314 	.word	0x201d0314
 8008270:	14          	.byte	0x14
 8008271:	00          	.byte	0x00
 8008272:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008276:	05e9      	lsls	r1, r5, #23
 8008278:	bf48      	it	mi
 800827a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800827e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008282:	0d1b      	lsrs	r3, r3, #20
 8008284:	051b      	lsls	r3, r3, #20
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1b9      	bne.n	80081fe <_strtod_l+0x76>
 800828a:	f7fe faf5 	bl	8006878 <__errno>
 800828e:	2322      	movs	r3, #34	; 0x22
 8008290:	6003      	str	r3, [r0, #0]
 8008292:	e7b4      	b.n	80081fe <_strtod_l+0x76>
 8008294:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008298:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800829c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80082a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80082a4:	e7e7      	b.n	8008276 <_strtod_l+0xee>
 80082a6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008420 <_strtod_l+0x298>
 80082aa:	e7e4      	b.n	8008276 <_strtod_l+0xee>
 80082ac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80082b0:	f04f 38ff 	mov.w	r8, #4294967295
 80082b4:	e7df      	b.n	8008276 <_strtod_l+0xee>
 80082b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	9215      	str	r2, [sp, #84]	; 0x54
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b30      	cmp	r3, #48	; 0x30
 80082c0:	d0f9      	beq.n	80082b6 <_strtod_l+0x12e>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d09b      	beq.n	80081fe <_strtod_l+0x76>
 80082c6:	2301      	movs	r3, #1
 80082c8:	f04f 0a00 	mov.w	sl, #0
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80082d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80082d6:	46d3      	mov	fp, sl
 80082d8:	220a      	movs	r2, #10
 80082da:	9815      	ldr	r0, [sp, #84]	; 0x54
 80082dc:	7806      	ldrb	r6, [r0, #0]
 80082de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80082e2:	b2d9      	uxtb	r1, r3
 80082e4:	2909      	cmp	r1, #9
 80082e6:	d926      	bls.n	8008336 <_strtod_l+0x1ae>
 80082e8:	494c      	ldr	r1, [pc, #304]	; (800841c <_strtod_l+0x294>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	f000 ffe6 	bl	80092bc <strncmp>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d030      	beq.n	8008356 <_strtod_l+0x1ce>
 80082f4:	2000      	movs	r0, #0
 80082f6:	4632      	mov	r2, r6
 80082f8:	9005      	str	r0, [sp, #20]
 80082fa:	465e      	mov	r6, fp
 80082fc:	4603      	mov	r3, r0
 80082fe:	2a65      	cmp	r2, #101	; 0x65
 8008300:	d001      	beq.n	8008306 <_strtod_l+0x17e>
 8008302:	2a45      	cmp	r2, #69	; 0x45
 8008304:	d113      	bne.n	800832e <_strtod_l+0x1a6>
 8008306:	b91e      	cbnz	r6, 8008310 <_strtod_l+0x188>
 8008308:	9a04      	ldr	r2, [sp, #16]
 800830a:	4302      	orrs	r2, r0
 800830c:	d094      	beq.n	8008238 <_strtod_l+0xb0>
 800830e:	2600      	movs	r6, #0
 8008310:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008312:	1c6a      	adds	r2, r5, #1
 8008314:	9215      	str	r2, [sp, #84]	; 0x54
 8008316:	786a      	ldrb	r2, [r5, #1]
 8008318:	2a2b      	cmp	r2, #43	; 0x2b
 800831a:	d074      	beq.n	8008406 <_strtod_l+0x27e>
 800831c:	2a2d      	cmp	r2, #45	; 0x2d
 800831e:	d078      	beq.n	8008412 <_strtod_l+0x28a>
 8008320:	f04f 0c00 	mov.w	ip, #0
 8008324:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008328:	2909      	cmp	r1, #9
 800832a:	d97f      	bls.n	800842c <_strtod_l+0x2a4>
 800832c:	9515      	str	r5, [sp, #84]	; 0x54
 800832e:	2700      	movs	r7, #0
 8008330:	e09e      	b.n	8008470 <_strtod_l+0x2e8>
 8008332:	2300      	movs	r3, #0
 8008334:	e7c8      	b.n	80082c8 <_strtod_l+0x140>
 8008336:	f1bb 0f08 	cmp.w	fp, #8
 800833a:	bfd8      	it	le
 800833c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800833e:	f100 0001 	add.w	r0, r0, #1
 8008342:	bfda      	itte	le
 8008344:	fb02 3301 	mlale	r3, r2, r1, r3
 8008348:	9309      	strle	r3, [sp, #36]	; 0x24
 800834a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800834e:	f10b 0b01 	add.w	fp, fp, #1
 8008352:	9015      	str	r0, [sp, #84]	; 0x54
 8008354:	e7c1      	b.n	80082da <_strtod_l+0x152>
 8008356:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	9215      	str	r2, [sp, #84]	; 0x54
 800835c:	785a      	ldrb	r2, [r3, #1]
 800835e:	f1bb 0f00 	cmp.w	fp, #0
 8008362:	d037      	beq.n	80083d4 <_strtod_l+0x24c>
 8008364:	9005      	str	r0, [sp, #20]
 8008366:	465e      	mov	r6, fp
 8008368:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800836c:	2b09      	cmp	r3, #9
 800836e:	d912      	bls.n	8008396 <_strtod_l+0x20e>
 8008370:	2301      	movs	r3, #1
 8008372:	e7c4      	b.n	80082fe <_strtod_l+0x176>
 8008374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	9215      	str	r2, [sp, #84]	; 0x54
 800837a:	785a      	ldrb	r2, [r3, #1]
 800837c:	3001      	adds	r0, #1
 800837e:	2a30      	cmp	r2, #48	; 0x30
 8008380:	d0f8      	beq.n	8008374 <_strtod_l+0x1ec>
 8008382:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008386:	2b08      	cmp	r3, #8
 8008388:	f200 84c1 	bhi.w	8008d0e <_strtod_l+0xb86>
 800838c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800838e:	9005      	str	r0, [sp, #20]
 8008390:	2000      	movs	r0, #0
 8008392:	930b      	str	r3, [sp, #44]	; 0x2c
 8008394:	4606      	mov	r6, r0
 8008396:	3a30      	subs	r2, #48	; 0x30
 8008398:	f100 0301 	add.w	r3, r0, #1
 800839c:	d014      	beq.n	80083c8 <_strtod_l+0x240>
 800839e:	9905      	ldr	r1, [sp, #20]
 80083a0:	4419      	add	r1, r3
 80083a2:	9105      	str	r1, [sp, #20]
 80083a4:	4633      	mov	r3, r6
 80083a6:	eb00 0c06 	add.w	ip, r0, r6
 80083aa:	210a      	movs	r1, #10
 80083ac:	4563      	cmp	r3, ip
 80083ae:	d113      	bne.n	80083d8 <_strtod_l+0x250>
 80083b0:	1833      	adds	r3, r6, r0
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	f106 0601 	add.w	r6, r6, #1
 80083b8:	4406      	add	r6, r0
 80083ba:	dc1a      	bgt.n	80083f2 <_strtod_l+0x26a>
 80083bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083be:	230a      	movs	r3, #10
 80083c0:	fb03 2301 	mla	r3, r3, r1, r2
 80083c4:	9309      	str	r3, [sp, #36]	; 0x24
 80083c6:	2300      	movs	r3, #0
 80083c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083ca:	1c51      	adds	r1, r2, #1
 80083cc:	9115      	str	r1, [sp, #84]	; 0x54
 80083ce:	7852      	ldrb	r2, [r2, #1]
 80083d0:	4618      	mov	r0, r3
 80083d2:	e7c9      	b.n	8008368 <_strtod_l+0x1e0>
 80083d4:	4658      	mov	r0, fp
 80083d6:	e7d2      	b.n	800837e <_strtod_l+0x1f6>
 80083d8:	2b08      	cmp	r3, #8
 80083da:	f103 0301 	add.w	r3, r3, #1
 80083de:	dc03      	bgt.n	80083e8 <_strtod_l+0x260>
 80083e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083e2:	434f      	muls	r7, r1
 80083e4:	9709      	str	r7, [sp, #36]	; 0x24
 80083e6:	e7e1      	b.n	80083ac <_strtod_l+0x224>
 80083e8:	2b10      	cmp	r3, #16
 80083ea:	bfd8      	it	le
 80083ec:	fb01 fa0a 	mulle.w	sl, r1, sl
 80083f0:	e7dc      	b.n	80083ac <_strtod_l+0x224>
 80083f2:	2e10      	cmp	r6, #16
 80083f4:	bfdc      	itt	le
 80083f6:	230a      	movle	r3, #10
 80083f8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80083fc:	e7e3      	b.n	80083c6 <_strtod_l+0x23e>
 80083fe:	2300      	movs	r3, #0
 8008400:	9305      	str	r3, [sp, #20]
 8008402:	2301      	movs	r3, #1
 8008404:	e780      	b.n	8008308 <_strtod_l+0x180>
 8008406:	f04f 0c00 	mov.w	ip, #0
 800840a:	1caa      	adds	r2, r5, #2
 800840c:	9215      	str	r2, [sp, #84]	; 0x54
 800840e:	78aa      	ldrb	r2, [r5, #2]
 8008410:	e788      	b.n	8008324 <_strtod_l+0x19c>
 8008412:	f04f 0c01 	mov.w	ip, #1
 8008416:	e7f8      	b.n	800840a <_strtod_l+0x282>
 8008418:	0800a4a8 	.word	0x0800a4a8
 800841c:	0800a4a4 	.word	0x0800a4a4
 8008420:	7ff00000 	.word	0x7ff00000
 8008424:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008426:	1c51      	adds	r1, r2, #1
 8008428:	9115      	str	r1, [sp, #84]	; 0x54
 800842a:	7852      	ldrb	r2, [r2, #1]
 800842c:	2a30      	cmp	r2, #48	; 0x30
 800842e:	d0f9      	beq.n	8008424 <_strtod_l+0x29c>
 8008430:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008434:	2908      	cmp	r1, #8
 8008436:	f63f af7a 	bhi.w	800832e <_strtod_l+0x1a6>
 800843a:	3a30      	subs	r2, #48	; 0x30
 800843c:	9208      	str	r2, [sp, #32]
 800843e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008440:	920c      	str	r2, [sp, #48]	; 0x30
 8008442:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008444:	1c57      	adds	r7, r2, #1
 8008446:	9715      	str	r7, [sp, #84]	; 0x54
 8008448:	7852      	ldrb	r2, [r2, #1]
 800844a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800844e:	f1be 0f09 	cmp.w	lr, #9
 8008452:	d938      	bls.n	80084c6 <_strtod_l+0x33e>
 8008454:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008456:	1a7f      	subs	r7, r7, r1
 8008458:	2f08      	cmp	r7, #8
 800845a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800845e:	dc03      	bgt.n	8008468 <_strtod_l+0x2e0>
 8008460:	9908      	ldr	r1, [sp, #32]
 8008462:	428f      	cmp	r7, r1
 8008464:	bfa8      	it	ge
 8008466:	460f      	movge	r7, r1
 8008468:	f1bc 0f00 	cmp.w	ip, #0
 800846c:	d000      	beq.n	8008470 <_strtod_l+0x2e8>
 800846e:	427f      	negs	r7, r7
 8008470:	2e00      	cmp	r6, #0
 8008472:	d14f      	bne.n	8008514 <_strtod_l+0x38c>
 8008474:	9904      	ldr	r1, [sp, #16]
 8008476:	4301      	orrs	r1, r0
 8008478:	f47f aec1 	bne.w	80081fe <_strtod_l+0x76>
 800847c:	2b00      	cmp	r3, #0
 800847e:	f47f aedb 	bne.w	8008238 <_strtod_l+0xb0>
 8008482:	2a69      	cmp	r2, #105	; 0x69
 8008484:	d029      	beq.n	80084da <_strtod_l+0x352>
 8008486:	dc26      	bgt.n	80084d6 <_strtod_l+0x34e>
 8008488:	2a49      	cmp	r2, #73	; 0x49
 800848a:	d026      	beq.n	80084da <_strtod_l+0x352>
 800848c:	2a4e      	cmp	r2, #78	; 0x4e
 800848e:	f47f aed3 	bne.w	8008238 <_strtod_l+0xb0>
 8008492:	499b      	ldr	r1, [pc, #620]	; (8008700 <_strtod_l+0x578>)
 8008494:	a815      	add	r0, sp, #84	; 0x54
 8008496:	f001 fa17 	bl	80098c8 <__match>
 800849a:	2800      	cmp	r0, #0
 800849c:	f43f aecc 	beq.w	8008238 <_strtod_l+0xb0>
 80084a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b28      	cmp	r3, #40	; 0x28
 80084a6:	d12f      	bne.n	8008508 <_strtod_l+0x380>
 80084a8:	4996      	ldr	r1, [pc, #600]	; (8008704 <_strtod_l+0x57c>)
 80084aa:	aa18      	add	r2, sp, #96	; 0x60
 80084ac:	a815      	add	r0, sp, #84	; 0x54
 80084ae:	f001 fa1f 	bl	80098f0 <__hexnan>
 80084b2:	2805      	cmp	r0, #5
 80084b4:	d128      	bne.n	8008508 <_strtod_l+0x380>
 80084b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80084bc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80084c0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80084c4:	e69b      	b.n	80081fe <_strtod_l+0x76>
 80084c6:	9f08      	ldr	r7, [sp, #32]
 80084c8:	210a      	movs	r1, #10
 80084ca:	fb01 2107 	mla	r1, r1, r7, r2
 80084ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80084d2:	9208      	str	r2, [sp, #32]
 80084d4:	e7b5      	b.n	8008442 <_strtod_l+0x2ba>
 80084d6:	2a6e      	cmp	r2, #110	; 0x6e
 80084d8:	e7d9      	b.n	800848e <_strtod_l+0x306>
 80084da:	498b      	ldr	r1, [pc, #556]	; (8008708 <_strtod_l+0x580>)
 80084dc:	a815      	add	r0, sp, #84	; 0x54
 80084de:	f001 f9f3 	bl	80098c8 <__match>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	f43f aea8 	beq.w	8008238 <_strtod_l+0xb0>
 80084e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ea:	4988      	ldr	r1, [pc, #544]	; (800870c <_strtod_l+0x584>)
 80084ec:	3b01      	subs	r3, #1
 80084ee:	a815      	add	r0, sp, #84	; 0x54
 80084f0:	9315      	str	r3, [sp, #84]	; 0x54
 80084f2:	f001 f9e9 	bl	80098c8 <__match>
 80084f6:	b910      	cbnz	r0, 80084fe <_strtod_l+0x376>
 80084f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084fa:	3301      	adds	r3, #1
 80084fc:	9315      	str	r3, [sp, #84]	; 0x54
 80084fe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800871c <_strtod_l+0x594>
 8008502:	f04f 0800 	mov.w	r8, #0
 8008506:	e67a      	b.n	80081fe <_strtod_l+0x76>
 8008508:	4881      	ldr	r0, [pc, #516]	; (8008710 <_strtod_l+0x588>)
 800850a:	f000 fef9 	bl	8009300 <nan>
 800850e:	ec59 8b10 	vmov	r8, r9, d0
 8008512:	e674      	b.n	80081fe <_strtod_l+0x76>
 8008514:	9b05      	ldr	r3, [sp, #20]
 8008516:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008518:	1afb      	subs	r3, r7, r3
 800851a:	f1bb 0f00 	cmp.w	fp, #0
 800851e:	bf08      	it	eq
 8008520:	46b3      	moveq	fp, r6
 8008522:	2e10      	cmp	r6, #16
 8008524:	9308      	str	r3, [sp, #32]
 8008526:	4635      	mov	r5, r6
 8008528:	bfa8      	it	ge
 800852a:	2510      	movge	r5, #16
 800852c:	f7f7 ffea 	bl	8000504 <__aeabi_ui2d>
 8008530:	2e09      	cmp	r6, #9
 8008532:	4680      	mov	r8, r0
 8008534:	4689      	mov	r9, r1
 8008536:	dd13      	ble.n	8008560 <_strtod_l+0x3d8>
 8008538:	4b76      	ldr	r3, [pc, #472]	; (8008714 <_strtod_l+0x58c>)
 800853a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800853e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008542:	f7f8 f859 	bl	80005f8 <__aeabi_dmul>
 8008546:	4680      	mov	r8, r0
 8008548:	4650      	mov	r0, sl
 800854a:	4689      	mov	r9, r1
 800854c:	f7f7 ffda 	bl	8000504 <__aeabi_ui2d>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4640      	mov	r0, r8
 8008556:	4649      	mov	r1, r9
 8008558:	f7f7 fe98 	bl	800028c <__adddf3>
 800855c:	4680      	mov	r8, r0
 800855e:	4689      	mov	r9, r1
 8008560:	2e0f      	cmp	r6, #15
 8008562:	dc38      	bgt.n	80085d6 <_strtod_l+0x44e>
 8008564:	9b08      	ldr	r3, [sp, #32]
 8008566:	2b00      	cmp	r3, #0
 8008568:	f43f ae49 	beq.w	80081fe <_strtod_l+0x76>
 800856c:	dd24      	ble.n	80085b8 <_strtod_l+0x430>
 800856e:	2b16      	cmp	r3, #22
 8008570:	dc0b      	bgt.n	800858a <_strtod_l+0x402>
 8008572:	4968      	ldr	r1, [pc, #416]	; (8008714 <_strtod_l+0x58c>)
 8008574:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800857c:	4642      	mov	r2, r8
 800857e:	464b      	mov	r3, r9
 8008580:	f7f8 f83a 	bl	80005f8 <__aeabi_dmul>
 8008584:	4680      	mov	r8, r0
 8008586:	4689      	mov	r9, r1
 8008588:	e639      	b.n	80081fe <_strtod_l+0x76>
 800858a:	9a08      	ldr	r2, [sp, #32]
 800858c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008590:	4293      	cmp	r3, r2
 8008592:	db20      	blt.n	80085d6 <_strtod_l+0x44e>
 8008594:	4c5f      	ldr	r4, [pc, #380]	; (8008714 <_strtod_l+0x58c>)
 8008596:	f1c6 060f 	rsb	r6, r6, #15
 800859a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800859e:	4642      	mov	r2, r8
 80085a0:	464b      	mov	r3, r9
 80085a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085a6:	f7f8 f827 	bl	80005f8 <__aeabi_dmul>
 80085aa:	9b08      	ldr	r3, [sp, #32]
 80085ac:	1b9e      	subs	r6, r3, r6
 80085ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80085b2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085b6:	e7e3      	b.n	8008580 <_strtod_l+0x3f8>
 80085b8:	9b08      	ldr	r3, [sp, #32]
 80085ba:	3316      	adds	r3, #22
 80085bc:	db0b      	blt.n	80085d6 <_strtod_l+0x44e>
 80085be:	9b05      	ldr	r3, [sp, #20]
 80085c0:	1bdf      	subs	r7, r3, r7
 80085c2:	4b54      	ldr	r3, [pc, #336]	; (8008714 <_strtod_l+0x58c>)
 80085c4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80085c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085cc:	4640      	mov	r0, r8
 80085ce:	4649      	mov	r1, r9
 80085d0:	f7f8 f93c 	bl	800084c <__aeabi_ddiv>
 80085d4:	e7d6      	b.n	8008584 <_strtod_l+0x3fc>
 80085d6:	9b08      	ldr	r3, [sp, #32]
 80085d8:	1b75      	subs	r5, r6, r5
 80085da:	441d      	add	r5, r3
 80085dc:	2d00      	cmp	r5, #0
 80085de:	dd70      	ble.n	80086c2 <_strtod_l+0x53a>
 80085e0:	f015 030f 	ands.w	r3, r5, #15
 80085e4:	d00a      	beq.n	80085fc <_strtod_l+0x474>
 80085e6:	494b      	ldr	r1, [pc, #300]	; (8008714 <_strtod_l+0x58c>)
 80085e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085ec:	4642      	mov	r2, r8
 80085ee:	464b      	mov	r3, r9
 80085f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085f4:	f7f8 f800 	bl	80005f8 <__aeabi_dmul>
 80085f8:	4680      	mov	r8, r0
 80085fa:	4689      	mov	r9, r1
 80085fc:	f035 050f 	bics.w	r5, r5, #15
 8008600:	d04d      	beq.n	800869e <_strtod_l+0x516>
 8008602:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008606:	dd22      	ble.n	800864e <_strtod_l+0x4c6>
 8008608:	2500      	movs	r5, #0
 800860a:	46ab      	mov	fp, r5
 800860c:	9509      	str	r5, [sp, #36]	; 0x24
 800860e:	9505      	str	r5, [sp, #20]
 8008610:	2322      	movs	r3, #34	; 0x22
 8008612:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800871c <_strtod_l+0x594>
 8008616:	6023      	str	r3, [r4, #0]
 8008618:	f04f 0800 	mov.w	r8, #0
 800861c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861e:	2b00      	cmp	r3, #0
 8008620:	f43f aded 	beq.w	80081fe <_strtod_l+0x76>
 8008624:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008626:	4620      	mov	r0, r4
 8008628:	f7ff f924 	bl	8007874 <_Bfree>
 800862c:	9905      	ldr	r1, [sp, #20]
 800862e:	4620      	mov	r0, r4
 8008630:	f7ff f920 	bl	8007874 <_Bfree>
 8008634:	4659      	mov	r1, fp
 8008636:	4620      	mov	r0, r4
 8008638:	f7ff f91c 	bl	8007874 <_Bfree>
 800863c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800863e:	4620      	mov	r0, r4
 8008640:	f7ff f918 	bl	8007874 <_Bfree>
 8008644:	4629      	mov	r1, r5
 8008646:	4620      	mov	r0, r4
 8008648:	f7ff f914 	bl	8007874 <_Bfree>
 800864c:	e5d7      	b.n	80081fe <_strtod_l+0x76>
 800864e:	4b32      	ldr	r3, [pc, #200]	; (8008718 <_strtod_l+0x590>)
 8008650:	9304      	str	r3, [sp, #16]
 8008652:	2300      	movs	r3, #0
 8008654:	112d      	asrs	r5, r5, #4
 8008656:	4640      	mov	r0, r8
 8008658:	4649      	mov	r1, r9
 800865a:	469a      	mov	sl, r3
 800865c:	2d01      	cmp	r5, #1
 800865e:	dc21      	bgt.n	80086a4 <_strtod_l+0x51c>
 8008660:	b10b      	cbz	r3, 8008666 <_strtod_l+0x4de>
 8008662:	4680      	mov	r8, r0
 8008664:	4689      	mov	r9, r1
 8008666:	492c      	ldr	r1, [pc, #176]	; (8008718 <_strtod_l+0x590>)
 8008668:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800866c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008670:	4642      	mov	r2, r8
 8008672:	464b      	mov	r3, r9
 8008674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008678:	f7f7 ffbe 	bl	80005f8 <__aeabi_dmul>
 800867c:	4b27      	ldr	r3, [pc, #156]	; (800871c <_strtod_l+0x594>)
 800867e:	460a      	mov	r2, r1
 8008680:	400b      	ands	r3, r1
 8008682:	4927      	ldr	r1, [pc, #156]	; (8008720 <_strtod_l+0x598>)
 8008684:	428b      	cmp	r3, r1
 8008686:	4680      	mov	r8, r0
 8008688:	d8be      	bhi.n	8008608 <_strtod_l+0x480>
 800868a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800868e:	428b      	cmp	r3, r1
 8008690:	bf86      	itte	hi
 8008692:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008724 <_strtod_l+0x59c>
 8008696:	f04f 38ff 	movhi.w	r8, #4294967295
 800869a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800869e:	2300      	movs	r3, #0
 80086a0:	9304      	str	r3, [sp, #16]
 80086a2:	e07b      	b.n	800879c <_strtod_l+0x614>
 80086a4:	07ea      	lsls	r2, r5, #31
 80086a6:	d505      	bpl.n	80086b4 <_strtod_l+0x52c>
 80086a8:	9b04      	ldr	r3, [sp, #16]
 80086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ae:	f7f7 ffa3 	bl	80005f8 <__aeabi_dmul>
 80086b2:	2301      	movs	r3, #1
 80086b4:	9a04      	ldr	r2, [sp, #16]
 80086b6:	3208      	adds	r2, #8
 80086b8:	f10a 0a01 	add.w	sl, sl, #1
 80086bc:	106d      	asrs	r5, r5, #1
 80086be:	9204      	str	r2, [sp, #16]
 80086c0:	e7cc      	b.n	800865c <_strtod_l+0x4d4>
 80086c2:	d0ec      	beq.n	800869e <_strtod_l+0x516>
 80086c4:	426d      	negs	r5, r5
 80086c6:	f015 020f 	ands.w	r2, r5, #15
 80086ca:	d00a      	beq.n	80086e2 <_strtod_l+0x55a>
 80086cc:	4b11      	ldr	r3, [pc, #68]	; (8008714 <_strtod_l+0x58c>)
 80086ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086d2:	4640      	mov	r0, r8
 80086d4:	4649      	mov	r1, r9
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	f7f8 f8b7 	bl	800084c <__aeabi_ddiv>
 80086de:	4680      	mov	r8, r0
 80086e0:	4689      	mov	r9, r1
 80086e2:	112d      	asrs	r5, r5, #4
 80086e4:	d0db      	beq.n	800869e <_strtod_l+0x516>
 80086e6:	2d1f      	cmp	r5, #31
 80086e8:	dd1e      	ble.n	8008728 <_strtod_l+0x5a0>
 80086ea:	2500      	movs	r5, #0
 80086ec:	46ab      	mov	fp, r5
 80086ee:	9509      	str	r5, [sp, #36]	; 0x24
 80086f0:	9505      	str	r5, [sp, #20]
 80086f2:	2322      	movs	r3, #34	; 0x22
 80086f4:	f04f 0800 	mov.w	r8, #0
 80086f8:	f04f 0900 	mov.w	r9, #0
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	e78d      	b.n	800861c <_strtod_l+0x494>
 8008700:	0800a291 	.word	0x0800a291
 8008704:	0800a4bc 	.word	0x0800a4bc
 8008708:	0800a289 	.word	0x0800a289
 800870c:	0800a2c0 	.word	0x0800a2c0
 8008710:	0800a64d 	.word	0x0800a64d
 8008714:	0800a3d0 	.word	0x0800a3d0
 8008718:	0800a3a8 	.word	0x0800a3a8
 800871c:	7ff00000 	.word	0x7ff00000
 8008720:	7ca00000 	.word	0x7ca00000
 8008724:	7fefffff 	.word	0x7fefffff
 8008728:	f015 0310 	ands.w	r3, r5, #16
 800872c:	bf18      	it	ne
 800872e:	236a      	movne	r3, #106	; 0x6a
 8008730:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008ad4 <_strtod_l+0x94c>
 8008734:	9304      	str	r3, [sp, #16]
 8008736:	4640      	mov	r0, r8
 8008738:	4649      	mov	r1, r9
 800873a:	2300      	movs	r3, #0
 800873c:	07ea      	lsls	r2, r5, #31
 800873e:	d504      	bpl.n	800874a <_strtod_l+0x5c2>
 8008740:	e9da 2300 	ldrd	r2, r3, [sl]
 8008744:	f7f7 ff58 	bl	80005f8 <__aeabi_dmul>
 8008748:	2301      	movs	r3, #1
 800874a:	106d      	asrs	r5, r5, #1
 800874c:	f10a 0a08 	add.w	sl, sl, #8
 8008750:	d1f4      	bne.n	800873c <_strtod_l+0x5b4>
 8008752:	b10b      	cbz	r3, 8008758 <_strtod_l+0x5d0>
 8008754:	4680      	mov	r8, r0
 8008756:	4689      	mov	r9, r1
 8008758:	9b04      	ldr	r3, [sp, #16]
 800875a:	b1bb      	cbz	r3, 800878c <_strtod_l+0x604>
 800875c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008760:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008764:	2b00      	cmp	r3, #0
 8008766:	4649      	mov	r1, r9
 8008768:	dd10      	ble.n	800878c <_strtod_l+0x604>
 800876a:	2b1f      	cmp	r3, #31
 800876c:	f340 811e 	ble.w	80089ac <_strtod_l+0x824>
 8008770:	2b34      	cmp	r3, #52	; 0x34
 8008772:	bfde      	ittt	le
 8008774:	f04f 33ff 	movle.w	r3, #4294967295
 8008778:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800877c:	4093      	lslle	r3, r2
 800877e:	f04f 0800 	mov.w	r8, #0
 8008782:	bfcc      	ite	gt
 8008784:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008788:	ea03 0901 	andle.w	r9, r3, r1
 800878c:	2200      	movs	r2, #0
 800878e:	2300      	movs	r3, #0
 8008790:	4640      	mov	r0, r8
 8008792:	4649      	mov	r1, r9
 8008794:	f7f8 f998 	bl	8000ac8 <__aeabi_dcmpeq>
 8008798:	2800      	cmp	r0, #0
 800879a:	d1a6      	bne.n	80086ea <_strtod_l+0x562>
 800879c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087a2:	4633      	mov	r3, r6
 80087a4:	465a      	mov	r2, fp
 80087a6:	4620      	mov	r0, r4
 80087a8:	f7ff f8cc 	bl	8007944 <__s2b>
 80087ac:	9009      	str	r0, [sp, #36]	; 0x24
 80087ae:	2800      	cmp	r0, #0
 80087b0:	f43f af2a 	beq.w	8008608 <_strtod_l+0x480>
 80087b4:	9a08      	ldr	r2, [sp, #32]
 80087b6:	9b05      	ldr	r3, [sp, #20]
 80087b8:	2a00      	cmp	r2, #0
 80087ba:	eba3 0307 	sub.w	r3, r3, r7
 80087be:	bfa8      	it	ge
 80087c0:	2300      	movge	r3, #0
 80087c2:	930c      	str	r3, [sp, #48]	; 0x30
 80087c4:	2500      	movs	r5, #0
 80087c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80087ca:	9312      	str	r3, [sp, #72]	; 0x48
 80087cc:	46ab      	mov	fp, r5
 80087ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d0:	4620      	mov	r0, r4
 80087d2:	6859      	ldr	r1, [r3, #4]
 80087d4:	f7ff f80e 	bl	80077f4 <_Balloc>
 80087d8:	9005      	str	r0, [sp, #20]
 80087da:	2800      	cmp	r0, #0
 80087dc:	f43f af18 	beq.w	8008610 <_strtod_l+0x488>
 80087e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	3202      	adds	r2, #2
 80087e6:	f103 010c 	add.w	r1, r3, #12
 80087ea:	0092      	lsls	r2, r2, #2
 80087ec:	300c      	adds	r0, #12
 80087ee:	f7fe f870 	bl	80068d2 <memcpy>
 80087f2:	ec49 8b10 	vmov	d0, r8, r9
 80087f6:	aa18      	add	r2, sp, #96	; 0x60
 80087f8:	a917      	add	r1, sp, #92	; 0x5c
 80087fa:	4620      	mov	r0, r4
 80087fc:	f7ff fbd6 	bl	8007fac <__d2b>
 8008800:	ec49 8b18 	vmov	d8, r8, r9
 8008804:	9016      	str	r0, [sp, #88]	; 0x58
 8008806:	2800      	cmp	r0, #0
 8008808:	f43f af02 	beq.w	8008610 <_strtod_l+0x488>
 800880c:	2101      	movs	r1, #1
 800880e:	4620      	mov	r0, r4
 8008810:	f7ff f930 	bl	8007a74 <__i2b>
 8008814:	4683      	mov	fp, r0
 8008816:	2800      	cmp	r0, #0
 8008818:	f43f aefa 	beq.w	8008610 <_strtod_l+0x488>
 800881c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800881e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008820:	2e00      	cmp	r6, #0
 8008822:	bfab      	itete	ge
 8008824:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008826:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008828:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800882a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800882e:	bfac      	ite	ge
 8008830:	eb06 0a03 	addge.w	sl, r6, r3
 8008834:	1b9f      	sublt	r7, r3, r6
 8008836:	9b04      	ldr	r3, [sp, #16]
 8008838:	1af6      	subs	r6, r6, r3
 800883a:	4416      	add	r6, r2
 800883c:	4ba0      	ldr	r3, [pc, #640]	; (8008ac0 <_strtod_l+0x938>)
 800883e:	3e01      	subs	r6, #1
 8008840:	429e      	cmp	r6, r3
 8008842:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008846:	f280 80c4 	bge.w	80089d2 <_strtod_l+0x84a>
 800884a:	1b9b      	subs	r3, r3, r6
 800884c:	2b1f      	cmp	r3, #31
 800884e:	eba2 0203 	sub.w	r2, r2, r3
 8008852:	f04f 0101 	mov.w	r1, #1
 8008856:	f300 80b0 	bgt.w	80089ba <_strtod_l+0x832>
 800885a:	fa01 f303 	lsl.w	r3, r1, r3
 800885e:	930e      	str	r3, [sp, #56]	; 0x38
 8008860:	2300      	movs	r3, #0
 8008862:	930d      	str	r3, [sp, #52]	; 0x34
 8008864:	eb0a 0602 	add.w	r6, sl, r2
 8008868:	9b04      	ldr	r3, [sp, #16]
 800886a:	45b2      	cmp	sl, r6
 800886c:	4417      	add	r7, r2
 800886e:	441f      	add	r7, r3
 8008870:	4653      	mov	r3, sl
 8008872:	bfa8      	it	ge
 8008874:	4633      	movge	r3, r6
 8008876:	42bb      	cmp	r3, r7
 8008878:	bfa8      	it	ge
 800887a:	463b      	movge	r3, r7
 800887c:	2b00      	cmp	r3, #0
 800887e:	bfc2      	ittt	gt
 8008880:	1af6      	subgt	r6, r6, r3
 8008882:	1aff      	subgt	r7, r7, r3
 8008884:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800888a:	2b00      	cmp	r3, #0
 800888c:	dd17      	ble.n	80088be <_strtod_l+0x736>
 800888e:	4659      	mov	r1, fp
 8008890:	461a      	mov	r2, r3
 8008892:	4620      	mov	r0, r4
 8008894:	f7ff f9ae 	bl	8007bf4 <__pow5mult>
 8008898:	4683      	mov	fp, r0
 800889a:	2800      	cmp	r0, #0
 800889c:	f43f aeb8 	beq.w	8008610 <_strtod_l+0x488>
 80088a0:	4601      	mov	r1, r0
 80088a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80088a4:	4620      	mov	r0, r4
 80088a6:	f7ff f8fb 	bl	8007aa0 <__multiply>
 80088aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80088ac:	2800      	cmp	r0, #0
 80088ae:	f43f aeaf 	beq.w	8008610 <_strtod_l+0x488>
 80088b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80088b4:	4620      	mov	r0, r4
 80088b6:	f7fe ffdd 	bl	8007874 <_Bfree>
 80088ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088bc:	9316      	str	r3, [sp, #88]	; 0x58
 80088be:	2e00      	cmp	r6, #0
 80088c0:	f300 808c 	bgt.w	80089dc <_strtod_l+0x854>
 80088c4:	9b08      	ldr	r3, [sp, #32]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dd08      	ble.n	80088dc <_strtod_l+0x754>
 80088ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088cc:	9905      	ldr	r1, [sp, #20]
 80088ce:	4620      	mov	r0, r4
 80088d0:	f7ff f990 	bl	8007bf4 <__pow5mult>
 80088d4:	9005      	str	r0, [sp, #20]
 80088d6:	2800      	cmp	r0, #0
 80088d8:	f43f ae9a 	beq.w	8008610 <_strtod_l+0x488>
 80088dc:	2f00      	cmp	r7, #0
 80088de:	dd08      	ble.n	80088f2 <_strtod_l+0x76a>
 80088e0:	9905      	ldr	r1, [sp, #20]
 80088e2:	463a      	mov	r2, r7
 80088e4:	4620      	mov	r0, r4
 80088e6:	f7ff f9df 	bl	8007ca8 <__lshift>
 80088ea:	9005      	str	r0, [sp, #20]
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f43f ae8f 	beq.w	8008610 <_strtod_l+0x488>
 80088f2:	f1ba 0f00 	cmp.w	sl, #0
 80088f6:	dd08      	ble.n	800890a <_strtod_l+0x782>
 80088f8:	4659      	mov	r1, fp
 80088fa:	4652      	mov	r2, sl
 80088fc:	4620      	mov	r0, r4
 80088fe:	f7ff f9d3 	bl	8007ca8 <__lshift>
 8008902:	4683      	mov	fp, r0
 8008904:	2800      	cmp	r0, #0
 8008906:	f43f ae83 	beq.w	8008610 <_strtod_l+0x488>
 800890a:	9a05      	ldr	r2, [sp, #20]
 800890c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800890e:	4620      	mov	r0, r4
 8008910:	f7ff fa52 	bl	8007db8 <__mdiff>
 8008914:	4605      	mov	r5, r0
 8008916:	2800      	cmp	r0, #0
 8008918:	f43f ae7a 	beq.w	8008610 <_strtod_l+0x488>
 800891c:	68c3      	ldr	r3, [r0, #12]
 800891e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008920:	2300      	movs	r3, #0
 8008922:	60c3      	str	r3, [r0, #12]
 8008924:	4659      	mov	r1, fp
 8008926:	f7ff fa2b 	bl	8007d80 <__mcmp>
 800892a:	2800      	cmp	r0, #0
 800892c:	da60      	bge.n	80089f0 <_strtod_l+0x868>
 800892e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008930:	ea53 0308 	orrs.w	r3, r3, r8
 8008934:	f040 8084 	bne.w	8008a40 <_strtod_l+0x8b8>
 8008938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800893c:	2b00      	cmp	r3, #0
 800893e:	d17f      	bne.n	8008a40 <_strtod_l+0x8b8>
 8008940:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008944:	0d1b      	lsrs	r3, r3, #20
 8008946:	051b      	lsls	r3, r3, #20
 8008948:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800894c:	d978      	bls.n	8008a40 <_strtod_l+0x8b8>
 800894e:	696b      	ldr	r3, [r5, #20]
 8008950:	b913      	cbnz	r3, 8008958 <_strtod_l+0x7d0>
 8008952:	692b      	ldr	r3, [r5, #16]
 8008954:	2b01      	cmp	r3, #1
 8008956:	dd73      	ble.n	8008a40 <_strtod_l+0x8b8>
 8008958:	4629      	mov	r1, r5
 800895a:	2201      	movs	r2, #1
 800895c:	4620      	mov	r0, r4
 800895e:	f7ff f9a3 	bl	8007ca8 <__lshift>
 8008962:	4659      	mov	r1, fp
 8008964:	4605      	mov	r5, r0
 8008966:	f7ff fa0b 	bl	8007d80 <__mcmp>
 800896a:	2800      	cmp	r0, #0
 800896c:	dd68      	ble.n	8008a40 <_strtod_l+0x8b8>
 800896e:	9904      	ldr	r1, [sp, #16]
 8008970:	4a54      	ldr	r2, [pc, #336]	; (8008ac4 <_strtod_l+0x93c>)
 8008972:	464b      	mov	r3, r9
 8008974:	2900      	cmp	r1, #0
 8008976:	f000 8084 	beq.w	8008a82 <_strtod_l+0x8fa>
 800897a:	ea02 0109 	and.w	r1, r2, r9
 800897e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008982:	dc7e      	bgt.n	8008a82 <_strtod_l+0x8fa>
 8008984:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008988:	f77f aeb3 	ble.w	80086f2 <_strtod_l+0x56a>
 800898c:	4b4e      	ldr	r3, [pc, #312]	; (8008ac8 <_strtod_l+0x940>)
 800898e:	4640      	mov	r0, r8
 8008990:	4649      	mov	r1, r9
 8008992:	2200      	movs	r2, #0
 8008994:	f7f7 fe30 	bl	80005f8 <__aeabi_dmul>
 8008998:	4b4a      	ldr	r3, [pc, #296]	; (8008ac4 <_strtod_l+0x93c>)
 800899a:	400b      	ands	r3, r1
 800899c:	4680      	mov	r8, r0
 800899e:	4689      	mov	r9, r1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f47f ae3f 	bne.w	8008624 <_strtod_l+0x49c>
 80089a6:	2322      	movs	r3, #34	; 0x22
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	e63b      	b.n	8008624 <_strtod_l+0x49c>
 80089ac:	f04f 32ff 	mov.w	r2, #4294967295
 80089b0:	fa02 f303 	lsl.w	r3, r2, r3
 80089b4:	ea03 0808 	and.w	r8, r3, r8
 80089b8:	e6e8      	b.n	800878c <_strtod_l+0x604>
 80089ba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80089be:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80089c2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80089c6:	36e2      	adds	r6, #226	; 0xe2
 80089c8:	fa01 f306 	lsl.w	r3, r1, r6
 80089cc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80089d0:	e748      	b.n	8008864 <_strtod_l+0x6dc>
 80089d2:	2100      	movs	r1, #0
 80089d4:	2301      	movs	r3, #1
 80089d6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80089da:	e743      	b.n	8008864 <_strtod_l+0x6dc>
 80089dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089de:	4632      	mov	r2, r6
 80089e0:	4620      	mov	r0, r4
 80089e2:	f7ff f961 	bl	8007ca8 <__lshift>
 80089e6:	9016      	str	r0, [sp, #88]	; 0x58
 80089e8:	2800      	cmp	r0, #0
 80089ea:	f47f af6b 	bne.w	80088c4 <_strtod_l+0x73c>
 80089ee:	e60f      	b.n	8008610 <_strtod_l+0x488>
 80089f0:	46ca      	mov	sl, r9
 80089f2:	d171      	bne.n	8008ad8 <_strtod_l+0x950>
 80089f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80089fa:	b352      	cbz	r2, 8008a52 <_strtod_l+0x8ca>
 80089fc:	4a33      	ldr	r2, [pc, #204]	; (8008acc <_strtod_l+0x944>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d12a      	bne.n	8008a58 <_strtod_l+0x8d0>
 8008a02:	9b04      	ldr	r3, [sp, #16]
 8008a04:	4641      	mov	r1, r8
 8008a06:	b1fb      	cbz	r3, 8008a48 <_strtod_l+0x8c0>
 8008a08:	4b2e      	ldr	r3, [pc, #184]	; (8008ac4 <_strtod_l+0x93c>)
 8008a0a:	ea09 0303 	and.w	r3, r9, r3
 8008a0e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a12:	f04f 32ff 	mov.w	r2, #4294967295
 8008a16:	d81a      	bhi.n	8008a4e <_strtod_l+0x8c6>
 8008a18:	0d1b      	lsrs	r3, r3, #20
 8008a1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a22:	4299      	cmp	r1, r3
 8008a24:	d118      	bne.n	8008a58 <_strtod_l+0x8d0>
 8008a26:	4b2a      	ldr	r3, [pc, #168]	; (8008ad0 <_strtod_l+0x948>)
 8008a28:	459a      	cmp	sl, r3
 8008a2a:	d102      	bne.n	8008a32 <_strtod_l+0x8aa>
 8008a2c:	3101      	adds	r1, #1
 8008a2e:	f43f adef 	beq.w	8008610 <_strtod_l+0x488>
 8008a32:	4b24      	ldr	r3, [pc, #144]	; (8008ac4 <_strtod_l+0x93c>)
 8008a34:	ea0a 0303 	and.w	r3, sl, r3
 8008a38:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008a3c:	f04f 0800 	mov.w	r8, #0
 8008a40:	9b04      	ldr	r3, [sp, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1a2      	bne.n	800898c <_strtod_l+0x804>
 8008a46:	e5ed      	b.n	8008624 <_strtod_l+0x49c>
 8008a48:	f04f 33ff 	mov.w	r3, #4294967295
 8008a4c:	e7e9      	b.n	8008a22 <_strtod_l+0x89a>
 8008a4e:	4613      	mov	r3, r2
 8008a50:	e7e7      	b.n	8008a22 <_strtod_l+0x89a>
 8008a52:	ea53 0308 	orrs.w	r3, r3, r8
 8008a56:	d08a      	beq.n	800896e <_strtod_l+0x7e6>
 8008a58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a5a:	b1e3      	cbz	r3, 8008a96 <_strtod_l+0x90e>
 8008a5c:	ea13 0f0a 	tst.w	r3, sl
 8008a60:	d0ee      	beq.n	8008a40 <_strtod_l+0x8b8>
 8008a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a64:	9a04      	ldr	r2, [sp, #16]
 8008a66:	4640      	mov	r0, r8
 8008a68:	4649      	mov	r1, r9
 8008a6a:	b1c3      	cbz	r3, 8008a9e <_strtod_l+0x916>
 8008a6c:	f7ff fb6f 	bl	800814e <sulp>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	ec51 0b18 	vmov	r0, r1, d8
 8008a78:	f7f7 fc08 	bl	800028c <__adddf3>
 8008a7c:	4680      	mov	r8, r0
 8008a7e:	4689      	mov	r9, r1
 8008a80:	e7de      	b.n	8008a40 <_strtod_l+0x8b8>
 8008a82:	4013      	ands	r3, r2
 8008a84:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008a88:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008a8c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008a90:	f04f 38ff 	mov.w	r8, #4294967295
 8008a94:	e7d4      	b.n	8008a40 <_strtod_l+0x8b8>
 8008a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a98:	ea13 0f08 	tst.w	r3, r8
 8008a9c:	e7e0      	b.n	8008a60 <_strtod_l+0x8d8>
 8008a9e:	f7ff fb56 	bl	800814e <sulp>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	ec51 0b18 	vmov	r0, r1, d8
 8008aaa:	f7f7 fbed 	bl	8000288 <__aeabi_dsub>
 8008aae:	2200      	movs	r2, #0
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	4680      	mov	r8, r0
 8008ab4:	4689      	mov	r9, r1
 8008ab6:	f7f8 f807 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d0c0      	beq.n	8008a40 <_strtod_l+0x8b8>
 8008abe:	e618      	b.n	80086f2 <_strtod_l+0x56a>
 8008ac0:	fffffc02 	.word	0xfffffc02
 8008ac4:	7ff00000 	.word	0x7ff00000
 8008ac8:	39500000 	.word	0x39500000
 8008acc:	000fffff 	.word	0x000fffff
 8008ad0:	7fefffff 	.word	0x7fefffff
 8008ad4:	0800a4d0 	.word	0x0800a4d0
 8008ad8:	4659      	mov	r1, fp
 8008ada:	4628      	mov	r0, r5
 8008adc:	f7ff fac0 	bl	8008060 <__ratio>
 8008ae0:	ec57 6b10 	vmov	r6, r7, d0
 8008ae4:	ee10 0a10 	vmov	r0, s0
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008aee:	4639      	mov	r1, r7
 8008af0:	f7f7 fffe 	bl	8000af0 <__aeabi_dcmple>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d071      	beq.n	8008bdc <_strtod_l+0xa54>
 8008af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d17c      	bne.n	8008bf8 <_strtod_l+0xa70>
 8008afe:	f1b8 0f00 	cmp.w	r8, #0
 8008b02:	d15a      	bne.n	8008bba <_strtod_l+0xa32>
 8008b04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d15d      	bne.n	8008bc8 <_strtod_l+0xa40>
 8008b0c:	4b90      	ldr	r3, [pc, #576]	; (8008d50 <_strtod_l+0xbc8>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4630      	mov	r0, r6
 8008b12:	4639      	mov	r1, r7
 8008b14:	f7f7 ffe2 	bl	8000adc <__aeabi_dcmplt>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d15c      	bne.n	8008bd6 <_strtod_l+0xa4e>
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	4639      	mov	r1, r7
 8008b20:	4b8c      	ldr	r3, [pc, #560]	; (8008d54 <_strtod_l+0xbcc>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	f7f7 fd68 	bl	80005f8 <__aeabi_dmul>
 8008b28:	4606      	mov	r6, r0
 8008b2a:	460f      	mov	r7, r1
 8008b2c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008b30:	9606      	str	r6, [sp, #24]
 8008b32:	9307      	str	r3, [sp, #28]
 8008b34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008b3c:	4b86      	ldr	r3, [pc, #536]	; (8008d58 <_strtod_l+0xbd0>)
 8008b3e:	ea0a 0303 	and.w	r3, sl, r3
 8008b42:	930d      	str	r3, [sp, #52]	; 0x34
 8008b44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b46:	4b85      	ldr	r3, [pc, #532]	; (8008d5c <_strtod_l+0xbd4>)
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	f040 8090 	bne.w	8008c6e <_strtod_l+0xae6>
 8008b4e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008b52:	ec49 8b10 	vmov	d0, r8, r9
 8008b56:	f7ff f9b9 	bl	8007ecc <__ulp>
 8008b5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b5e:	ec51 0b10 	vmov	r0, r1, d0
 8008b62:	f7f7 fd49 	bl	80005f8 <__aeabi_dmul>
 8008b66:	4642      	mov	r2, r8
 8008b68:	464b      	mov	r3, r9
 8008b6a:	f7f7 fb8f 	bl	800028c <__adddf3>
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4979      	ldr	r1, [pc, #484]	; (8008d58 <_strtod_l+0xbd0>)
 8008b72:	4a7b      	ldr	r2, [pc, #492]	; (8008d60 <_strtod_l+0xbd8>)
 8008b74:	4019      	ands	r1, r3
 8008b76:	4291      	cmp	r1, r2
 8008b78:	4680      	mov	r8, r0
 8008b7a:	d944      	bls.n	8008c06 <_strtod_l+0xa7e>
 8008b7c:	ee18 2a90 	vmov	r2, s17
 8008b80:	4b78      	ldr	r3, [pc, #480]	; (8008d64 <_strtod_l+0xbdc>)
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d104      	bne.n	8008b90 <_strtod_l+0xa08>
 8008b86:	ee18 3a10 	vmov	r3, s16
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	f43f ad40 	beq.w	8008610 <_strtod_l+0x488>
 8008b90:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008d64 <_strtod_l+0xbdc>
 8008b94:	f04f 38ff 	mov.w	r8, #4294967295
 8008b98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f7fe fe6a 	bl	8007874 <_Bfree>
 8008ba0:	9905      	ldr	r1, [sp, #20]
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f7fe fe66 	bl	8007874 <_Bfree>
 8008ba8:	4659      	mov	r1, fp
 8008baa:	4620      	mov	r0, r4
 8008bac:	f7fe fe62 	bl	8007874 <_Bfree>
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f7fe fe5e 	bl	8007874 <_Bfree>
 8008bb8:	e609      	b.n	80087ce <_strtod_l+0x646>
 8008bba:	f1b8 0f01 	cmp.w	r8, #1
 8008bbe:	d103      	bne.n	8008bc8 <_strtod_l+0xa40>
 8008bc0:	f1b9 0f00 	cmp.w	r9, #0
 8008bc4:	f43f ad95 	beq.w	80086f2 <_strtod_l+0x56a>
 8008bc8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008d20 <_strtod_l+0xb98>
 8008bcc:	4f60      	ldr	r7, [pc, #384]	; (8008d50 <_strtod_l+0xbc8>)
 8008bce:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	e7ae      	b.n	8008b34 <_strtod_l+0x9ac>
 8008bd6:	4f5f      	ldr	r7, [pc, #380]	; (8008d54 <_strtod_l+0xbcc>)
 8008bd8:	2600      	movs	r6, #0
 8008bda:	e7a7      	b.n	8008b2c <_strtod_l+0x9a4>
 8008bdc:	4b5d      	ldr	r3, [pc, #372]	; (8008d54 <_strtod_l+0xbcc>)
 8008bde:	4630      	mov	r0, r6
 8008be0:	4639      	mov	r1, r7
 8008be2:	2200      	movs	r2, #0
 8008be4:	f7f7 fd08 	bl	80005f8 <__aeabi_dmul>
 8008be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bea:	4606      	mov	r6, r0
 8008bec:	460f      	mov	r7, r1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d09c      	beq.n	8008b2c <_strtod_l+0x9a4>
 8008bf2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008bf6:	e79d      	b.n	8008b34 <_strtod_l+0x9ac>
 8008bf8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008d28 <_strtod_l+0xba0>
 8008bfc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c00:	ec57 6b17 	vmov	r6, r7, d7
 8008c04:	e796      	b.n	8008b34 <_strtod_l+0x9ac>
 8008c06:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008c0a:	9b04      	ldr	r3, [sp, #16]
 8008c0c:	46ca      	mov	sl, r9
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1c2      	bne.n	8008b98 <_strtod_l+0xa10>
 8008c12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c18:	0d1b      	lsrs	r3, r3, #20
 8008c1a:	051b      	lsls	r3, r3, #20
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d1bb      	bne.n	8008b98 <_strtod_l+0xa10>
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f7f8 f848 	bl	8000cb8 <__aeabi_d2lz>
 8008c28:	f7f7 fcb8 	bl	800059c <__aeabi_l2d>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4630      	mov	r0, r6
 8008c32:	4639      	mov	r1, r7
 8008c34:	f7f7 fb28 	bl	8000288 <__aeabi_dsub>
 8008c38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c3e:	ea43 0308 	orr.w	r3, r3, r8
 8008c42:	4313      	orrs	r3, r2
 8008c44:	4606      	mov	r6, r0
 8008c46:	460f      	mov	r7, r1
 8008c48:	d054      	beq.n	8008cf4 <_strtod_l+0xb6c>
 8008c4a:	a339      	add	r3, pc, #228	; (adr r3, 8008d30 <_strtod_l+0xba8>)
 8008c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c50:	f7f7 ff44 	bl	8000adc <__aeabi_dcmplt>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f47f ace5 	bne.w	8008624 <_strtod_l+0x49c>
 8008c5a:	a337      	add	r3, pc, #220	; (adr r3, 8008d38 <_strtod_l+0xbb0>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	4630      	mov	r0, r6
 8008c62:	4639      	mov	r1, r7
 8008c64:	f7f7 ff58 	bl	8000b18 <__aeabi_dcmpgt>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d095      	beq.n	8008b98 <_strtod_l+0xa10>
 8008c6c:	e4da      	b.n	8008624 <_strtod_l+0x49c>
 8008c6e:	9b04      	ldr	r3, [sp, #16]
 8008c70:	b333      	cbz	r3, 8008cc0 <_strtod_l+0xb38>
 8008c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c74:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c78:	d822      	bhi.n	8008cc0 <_strtod_l+0xb38>
 8008c7a:	a331      	add	r3, pc, #196	; (adr r3, 8008d40 <_strtod_l+0xbb8>)
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	4630      	mov	r0, r6
 8008c82:	4639      	mov	r1, r7
 8008c84:	f7f7 ff34 	bl	8000af0 <__aeabi_dcmple>
 8008c88:	b1a0      	cbz	r0, 8008cb4 <_strtod_l+0xb2c>
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	f7f7 ff8b 	bl	8000ba8 <__aeabi_d2uiz>
 8008c92:	2801      	cmp	r0, #1
 8008c94:	bf38      	it	cc
 8008c96:	2001      	movcc	r0, #1
 8008c98:	f7f7 fc34 	bl	8000504 <__aeabi_ui2d>
 8008c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	460f      	mov	r7, r1
 8008ca2:	bb23      	cbnz	r3, 8008cee <_strtod_l+0xb66>
 8008ca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ca8:	9010      	str	r0, [sp, #64]	; 0x40
 8008caa:	9311      	str	r3, [sp, #68]	; 0x44
 8008cac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cb8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008cbc:	1a9b      	subs	r3, r3, r2
 8008cbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cc0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008cc4:	eeb0 0a48 	vmov.f32	s0, s16
 8008cc8:	eef0 0a68 	vmov.f32	s1, s17
 8008ccc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008cd0:	f7ff f8fc 	bl	8007ecc <__ulp>
 8008cd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008cd8:	ec53 2b10 	vmov	r2, r3, d0
 8008cdc:	f7f7 fc8c 	bl	80005f8 <__aeabi_dmul>
 8008ce0:	ec53 2b18 	vmov	r2, r3, d8
 8008ce4:	f7f7 fad2 	bl	800028c <__adddf3>
 8008ce8:	4680      	mov	r8, r0
 8008cea:	4689      	mov	r9, r1
 8008cec:	e78d      	b.n	8008c0a <_strtod_l+0xa82>
 8008cee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008cf2:	e7db      	b.n	8008cac <_strtod_l+0xb24>
 8008cf4:	a314      	add	r3, pc, #80	; (adr r3, 8008d48 <_strtod_l+0xbc0>)
 8008cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfa:	f7f7 feef 	bl	8000adc <__aeabi_dcmplt>
 8008cfe:	e7b3      	b.n	8008c68 <_strtod_l+0xae0>
 8008d00:	2300      	movs	r3, #0
 8008d02:	930a      	str	r3, [sp, #40]	; 0x28
 8008d04:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d08:	6013      	str	r3, [r2, #0]
 8008d0a:	f7ff ba7c 	b.w	8008206 <_strtod_l+0x7e>
 8008d0e:	2a65      	cmp	r2, #101	; 0x65
 8008d10:	f43f ab75 	beq.w	80083fe <_strtod_l+0x276>
 8008d14:	2a45      	cmp	r2, #69	; 0x45
 8008d16:	f43f ab72 	beq.w	80083fe <_strtod_l+0x276>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	f7ff bbaa 	b.w	8008474 <_strtod_l+0x2ec>
 8008d20:	00000000 	.word	0x00000000
 8008d24:	bff00000 	.word	0xbff00000
 8008d28:	00000000 	.word	0x00000000
 8008d2c:	3ff00000 	.word	0x3ff00000
 8008d30:	94a03595 	.word	0x94a03595
 8008d34:	3fdfffff 	.word	0x3fdfffff
 8008d38:	35afe535 	.word	0x35afe535
 8008d3c:	3fe00000 	.word	0x3fe00000
 8008d40:	ffc00000 	.word	0xffc00000
 8008d44:	41dfffff 	.word	0x41dfffff
 8008d48:	94a03595 	.word	0x94a03595
 8008d4c:	3fcfffff 	.word	0x3fcfffff
 8008d50:	3ff00000 	.word	0x3ff00000
 8008d54:	3fe00000 	.word	0x3fe00000
 8008d58:	7ff00000 	.word	0x7ff00000
 8008d5c:	7fe00000 	.word	0x7fe00000
 8008d60:	7c9fffff 	.word	0x7c9fffff
 8008d64:	7fefffff 	.word	0x7fefffff

08008d68 <_strtod_r>:
 8008d68:	4b01      	ldr	r3, [pc, #4]	; (8008d70 <_strtod_r+0x8>)
 8008d6a:	f7ff ba0d 	b.w	8008188 <_strtod_l>
 8008d6e:	bf00      	nop
 8008d70:	20000068 	.word	0x20000068

08008d74 <_strtol_l.constprop.0>:
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d7a:	d001      	beq.n	8008d80 <_strtol_l.constprop.0+0xc>
 8008d7c:	2b24      	cmp	r3, #36	; 0x24
 8008d7e:	d906      	bls.n	8008d8e <_strtol_l.constprop.0+0x1a>
 8008d80:	f7fd fd7a 	bl	8006878 <__errno>
 8008d84:	2316      	movs	r3, #22
 8008d86:	6003      	str	r3, [r0, #0]
 8008d88:	2000      	movs	r0, #0
 8008d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008e74 <_strtol_l.constprop.0+0x100>
 8008d92:	460d      	mov	r5, r1
 8008d94:	462e      	mov	r6, r5
 8008d96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d9a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008d9e:	f017 0708 	ands.w	r7, r7, #8
 8008da2:	d1f7      	bne.n	8008d94 <_strtol_l.constprop.0+0x20>
 8008da4:	2c2d      	cmp	r4, #45	; 0x2d
 8008da6:	d132      	bne.n	8008e0e <_strtol_l.constprop.0+0x9a>
 8008da8:	782c      	ldrb	r4, [r5, #0]
 8008daa:	2701      	movs	r7, #1
 8008dac:	1cb5      	adds	r5, r6, #2
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d05b      	beq.n	8008e6a <_strtol_l.constprop.0+0xf6>
 8008db2:	2b10      	cmp	r3, #16
 8008db4:	d109      	bne.n	8008dca <_strtol_l.constprop.0+0x56>
 8008db6:	2c30      	cmp	r4, #48	; 0x30
 8008db8:	d107      	bne.n	8008dca <_strtol_l.constprop.0+0x56>
 8008dba:	782c      	ldrb	r4, [r5, #0]
 8008dbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008dc0:	2c58      	cmp	r4, #88	; 0x58
 8008dc2:	d14d      	bne.n	8008e60 <_strtol_l.constprop.0+0xec>
 8008dc4:	786c      	ldrb	r4, [r5, #1]
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	3502      	adds	r5, #2
 8008dca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008dce:	f108 38ff 	add.w	r8, r8, #4294967295
 8008dd2:	f04f 0e00 	mov.w	lr, #0
 8008dd6:	fbb8 f9f3 	udiv	r9, r8, r3
 8008dda:	4676      	mov	r6, lr
 8008ddc:	fb03 8a19 	mls	sl, r3, r9, r8
 8008de0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008de4:	f1bc 0f09 	cmp.w	ip, #9
 8008de8:	d816      	bhi.n	8008e18 <_strtol_l.constprop.0+0xa4>
 8008dea:	4664      	mov	r4, ip
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	dd24      	ble.n	8008e3a <_strtol_l.constprop.0+0xc6>
 8008df0:	f1be 3fff 	cmp.w	lr, #4294967295
 8008df4:	d008      	beq.n	8008e08 <_strtol_l.constprop.0+0x94>
 8008df6:	45b1      	cmp	r9, r6
 8008df8:	d31c      	bcc.n	8008e34 <_strtol_l.constprop.0+0xc0>
 8008dfa:	d101      	bne.n	8008e00 <_strtol_l.constprop.0+0x8c>
 8008dfc:	45a2      	cmp	sl, r4
 8008dfe:	db19      	blt.n	8008e34 <_strtol_l.constprop.0+0xc0>
 8008e00:	fb06 4603 	mla	r6, r6, r3, r4
 8008e04:	f04f 0e01 	mov.w	lr, #1
 8008e08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e0c:	e7e8      	b.n	8008de0 <_strtol_l.constprop.0+0x6c>
 8008e0e:	2c2b      	cmp	r4, #43	; 0x2b
 8008e10:	bf04      	itt	eq
 8008e12:	782c      	ldrbeq	r4, [r5, #0]
 8008e14:	1cb5      	addeq	r5, r6, #2
 8008e16:	e7ca      	b.n	8008dae <_strtol_l.constprop.0+0x3a>
 8008e18:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008e1c:	f1bc 0f19 	cmp.w	ip, #25
 8008e20:	d801      	bhi.n	8008e26 <_strtol_l.constprop.0+0xb2>
 8008e22:	3c37      	subs	r4, #55	; 0x37
 8008e24:	e7e2      	b.n	8008dec <_strtol_l.constprop.0+0x78>
 8008e26:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008e2a:	f1bc 0f19 	cmp.w	ip, #25
 8008e2e:	d804      	bhi.n	8008e3a <_strtol_l.constprop.0+0xc6>
 8008e30:	3c57      	subs	r4, #87	; 0x57
 8008e32:	e7db      	b.n	8008dec <_strtol_l.constprop.0+0x78>
 8008e34:	f04f 3eff 	mov.w	lr, #4294967295
 8008e38:	e7e6      	b.n	8008e08 <_strtol_l.constprop.0+0x94>
 8008e3a:	f1be 3fff 	cmp.w	lr, #4294967295
 8008e3e:	d105      	bne.n	8008e4c <_strtol_l.constprop.0+0xd8>
 8008e40:	2322      	movs	r3, #34	; 0x22
 8008e42:	6003      	str	r3, [r0, #0]
 8008e44:	4646      	mov	r6, r8
 8008e46:	b942      	cbnz	r2, 8008e5a <_strtol_l.constprop.0+0xe6>
 8008e48:	4630      	mov	r0, r6
 8008e4a:	e79e      	b.n	8008d8a <_strtol_l.constprop.0+0x16>
 8008e4c:	b107      	cbz	r7, 8008e50 <_strtol_l.constprop.0+0xdc>
 8008e4e:	4276      	negs	r6, r6
 8008e50:	2a00      	cmp	r2, #0
 8008e52:	d0f9      	beq.n	8008e48 <_strtol_l.constprop.0+0xd4>
 8008e54:	f1be 0f00 	cmp.w	lr, #0
 8008e58:	d000      	beq.n	8008e5c <_strtol_l.constprop.0+0xe8>
 8008e5a:	1e69      	subs	r1, r5, #1
 8008e5c:	6011      	str	r1, [r2, #0]
 8008e5e:	e7f3      	b.n	8008e48 <_strtol_l.constprop.0+0xd4>
 8008e60:	2430      	movs	r4, #48	; 0x30
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1b1      	bne.n	8008dca <_strtol_l.constprop.0+0x56>
 8008e66:	2308      	movs	r3, #8
 8008e68:	e7af      	b.n	8008dca <_strtol_l.constprop.0+0x56>
 8008e6a:	2c30      	cmp	r4, #48	; 0x30
 8008e6c:	d0a5      	beq.n	8008dba <_strtol_l.constprop.0+0x46>
 8008e6e:	230a      	movs	r3, #10
 8008e70:	e7ab      	b.n	8008dca <_strtol_l.constprop.0+0x56>
 8008e72:	bf00      	nop
 8008e74:	0800a4f9 	.word	0x0800a4f9

08008e78 <_strtol_r>:
 8008e78:	f7ff bf7c 	b.w	8008d74 <_strtol_l.constprop.0>

08008e7c <__ssputs_r>:
 8008e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e80:	688e      	ldr	r6, [r1, #8]
 8008e82:	461f      	mov	r7, r3
 8008e84:	42be      	cmp	r6, r7
 8008e86:	680b      	ldr	r3, [r1, #0]
 8008e88:	4682      	mov	sl, r0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	4690      	mov	r8, r2
 8008e8e:	d82c      	bhi.n	8008eea <__ssputs_r+0x6e>
 8008e90:	898a      	ldrh	r2, [r1, #12]
 8008e92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e96:	d026      	beq.n	8008ee6 <__ssputs_r+0x6a>
 8008e98:	6965      	ldr	r5, [r4, #20]
 8008e9a:	6909      	ldr	r1, [r1, #16]
 8008e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ea0:	eba3 0901 	sub.w	r9, r3, r1
 8008ea4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ea8:	1c7b      	adds	r3, r7, #1
 8008eaa:	444b      	add	r3, r9
 8008eac:	106d      	asrs	r5, r5, #1
 8008eae:	429d      	cmp	r5, r3
 8008eb0:	bf38      	it	cc
 8008eb2:	461d      	movcc	r5, r3
 8008eb4:	0553      	lsls	r3, r2, #21
 8008eb6:	d527      	bpl.n	8008f08 <__ssputs_r+0x8c>
 8008eb8:	4629      	mov	r1, r5
 8008eba:	f7fe fc0f 	bl	80076dc <_malloc_r>
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	b360      	cbz	r0, 8008f1c <__ssputs_r+0xa0>
 8008ec2:	6921      	ldr	r1, [r4, #16]
 8008ec4:	464a      	mov	r2, r9
 8008ec6:	f7fd fd04 	bl	80068d2 <memcpy>
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed4:	81a3      	strh	r3, [r4, #12]
 8008ed6:	6126      	str	r6, [r4, #16]
 8008ed8:	6165      	str	r5, [r4, #20]
 8008eda:	444e      	add	r6, r9
 8008edc:	eba5 0509 	sub.w	r5, r5, r9
 8008ee0:	6026      	str	r6, [r4, #0]
 8008ee2:	60a5      	str	r5, [r4, #8]
 8008ee4:	463e      	mov	r6, r7
 8008ee6:	42be      	cmp	r6, r7
 8008ee8:	d900      	bls.n	8008eec <__ssputs_r+0x70>
 8008eea:	463e      	mov	r6, r7
 8008eec:	6820      	ldr	r0, [r4, #0]
 8008eee:	4632      	mov	r2, r6
 8008ef0:	4641      	mov	r1, r8
 8008ef2:	f000 f9c9 	bl	8009288 <memmove>
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	1b9b      	subs	r3, r3, r6
 8008efa:	60a3      	str	r3, [r4, #8]
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	4433      	add	r3, r6
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	2000      	movs	r0, #0
 8008f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f08:	462a      	mov	r2, r5
 8008f0a:	f000 fd9e 	bl	8009a4a <_realloc_r>
 8008f0e:	4606      	mov	r6, r0
 8008f10:	2800      	cmp	r0, #0
 8008f12:	d1e0      	bne.n	8008ed6 <__ssputs_r+0x5a>
 8008f14:	6921      	ldr	r1, [r4, #16]
 8008f16:	4650      	mov	r0, sl
 8008f18:	f7fe fb6c 	bl	80075f4 <_free_r>
 8008f1c:	230c      	movs	r3, #12
 8008f1e:	f8ca 3000 	str.w	r3, [sl]
 8008f22:	89a3      	ldrh	r3, [r4, #12]
 8008f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f28:	81a3      	strh	r3, [r4, #12]
 8008f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2e:	e7e9      	b.n	8008f04 <__ssputs_r+0x88>

08008f30 <_svfiprintf_r>:
 8008f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f34:	4698      	mov	r8, r3
 8008f36:	898b      	ldrh	r3, [r1, #12]
 8008f38:	061b      	lsls	r3, r3, #24
 8008f3a:	b09d      	sub	sp, #116	; 0x74
 8008f3c:	4607      	mov	r7, r0
 8008f3e:	460d      	mov	r5, r1
 8008f40:	4614      	mov	r4, r2
 8008f42:	d50e      	bpl.n	8008f62 <_svfiprintf_r+0x32>
 8008f44:	690b      	ldr	r3, [r1, #16]
 8008f46:	b963      	cbnz	r3, 8008f62 <_svfiprintf_r+0x32>
 8008f48:	2140      	movs	r1, #64	; 0x40
 8008f4a:	f7fe fbc7 	bl	80076dc <_malloc_r>
 8008f4e:	6028      	str	r0, [r5, #0]
 8008f50:	6128      	str	r0, [r5, #16]
 8008f52:	b920      	cbnz	r0, 8008f5e <_svfiprintf_r+0x2e>
 8008f54:	230c      	movs	r3, #12
 8008f56:	603b      	str	r3, [r7, #0]
 8008f58:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5c:	e0d0      	b.n	8009100 <_svfiprintf_r+0x1d0>
 8008f5e:	2340      	movs	r3, #64	; 0x40
 8008f60:	616b      	str	r3, [r5, #20]
 8008f62:	2300      	movs	r3, #0
 8008f64:	9309      	str	r3, [sp, #36]	; 0x24
 8008f66:	2320      	movs	r3, #32
 8008f68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f70:	2330      	movs	r3, #48	; 0x30
 8008f72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009118 <_svfiprintf_r+0x1e8>
 8008f76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f7a:	f04f 0901 	mov.w	r9, #1
 8008f7e:	4623      	mov	r3, r4
 8008f80:	469a      	mov	sl, r3
 8008f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f86:	b10a      	cbz	r2, 8008f8c <_svfiprintf_r+0x5c>
 8008f88:	2a25      	cmp	r2, #37	; 0x25
 8008f8a:	d1f9      	bne.n	8008f80 <_svfiprintf_r+0x50>
 8008f8c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f90:	d00b      	beq.n	8008faa <_svfiprintf_r+0x7a>
 8008f92:	465b      	mov	r3, fp
 8008f94:	4622      	mov	r2, r4
 8008f96:	4629      	mov	r1, r5
 8008f98:	4638      	mov	r0, r7
 8008f9a:	f7ff ff6f 	bl	8008e7c <__ssputs_r>
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	f000 80a9 	beq.w	80090f6 <_svfiprintf_r+0x1c6>
 8008fa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fa6:	445a      	add	r2, fp
 8008fa8:	9209      	str	r2, [sp, #36]	; 0x24
 8008faa:	f89a 3000 	ldrb.w	r3, [sl]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f000 80a1 	beq.w	80090f6 <_svfiprintf_r+0x1c6>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fbe:	f10a 0a01 	add.w	sl, sl, #1
 8008fc2:	9304      	str	r3, [sp, #16]
 8008fc4:	9307      	str	r3, [sp, #28]
 8008fc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fca:	931a      	str	r3, [sp, #104]	; 0x68
 8008fcc:	4654      	mov	r4, sl
 8008fce:	2205      	movs	r2, #5
 8008fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd4:	4850      	ldr	r0, [pc, #320]	; (8009118 <_svfiprintf_r+0x1e8>)
 8008fd6:	f7f7 f8fb 	bl	80001d0 <memchr>
 8008fda:	9a04      	ldr	r2, [sp, #16]
 8008fdc:	b9d8      	cbnz	r0, 8009016 <_svfiprintf_r+0xe6>
 8008fde:	06d0      	lsls	r0, r2, #27
 8008fe0:	bf44      	itt	mi
 8008fe2:	2320      	movmi	r3, #32
 8008fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fe8:	0711      	lsls	r1, r2, #28
 8008fea:	bf44      	itt	mi
 8008fec:	232b      	movmi	r3, #43	; 0x2b
 8008fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff8:	d015      	beq.n	8009026 <_svfiprintf_r+0xf6>
 8008ffa:	9a07      	ldr	r2, [sp, #28]
 8008ffc:	4654      	mov	r4, sl
 8008ffe:	2000      	movs	r0, #0
 8009000:	f04f 0c0a 	mov.w	ip, #10
 8009004:	4621      	mov	r1, r4
 8009006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800900a:	3b30      	subs	r3, #48	; 0x30
 800900c:	2b09      	cmp	r3, #9
 800900e:	d94d      	bls.n	80090ac <_svfiprintf_r+0x17c>
 8009010:	b1b0      	cbz	r0, 8009040 <_svfiprintf_r+0x110>
 8009012:	9207      	str	r2, [sp, #28]
 8009014:	e014      	b.n	8009040 <_svfiprintf_r+0x110>
 8009016:	eba0 0308 	sub.w	r3, r0, r8
 800901a:	fa09 f303 	lsl.w	r3, r9, r3
 800901e:	4313      	orrs	r3, r2
 8009020:	9304      	str	r3, [sp, #16]
 8009022:	46a2      	mov	sl, r4
 8009024:	e7d2      	b.n	8008fcc <_svfiprintf_r+0x9c>
 8009026:	9b03      	ldr	r3, [sp, #12]
 8009028:	1d19      	adds	r1, r3, #4
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	9103      	str	r1, [sp, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	bfbb      	ittet	lt
 8009032:	425b      	neglt	r3, r3
 8009034:	f042 0202 	orrlt.w	r2, r2, #2
 8009038:	9307      	strge	r3, [sp, #28]
 800903a:	9307      	strlt	r3, [sp, #28]
 800903c:	bfb8      	it	lt
 800903e:	9204      	strlt	r2, [sp, #16]
 8009040:	7823      	ldrb	r3, [r4, #0]
 8009042:	2b2e      	cmp	r3, #46	; 0x2e
 8009044:	d10c      	bne.n	8009060 <_svfiprintf_r+0x130>
 8009046:	7863      	ldrb	r3, [r4, #1]
 8009048:	2b2a      	cmp	r3, #42	; 0x2a
 800904a:	d134      	bne.n	80090b6 <_svfiprintf_r+0x186>
 800904c:	9b03      	ldr	r3, [sp, #12]
 800904e:	1d1a      	adds	r2, r3, #4
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	9203      	str	r2, [sp, #12]
 8009054:	2b00      	cmp	r3, #0
 8009056:	bfb8      	it	lt
 8009058:	f04f 33ff 	movlt.w	r3, #4294967295
 800905c:	3402      	adds	r4, #2
 800905e:	9305      	str	r3, [sp, #20]
 8009060:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009128 <_svfiprintf_r+0x1f8>
 8009064:	7821      	ldrb	r1, [r4, #0]
 8009066:	2203      	movs	r2, #3
 8009068:	4650      	mov	r0, sl
 800906a:	f7f7 f8b1 	bl	80001d0 <memchr>
 800906e:	b138      	cbz	r0, 8009080 <_svfiprintf_r+0x150>
 8009070:	9b04      	ldr	r3, [sp, #16]
 8009072:	eba0 000a 	sub.w	r0, r0, sl
 8009076:	2240      	movs	r2, #64	; 0x40
 8009078:	4082      	lsls	r2, r0
 800907a:	4313      	orrs	r3, r2
 800907c:	3401      	adds	r4, #1
 800907e:	9304      	str	r3, [sp, #16]
 8009080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009084:	4825      	ldr	r0, [pc, #148]	; (800911c <_svfiprintf_r+0x1ec>)
 8009086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800908a:	2206      	movs	r2, #6
 800908c:	f7f7 f8a0 	bl	80001d0 <memchr>
 8009090:	2800      	cmp	r0, #0
 8009092:	d038      	beq.n	8009106 <_svfiprintf_r+0x1d6>
 8009094:	4b22      	ldr	r3, [pc, #136]	; (8009120 <_svfiprintf_r+0x1f0>)
 8009096:	bb1b      	cbnz	r3, 80090e0 <_svfiprintf_r+0x1b0>
 8009098:	9b03      	ldr	r3, [sp, #12]
 800909a:	3307      	adds	r3, #7
 800909c:	f023 0307 	bic.w	r3, r3, #7
 80090a0:	3308      	adds	r3, #8
 80090a2:	9303      	str	r3, [sp, #12]
 80090a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a6:	4433      	add	r3, r6
 80090a8:	9309      	str	r3, [sp, #36]	; 0x24
 80090aa:	e768      	b.n	8008f7e <_svfiprintf_r+0x4e>
 80090ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80090b0:	460c      	mov	r4, r1
 80090b2:	2001      	movs	r0, #1
 80090b4:	e7a6      	b.n	8009004 <_svfiprintf_r+0xd4>
 80090b6:	2300      	movs	r3, #0
 80090b8:	3401      	adds	r4, #1
 80090ba:	9305      	str	r3, [sp, #20]
 80090bc:	4619      	mov	r1, r3
 80090be:	f04f 0c0a 	mov.w	ip, #10
 80090c2:	4620      	mov	r0, r4
 80090c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090c8:	3a30      	subs	r2, #48	; 0x30
 80090ca:	2a09      	cmp	r2, #9
 80090cc:	d903      	bls.n	80090d6 <_svfiprintf_r+0x1a6>
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d0c6      	beq.n	8009060 <_svfiprintf_r+0x130>
 80090d2:	9105      	str	r1, [sp, #20]
 80090d4:	e7c4      	b.n	8009060 <_svfiprintf_r+0x130>
 80090d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80090da:	4604      	mov	r4, r0
 80090dc:	2301      	movs	r3, #1
 80090de:	e7f0      	b.n	80090c2 <_svfiprintf_r+0x192>
 80090e0:	ab03      	add	r3, sp, #12
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	462a      	mov	r2, r5
 80090e6:	4b0f      	ldr	r3, [pc, #60]	; (8009124 <_svfiprintf_r+0x1f4>)
 80090e8:	a904      	add	r1, sp, #16
 80090ea:	4638      	mov	r0, r7
 80090ec:	f7fc fc3e 	bl	800596c <_printf_float>
 80090f0:	1c42      	adds	r2, r0, #1
 80090f2:	4606      	mov	r6, r0
 80090f4:	d1d6      	bne.n	80090a4 <_svfiprintf_r+0x174>
 80090f6:	89ab      	ldrh	r3, [r5, #12]
 80090f8:	065b      	lsls	r3, r3, #25
 80090fa:	f53f af2d 	bmi.w	8008f58 <_svfiprintf_r+0x28>
 80090fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009100:	b01d      	add	sp, #116	; 0x74
 8009102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009106:	ab03      	add	r3, sp, #12
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	462a      	mov	r2, r5
 800910c:	4b05      	ldr	r3, [pc, #20]	; (8009124 <_svfiprintf_r+0x1f4>)
 800910e:	a904      	add	r1, sp, #16
 8009110:	4638      	mov	r0, r7
 8009112:	f7fc fecf 	bl	8005eb4 <_printf_i>
 8009116:	e7eb      	b.n	80090f0 <_svfiprintf_r+0x1c0>
 8009118:	0800a5f9 	.word	0x0800a5f9
 800911c:	0800a603 	.word	0x0800a603
 8009120:	0800596d 	.word	0x0800596d
 8009124:	08008e7d 	.word	0x08008e7d
 8009128:	0800a5ff 	.word	0x0800a5ff

0800912c <__sflush_r>:
 800912c:	898a      	ldrh	r2, [r1, #12]
 800912e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009132:	4605      	mov	r5, r0
 8009134:	0710      	lsls	r0, r2, #28
 8009136:	460c      	mov	r4, r1
 8009138:	d458      	bmi.n	80091ec <__sflush_r+0xc0>
 800913a:	684b      	ldr	r3, [r1, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	dc05      	bgt.n	800914c <__sflush_r+0x20>
 8009140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009142:	2b00      	cmp	r3, #0
 8009144:	dc02      	bgt.n	800914c <__sflush_r+0x20>
 8009146:	2000      	movs	r0, #0
 8009148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800914e:	2e00      	cmp	r6, #0
 8009150:	d0f9      	beq.n	8009146 <__sflush_r+0x1a>
 8009152:	2300      	movs	r3, #0
 8009154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009158:	682f      	ldr	r7, [r5, #0]
 800915a:	6a21      	ldr	r1, [r4, #32]
 800915c:	602b      	str	r3, [r5, #0]
 800915e:	d032      	beq.n	80091c6 <__sflush_r+0x9a>
 8009160:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009162:	89a3      	ldrh	r3, [r4, #12]
 8009164:	075a      	lsls	r2, r3, #29
 8009166:	d505      	bpl.n	8009174 <__sflush_r+0x48>
 8009168:	6863      	ldr	r3, [r4, #4]
 800916a:	1ac0      	subs	r0, r0, r3
 800916c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800916e:	b10b      	cbz	r3, 8009174 <__sflush_r+0x48>
 8009170:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009172:	1ac0      	subs	r0, r0, r3
 8009174:	2300      	movs	r3, #0
 8009176:	4602      	mov	r2, r0
 8009178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800917a:	6a21      	ldr	r1, [r4, #32]
 800917c:	4628      	mov	r0, r5
 800917e:	47b0      	blx	r6
 8009180:	1c43      	adds	r3, r0, #1
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	d106      	bne.n	8009194 <__sflush_r+0x68>
 8009186:	6829      	ldr	r1, [r5, #0]
 8009188:	291d      	cmp	r1, #29
 800918a:	d82b      	bhi.n	80091e4 <__sflush_r+0xb8>
 800918c:	4a29      	ldr	r2, [pc, #164]	; (8009234 <__sflush_r+0x108>)
 800918e:	410a      	asrs	r2, r1
 8009190:	07d6      	lsls	r6, r2, #31
 8009192:	d427      	bmi.n	80091e4 <__sflush_r+0xb8>
 8009194:	2200      	movs	r2, #0
 8009196:	6062      	str	r2, [r4, #4]
 8009198:	04d9      	lsls	r1, r3, #19
 800919a:	6922      	ldr	r2, [r4, #16]
 800919c:	6022      	str	r2, [r4, #0]
 800919e:	d504      	bpl.n	80091aa <__sflush_r+0x7e>
 80091a0:	1c42      	adds	r2, r0, #1
 80091a2:	d101      	bne.n	80091a8 <__sflush_r+0x7c>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	b903      	cbnz	r3, 80091aa <__sflush_r+0x7e>
 80091a8:	6560      	str	r0, [r4, #84]	; 0x54
 80091aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ac:	602f      	str	r7, [r5, #0]
 80091ae:	2900      	cmp	r1, #0
 80091b0:	d0c9      	beq.n	8009146 <__sflush_r+0x1a>
 80091b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091b6:	4299      	cmp	r1, r3
 80091b8:	d002      	beq.n	80091c0 <__sflush_r+0x94>
 80091ba:	4628      	mov	r0, r5
 80091bc:	f7fe fa1a 	bl	80075f4 <_free_r>
 80091c0:	2000      	movs	r0, #0
 80091c2:	6360      	str	r0, [r4, #52]	; 0x34
 80091c4:	e7c0      	b.n	8009148 <__sflush_r+0x1c>
 80091c6:	2301      	movs	r3, #1
 80091c8:	4628      	mov	r0, r5
 80091ca:	47b0      	blx	r6
 80091cc:	1c41      	adds	r1, r0, #1
 80091ce:	d1c8      	bne.n	8009162 <__sflush_r+0x36>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0c5      	beq.n	8009162 <__sflush_r+0x36>
 80091d6:	2b1d      	cmp	r3, #29
 80091d8:	d001      	beq.n	80091de <__sflush_r+0xb2>
 80091da:	2b16      	cmp	r3, #22
 80091dc:	d101      	bne.n	80091e2 <__sflush_r+0xb6>
 80091de:	602f      	str	r7, [r5, #0]
 80091e0:	e7b1      	b.n	8009146 <__sflush_r+0x1a>
 80091e2:	89a3      	ldrh	r3, [r4, #12]
 80091e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091e8:	81a3      	strh	r3, [r4, #12]
 80091ea:	e7ad      	b.n	8009148 <__sflush_r+0x1c>
 80091ec:	690f      	ldr	r7, [r1, #16]
 80091ee:	2f00      	cmp	r7, #0
 80091f0:	d0a9      	beq.n	8009146 <__sflush_r+0x1a>
 80091f2:	0793      	lsls	r3, r2, #30
 80091f4:	680e      	ldr	r6, [r1, #0]
 80091f6:	bf08      	it	eq
 80091f8:	694b      	ldreq	r3, [r1, #20]
 80091fa:	600f      	str	r7, [r1, #0]
 80091fc:	bf18      	it	ne
 80091fe:	2300      	movne	r3, #0
 8009200:	eba6 0807 	sub.w	r8, r6, r7
 8009204:	608b      	str	r3, [r1, #8]
 8009206:	f1b8 0f00 	cmp.w	r8, #0
 800920a:	dd9c      	ble.n	8009146 <__sflush_r+0x1a>
 800920c:	6a21      	ldr	r1, [r4, #32]
 800920e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009210:	4643      	mov	r3, r8
 8009212:	463a      	mov	r2, r7
 8009214:	4628      	mov	r0, r5
 8009216:	47b0      	blx	r6
 8009218:	2800      	cmp	r0, #0
 800921a:	dc06      	bgt.n	800922a <__sflush_r+0xfe>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009222:	81a3      	strh	r3, [r4, #12]
 8009224:	f04f 30ff 	mov.w	r0, #4294967295
 8009228:	e78e      	b.n	8009148 <__sflush_r+0x1c>
 800922a:	4407      	add	r7, r0
 800922c:	eba8 0800 	sub.w	r8, r8, r0
 8009230:	e7e9      	b.n	8009206 <__sflush_r+0xda>
 8009232:	bf00      	nop
 8009234:	dfbffffe 	.word	0xdfbffffe

08009238 <_fflush_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	690b      	ldr	r3, [r1, #16]
 800923c:	4605      	mov	r5, r0
 800923e:	460c      	mov	r4, r1
 8009240:	b913      	cbnz	r3, 8009248 <_fflush_r+0x10>
 8009242:	2500      	movs	r5, #0
 8009244:	4628      	mov	r0, r5
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	b118      	cbz	r0, 8009252 <_fflush_r+0x1a>
 800924a:	6a03      	ldr	r3, [r0, #32]
 800924c:	b90b      	cbnz	r3, 8009252 <_fflush_r+0x1a>
 800924e:	f7fd f9ef 	bl	8006630 <__sinit>
 8009252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0f3      	beq.n	8009242 <_fflush_r+0xa>
 800925a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800925c:	07d0      	lsls	r0, r2, #31
 800925e:	d404      	bmi.n	800926a <_fflush_r+0x32>
 8009260:	0599      	lsls	r1, r3, #22
 8009262:	d402      	bmi.n	800926a <_fflush_r+0x32>
 8009264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009266:	f7fd fb32 	bl	80068ce <__retarget_lock_acquire_recursive>
 800926a:	4628      	mov	r0, r5
 800926c:	4621      	mov	r1, r4
 800926e:	f7ff ff5d 	bl	800912c <__sflush_r>
 8009272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009274:	07da      	lsls	r2, r3, #31
 8009276:	4605      	mov	r5, r0
 8009278:	d4e4      	bmi.n	8009244 <_fflush_r+0xc>
 800927a:	89a3      	ldrh	r3, [r4, #12]
 800927c:	059b      	lsls	r3, r3, #22
 800927e:	d4e1      	bmi.n	8009244 <_fflush_r+0xc>
 8009280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009282:	f7fd fb25 	bl	80068d0 <__retarget_lock_release_recursive>
 8009286:	e7dd      	b.n	8009244 <_fflush_r+0xc>

08009288 <memmove>:
 8009288:	4288      	cmp	r0, r1
 800928a:	b510      	push	{r4, lr}
 800928c:	eb01 0402 	add.w	r4, r1, r2
 8009290:	d902      	bls.n	8009298 <memmove+0x10>
 8009292:	4284      	cmp	r4, r0
 8009294:	4623      	mov	r3, r4
 8009296:	d807      	bhi.n	80092a8 <memmove+0x20>
 8009298:	1e43      	subs	r3, r0, #1
 800929a:	42a1      	cmp	r1, r4
 800929c:	d008      	beq.n	80092b0 <memmove+0x28>
 800929e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092a6:	e7f8      	b.n	800929a <memmove+0x12>
 80092a8:	4402      	add	r2, r0
 80092aa:	4601      	mov	r1, r0
 80092ac:	428a      	cmp	r2, r1
 80092ae:	d100      	bne.n	80092b2 <memmove+0x2a>
 80092b0:	bd10      	pop	{r4, pc}
 80092b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80092ba:	e7f7      	b.n	80092ac <memmove+0x24>

080092bc <strncmp>:
 80092bc:	b510      	push	{r4, lr}
 80092be:	b16a      	cbz	r2, 80092dc <strncmp+0x20>
 80092c0:	3901      	subs	r1, #1
 80092c2:	1884      	adds	r4, r0, r2
 80092c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d103      	bne.n	80092d8 <strncmp+0x1c>
 80092d0:	42a0      	cmp	r0, r4
 80092d2:	d001      	beq.n	80092d8 <strncmp+0x1c>
 80092d4:	2a00      	cmp	r2, #0
 80092d6:	d1f5      	bne.n	80092c4 <strncmp+0x8>
 80092d8:	1ad0      	subs	r0, r2, r3
 80092da:	bd10      	pop	{r4, pc}
 80092dc:	4610      	mov	r0, r2
 80092de:	e7fc      	b.n	80092da <strncmp+0x1e>

080092e0 <_sbrk_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4d06      	ldr	r5, [pc, #24]	; (80092fc <_sbrk_r+0x1c>)
 80092e4:	2300      	movs	r3, #0
 80092e6:	4604      	mov	r4, r0
 80092e8:	4608      	mov	r0, r1
 80092ea:	602b      	str	r3, [r5, #0]
 80092ec:	f7f8 fcae 	bl	8001c4c <_sbrk>
 80092f0:	1c43      	adds	r3, r0, #1
 80092f2:	d102      	bne.n	80092fa <_sbrk_r+0x1a>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	b103      	cbz	r3, 80092fa <_sbrk_r+0x1a>
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	bd38      	pop	{r3, r4, r5, pc}
 80092fc:	2000089c 	.word	0x2000089c

08009300 <nan>:
 8009300:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009308 <nan+0x8>
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	00000000 	.word	0x00000000
 800930c:	7ff80000 	.word	0x7ff80000

08009310 <__assert_func>:
 8009310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009312:	4614      	mov	r4, r2
 8009314:	461a      	mov	r2, r3
 8009316:	4b09      	ldr	r3, [pc, #36]	; (800933c <__assert_func+0x2c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4605      	mov	r5, r0
 800931c:	68d8      	ldr	r0, [r3, #12]
 800931e:	b14c      	cbz	r4, 8009334 <__assert_func+0x24>
 8009320:	4b07      	ldr	r3, [pc, #28]	; (8009340 <__assert_func+0x30>)
 8009322:	9100      	str	r1, [sp, #0]
 8009324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009328:	4906      	ldr	r1, [pc, #24]	; (8009344 <__assert_func+0x34>)
 800932a:	462b      	mov	r3, r5
 800932c:	f000 fbca 	bl	8009ac4 <fiprintf>
 8009330:	f000 fbda 	bl	8009ae8 <abort>
 8009334:	4b04      	ldr	r3, [pc, #16]	; (8009348 <__assert_func+0x38>)
 8009336:	461c      	mov	r4, r3
 8009338:	e7f3      	b.n	8009322 <__assert_func+0x12>
 800933a:	bf00      	nop
 800933c:	20000064 	.word	0x20000064
 8009340:	0800a612 	.word	0x0800a612
 8009344:	0800a61f 	.word	0x0800a61f
 8009348:	0800a64d 	.word	0x0800a64d

0800934c <_calloc_r>:
 800934c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800934e:	fba1 2402 	umull	r2, r4, r1, r2
 8009352:	b94c      	cbnz	r4, 8009368 <_calloc_r+0x1c>
 8009354:	4611      	mov	r1, r2
 8009356:	9201      	str	r2, [sp, #4]
 8009358:	f7fe f9c0 	bl	80076dc <_malloc_r>
 800935c:	9a01      	ldr	r2, [sp, #4]
 800935e:	4605      	mov	r5, r0
 8009360:	b930      	cbnz	r0, 8009370 <_calloc_r+0x24>
 8009362:	4628      	mov	r0, r5
 8009364:	b003      	add	sp, #12
 8009366:	bd30      	pop	{r4, r5, pc}
 8009368:	220c      	movs	r2, #12
 800936a:	6002      	str	r2, [r0, #0]
 800936c:	2500      	movs	r5, #0
 800936e:	e7f8      	b.n	8009362 <_calloc_r+0x16>
 8009370:	4621      	mov	r1, r4
 8009372:	f7fd fa2f 	bl	80067d4 <memset>
 8009376:	e7f4      	b.n	8009362 <_calloc_r+0x16>

08009378 <rshift>:
 8009378:	6903      	ldr	r3, [r0, #16]
 800937a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800937e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009382:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009386:	f100 0414 	add.w	r4, r0, #20
 800938a:	dd45      	ble.n	8009418 <rshift+0xa0>
 800938c:	f011 011f 	ands.w	r1, r1, #31
 8009390:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009394:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009398:	d10c      	bne.n	80093b4 <rshift+0x3c>
 800939a:	f100 0710 	add.w	r7, r0, #16
 800939e:	4629      	mov	r1, r5
 80093a0:	42b1      	cmp	r1, r6
 80093a2:	d334      	bcc.n	800940e <rshift+0x96>
 80093a4:	1a9b      	subs	r3, r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	1eea      	subs	r2, r5, #3
 80093aa:	4296      	cmp	r6, r2
 80093ac:	bf38      	it	cc
 80093ae:	2300      	movcc	r3, #0
 80093b0:	4423      	add	r3, r4
 80093b2:	e015      	b.n	80093e0 <rshift+0x68>
 80093b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80093b8:	f1c1 0820 	rsb	r8, r1, #32
 80093bc:	40cf      	lsrs	r7, r1
 80093be:	f105 0e04 	add.w	lr, r5, #4
 80093c2:	46a1      	mov	r9, r4
 80093c4:	4576      	cmp	r6, lr
 80093c6:	46f4      	mov	ip, lr
 80093c8:	d815      	bhi.n	80093f6 <rshift+0x7e>
 80093ca:	1a9a      	subs	r2, r3, r2
 80093cc:	0092      	lsls	r2, r2, #2
 80093ce:	3a04      	subs	r2, #4
 80093d0:	3501      	adds	r5, #1
 80093d2:	42ae      	cmp	r6, r5
 80093d4:	bf38      	it	cc
 80093d6:	2200      	movcc	r2, #0
 80093d8:	18a3      	adds	r3, r4, r2
 80093da:	50a7      	str	r7, [r4, r2]
 80093dc:	b107      	cbz	r7, 80093e0 <rshift+0x68>
 80093de:	3304      	adds	r3, #4
 80093e0:	1b1a      	subs	r2, r3, r4
 80093e2:	42a3      	cmp	r3, r4
 80093e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80093e8:	bf08      	it	eq
 80093ea:	2300      	moveq	r3, #0
 80093ec:	6102      	str	r2, [r0, #16]
 80093ee:	bf08      	it	eq
 80093f0:	6143      	streq	r3, [r0, #20]
 80093f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093f6:	f8dc c000 	ldr.w	ip, [ip]
 80093fa:	fa0c fc08 	lsl.w	ip, ip, r8
 80093fe:	ea4c 0707 	orr.w	r7, ip, r7
 8009402:	f849 7b04 	str.w	r7, [r9], #4
 8009406:	f85e 7b04 	ldr.w	r7, [lr], #4
 800940a:	40cf      	lsrs	r7, r1
 800940c:	e7da      	b.n	80093c4 <rshift+0x4c>
 800940e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009412:	f847 cf04 	str.w	ip, [r7, #4]!
 8009416:	e7c3      	b.n	80093a0 <rshift+0x28>
 8009418:	4623      	mov	r3, r4
 800941a:	e7e1      	b.n	80093e0 <rshift+0x68>

0800941c <__hexdig_fun>:
 800941c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009420:	2b09      	cmp	r3, #9
 8009422:	d802      	bhi.n	800942a <__hexdig_fun+0xe>
 8009424:	3820      	subs	r0, #32
 8009426:	b2c0      	uxtb	r0, r0
 8009428:	4770      	bx	lr
 800942a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800942e:	2b05      	cmp	r3, #5
 8009430:	d801      	bhi.n	8009436 <__hexdig_fun+0x1a>
 8009432:	3847      	subs	r0, #71	; 0x47
 8009434:	e7f7      	b.n	8009426 <__hexdig_fun+0xa>
 8009436:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800943a:	2b05      	cmp	r3, #5
 800943c:	d801      	bhi.n	8009442 <__hexdig_fun+0x26>
 800943e:	3827      	subs	r0, #39	; 0x27
 8009440:	e7f1      	b.n	8009426 <__hexdig_fun+0xa>
 8009442:	2000      	movs	r0, #0
 8009444:	4770      	bx	lr
	...

08009448 <__gethex>:
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	4617      	mov	r7, r2
 800944e:	680a      	ldr	r2, [r1, #0]
 8009450:	b085      	sub	sp, #20
 8009452:	f102 0b02 	add.w	fp, r2, #2
 8009456:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800945a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800945e:	4681      	mov	r9, r0
 8009460:	468a      	mov	sl, r1
 8009462:	9302      	str	r3, [sp, #8]
 8009464:	32fe      	adds	r2, #254	; 0xfe
 8009466:	eb02 030b 	add.w	r3, r2, fp
 800946a:	46d8      	mov	r8, fp
 800946c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009470:	9301      	str	r3, [sp, #4]
 8009472:	2830      	cmp	r0, #48	; 0x30
 8009474:	d0f7      	beq.n	8009466 <__gethex+0x1e>
 8009476:	f7ff ffd1 	bl	800941c <__hexdig_fun>
 800947a:	4604      	mov	r4, r0
 800947c:	2800      	cmp	r0, #0
 800947e:	d138      	bne.n	80094f2 <__gethex+0xaa>
 8009480:	49a7      	ldr	r1, [pc, #668]	; (8009720 <__gethex+0x2d8>)
 8009482:	2201      	movs	r2, #1
 8009484:	4640      	mov	r0, r8
 8009486:	f7ff ff19 	bl	80092bc <strncmp>
 800948a:	4606      	mov	r6, r0
 800948c:	2800      	cmp	r0, #0
 800948e:	d169      	bne.n	8009564 <__gethex+0x11c>
 8009490:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009494:	465d      	mov	r5, fp
 8009496:	f7ff ffc1 	bl	800941c <__hexdig_fun>
 800949a:	2800      	cmp	r0, #0
 800949c:	d064      	beq.n	8009568 <__gethex+0x120>
 800949e:	465a      	mov	r2, fp
 80094a0:	7810      	ldrb	r0, [r2, #0]
 80094a2:	2830      	cmp	r0, #48	; 0x30
 80094a4:	4690      	mov	r8, r2
 80094a6:	f102 0201 	add.w	r2, r2, #1
 80094aa:	d0f9      	beq.n	80094a0 <__gethex+0x58>
 80094ac:	f7ff ffb6 	bl	800941c <__hexdig_fun>
 80094b0:	2301      	movs	r3, #1
 80094b2:	fab0 f480 	clz	r4, r0
 80094b6:	0964      	lsrs	r4, r4, #5
 80094b8:	465e      	mov	r6, fp
 80094ba:	9301      	str	r3, [sp, #4]
 80094bc:	4642      	mov	r2, r8
 80094be:	4615      	mov	r5, r2
 80094c0:	3201      	adds	r2, #1
 80094c2:	7828      	ldrb	r0, [r5, #0]
 80094c4:	f7ff ffaa 	bl	800941c <__hexdig_fun>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d1f8      	bne.n	80094be <__gethex+0x76>
 80094cc:	4994      	ldr	r1, [pc, #592]	; (8009720 <__gethex+0x2d8>)
 80094ce:	2201      	movs	r2, #1
 80094d0:	4628      	mov	r0, r5
 80094d2:	f7ff fef3 	bl	80092bc <strncmp>
 80094d6:	b978      	cbnz	r0, 80094f8 <__gethex+0xb0>
 80094d8:	b946      	cbnz	r6, 80094ec <__gethex+0xa4>
 80094da:	1c6e      	adds	r6, r5, #1
 80094dc:	4632      	mov	r2, r6
 80094de:	4615      	mov	r5, r2
 80094e0:	3201      	adds	r2, #1
 80094e2:	7828      	ldrb	r0, [r5, #0]
 80094e4:	f7ff ff9a 	bl	800941c <__hexdig_fun>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d1f8      	bne.n	80094de <__gethex+0x96>
 80094ec:	1b73      	subs	r3, r6, r5
 80094ee:	009e      	lsls	r6, r3, #2
 80094f0:	e004      	b.n	80094fc <__gethex+0xb4>
 80094f2:	2400      	movs	r4, #0
 80094f4:	4626      	mov	r6, r4
 80094f6:	e7e1      	b.n	80094bc <__gethex+0x74>
 80094f8:	2e00      	cmp	r6, #0
 80094fa:	d1f7      	bne.n	80094ec <__gethex+0xa4>
 80094fc:	782b      	ldrb	r3, [r5, #0]
 80094fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009502:	2b50      	cmp	r3, #80	; 0x50
 8009504:	d13d      	bne.n	8009582 <__gethex+0x13a>
 8009506:	786b      	ldrb	r3, [r5, #1]
 8009508:	2b2b      	cmp	r3, #43	; 0x2b
 800950a:	d02f      	beq.n	800956c <__gethex+0x124>
 800950c:	2b2d      	cmp	r3, #45	; 0x2d
 800950e:	d031      	beq.n	8009574 <__gethex+0x12c>
 8009510:	1c69      	adds	r1, r5, #1
 8009512:	f04f 0b00 	mov.w	fp, #0
 8009516:	7808      	ldrb	r0, [r1, #0]
 8009518:	f7ff ff80 	bl	800941c <__hexdig_fun>
 800951c:	1e42      	subs	r2, r0, #1
 800951e:	b2d2      	uxtb	r2, r2
 8009520:	2a18      	cmp	r2, #24
 8009522:	d82e      	bhi.n	8009582 <__gethex+0x13a>
 8009524:	f1a0 0210 	sub.w	r2, r0, #16
 8009528:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800952c:	f7ff ff76 	bl	800941c <__hexdig_fun>
 8009530:	f100 3cff 	add.w	ip, r0, #4294967295
 8009534:	fa5f fc8c 	uxtb.w	ip, ip
 8009538:	f1bc 0f18 	cmp.w	ip, #24
 800953c:	d91d      	bls.n	800957a <__gethex+0x132>
 800953e:	f1bb 0f00 	cmp.w	fp, #0
 8009542:	d000      	beq.n	8009546 <__gethex+0xfe>
 8009544:	4252      	negs	r2, r2
 8009546:	4416      	add	r6, r2
 8009548:	f8ca 1000 	str.w	r1, [sl]
 800954c:	b1dc      	cbz	r4, 8009586 <__gethex+0x13e>
 800954e:	9b01      	ldr	r3, [sp, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	bf14      	ite	ne
 8009554:	f04f 0800 	movne.w	r8, #0
 8009558:	f04f 0806 	moveq.w	r8, #6
 800955c:	4640      	mov	r0, r8
 800955e:	b005      	add	sp, #20
 8009560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009564:	4645      	mov	r5, r8
 8009566:	4626      	mov	r6, r4
 8009568:	2401      	movs	r4, #1
 800956a:	e7c7      	b.n	80094fc <__gethex+0xb4>
 800956c:	f04f 0b00 	mov.w	fp, #0
 8009570:	1ca9      	adds	r1, r5, #2
 8009572:	e7d0      	b.n	8009516 <__gethex+0xce>
 8009574:	f04f 0b01 	mov.w	fp, #1
 8009578:	e7fa      	b.n	8009570 <__gethex+0x128>
 800957a:	230a      	movs	r3, #10
 800957c:	fb03 0002 	mla	r0, r3, r2, r0
 8009580:	e7d0      	b.n	8009524 <__gethex+0xdc>
 8009582:	4629      	mov	r1, r5
 8009584:	e7e0      	b.n	8009548 <__gethex+0x100>
 8009586:	eba5 0308 	sub.w	r3, r5, r8
 800958a:	3b01      	subs	r3, #1
 800958c:	4621      	mov	r1, r4
 800958e:	2b07      	cmp	r3, #7
 8009590:	dc0a      	bgt.n	80095a8 <__gethex+0x160>
 8009592:	4648      	mov	r0, r9
 8009594:	f7fe f92e 	bl	80077f4 <_Balloc>
 8009598:	4604      	mov	r4, r0
 800959a:	b940      	cbnz	r0, 80095ae <__gethex+0x166>
 800959c:	4b61      	ldr	r3, [pc, #388]	; (8009724 <__gethex+0x2dc>)
 800959e:	4602      	mov	r2, r0
 80095a0:	21e4      	movs	r1, #228	; 0xe4
 80095a2:	4861      	ldr	r0, [pc, #388]	; (8009728 <__gethex+0x2e0>)
 80095a4:	f7ff feb4 	bl	8009310 <__assert_func>
 80095a8:	3101      	adds	r1, #1
 80095aa:	105b      	asrs	r3, r3, #1
 80095ac:	e7ef      	b.n	800958e <__gethex+0x146>
 80095ae:	f100 0a14 	add.w	sl, r0, #20
 80095b2:	2300      	movs	r3, #0
 80095b4:	495a      	ldr	r1, [pc, #360]	; (8009720 <__gethex+0x2d8>)
 80095b6:	f8cd a004 	str.w	sl, [sp, #4]
 80095ba:	469b      	mov	fp, r3
 80095bc:	45a8      	cmp	r8, r5
 80095be:	d342      	bcc.n	8009646 <__gethex+0x1fe>
 80095c0:	9801      	ldr	r0, [sp, #4]
 80095c2:	f840 bb04 	str.w	fp, [r0], #4
 80095c6:	eba0 000a 	sub.w	r0, r0, sl
 80095ca:	1080      	asrs	r0, r0, #2
 80095cc:	6120      	str	r0, [r4, #16]
 80095ce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80095d2:	4658      	mov	r0, fp
 80095d4:	f7fe fa00 	bl	80079d8 <__hi0bits>
 80095d8:	683d      	ldr	r5, [r7, #0]
 80095da:	eba8 0000 	sub.w	r0, r8, r0
 80095de:	42a8      	cmp	r0, r5
 80095e0:	dd59      	ble.n	8009696 <__gethex+0x24e>
 80095e2:	eba0 0805 	sub.w	r8, r0, r5
 80095e6:	4641      	mov	r1, r8
 80095e8:	4620      	mov	r0, r4
 80095ea:	f7fe fd8f 	bl	800810c <__any_on>
 80095ee:	4683      	mov	fp, r0
 80095f0:	b1b8      	cbz	r0, 8009622 <__gethex+0x1da>
 80095f2:	f108 33ff 	add.w	r3, r8, #4294967295
 80095f6:	1159      	asrs	r1, r3, #5
 80095f8:	f003 021f 	and.w	r2, r3, #31
 80095fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009600:	f04f 0b01 	mov.w	fp, #1
 8009604:	fa0b f202 	lsl.w	r2, fp, r2
 8009608:	420a      	tst	r2, r1
 800960a:	d00a      	beq.n	8009622 <__gethex+0x1da>
 800960c:	455b      	cmp	r3, fp
 800960e:	dd06      	ble.n	800961e <__gethex+0x1d6>
 8009610:	f1a8 0102 	sub.w	r1, r8, #2
 8009614:	4620      	mov	r0, r4
 8009616:	f7fe fd79 	bl	800810c <__any_on>
 800961a:	2800      	cmp	r0, #0
 800961c:	d138      	bne.n	8009690 <__gethex+0x248>
 800961e:	f04f 0b02 	mov.w	fp, #2
 8009622:	4641      	mov	r1, r8
 8009624:	4620      	mov	r0, r4
 8009626:	f7ff fea7 	bl	8009378 <rshift>
 800962a:	4446      	add	r6, r8
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	42b3      	cmp	r3, r6
 8009630:	da41      	bge.n	80096b6 <__gethex+0x26e>
 8009632:	4621      	mov	r1, r4
 8009634:	4648      	mov	r0, r9
 8009636:	f7fe f91d 	bl	8007874 <_Bfree>
 800963a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800963c:	2300      	movs	r3, #0
 800963e:	6013      	str	r3, [r2, #0]
 8009640:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009644:	e78a      	b.n	800955c <__gethex+0x114>
 8009646:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800964a:	2a2e      	cmp	r2, #46	; 0x2e
 800964c:	d014      	beq.n	8009678 <__gethex+0x230>
 800964e:	2b20      	cmp	r3, #32
 8009650:	d106      	bne.n	8009660 <__gethex+0x218>
 8009652:	9b01      	ldr	r3, [sp, #4]
 8009654:	f843 bb04 	str.w	fp, [r3], #4
 8009658:	f04f 0b00 	mov.w	fp, #0
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	465b      	mov	r3, fp
 8009660:	7828      	ldrb	r0, [r5, #0]
 8009662:	9303      	str	r3, [sp, #12]
 8009664:	f7ff feda 	bl	800941c <__hexdig_fun>
 8009668:	9b03      	ldr	r3, [sp, #12]
 800966a:	f000 000f 	and.w	r0, r0, #15
 800966e:	4098      	lsls	r0, r3
 8009670:	ea4b 0b00 	orr.w	fp, fp, r0
 8009674:	3304      	adds	r3, #4
 8009676:	e7a1      	b.n	80095bc <__gethex+0x174>
 8009678:	45a8      	cmp	r8, r5
 800967a:	d8e8      	bhi.n	800964e <__gethex+0x206>
 800967c:	2201      	movs	r2, #1
 800967e:	4628      	mov	r0, r5
 8009680:	9303      	str	r3, [sp, #12]
 8009682:	f7ff fe1b 	bl	80092bc <strncmp>
 8009686:	4926      	ldr	r1, [pc, #152]	; (8009720 <__gethex+0x2d8>)
 8009688:	9b03      	ldr	r3, [sp, #12]
 800968a:	2800      	cmp	r0, #0
 800968c:	d1df      	bne.n	800964e <__gethex+0x206>
 800968e:	e795      	b.n	80095bc <__gethex+0x174>
 8009690:	f04f 0b03 	mov.w	fp, #3
 8009694:	e7c5      	b.n	8009622 <__gethex+0x1da>
 8009696:	da0b      	bge.n	80096b0 <__gethex+0x268>
 8009698:	eba5 0800 	sub.w	r8, r5, r0
 800969c:	4621      	mov	r1, r4
 800969e:	4642      	mov	r2, r8
 80096a0:	4648      	mov	r0, r9
 80096a2:	f7fe fb01 	bl	8007ca8 <__lshift>
 80096a6:	eba6 0608 	sub.w	r6, r6, r8
 80096aa:	4604      	mov	r4, r0
 80096ac:	f100 0a14 	add.w	sl, r0, #20
 80096b0:	f04f 0b00 	mov.w	fp, #0
 80096b4:	e7ba      	b.n	800962c <__gethex+0x1e4>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	42b3      	cmp	r3, r6
 80096ba:	dd73      	ble.n	80097a4 <__gethex+0x35c>
 80096bc:	1b9e      	subs	r6, r3, r6
 80096be:	42b5      	cmp	r5, r6
 80096c0:	dc34      	bgt.n	800972c <__gethex+0x2e4>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d023      	beq.n	8009710 <__gethex+0x2c8>
 80096c8:	2b03      	cmp	r3, #3
 80096ca:	d025      	beq.n	8009718 <__gethex+0x2d0>
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d115      	bne.n	80096fc <__gethex+0x2b4>
 80096d0:	42b5      	cmp	r5, r6
 80096d2:	d113      	bne.n	80096fc <__gethex+0x2b4>
 80096d4:	2d01      	cmp	r5, #1
 80096d6:	d10b      	bne.n	80096f0 <__gethex+0x2a8>
 80096d8:	9a02      	ldr	r2, [sp, #8]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	2301      	movs	r3, #1
 80096e0:	6123      	str	r3, [r4, #16]
 80096e2:	f8ca 3000 	str.w	r3, [sl]
 80096e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80096ec:	601c      	str	r4, [r3, #0]
 80096ee:	e735      	b.n	800955c <__gethex+0x114>
 80096f0:	1e69      	subs	r1, r5, #1
 80096f2:	4620      	mov	r0, r4
 80096f4:	f7fe fd0a 	bl	800810c <__any_on>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d1ed      	bne.n	80096d8 <__gethex+0x290>
 80096fc:	4621      	mov	r1, r4
 80096fe:	4648      	mov	r0, r9
 8009700:	f7fe f8b8 	bl	8007874 <_Bfree>
 8009704:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009706:	2300      	movs	r3, #0
 8009708:	6013      	str	r3, [r2, #0]
 800970a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800970e:	e725      	b.n	800955c <__gethex+0x114>
 8009710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1f2      	bne.n	80096fc <__gethex+0x2b4>
 8009716:	e7df      	b.n	80096d8 <__gethex+0x290>
 8009718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1dc      	bne.n	80096d8 <__gethex+0x290>
 800971e:	e7ed      	b.n	80096fc <__gethex+0x2b4>
 8009720:	0800a4a4 	.word	0x0800a4a4
 8009724:	0800a339 	.word	0x0800a339
 8009728:	0800a64e 	.word	0x0800a64e
 800972c:	f106 38ff 	add.w	r8, r6, #4294967295
 8009730:	f1bb 0f00 	cmp.w	fp, #0
 8009734:	d133      	bne.n	800979e <__gethex+0x356>
 8009736:	f1b8 0f00 	cmp.w	r8, #0
 800973a:	d004      	beq.n	8009746 <__gethex+0x2fe>
 800973c:	4641      	mov	r1, r8
 800973e:	4620      	mov	r0, r4
 8009740:	f7fe fce4 	bl	800810c <__any_on>
 8009744:	4683      	mov	fp, r0
 8009746:	ea4f 1268 	mov.w	r2, r8, asr #5
 800974a:	2301      	movs	r3, #1
 800974c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009750:	f008 081f 	and.w	r8, r8, #31
 8009754:	fa03 f308 	lsl.w	r3, r3, r8
 8009758:	4213      	tst	r3, r2
 800975a:	4631      	mov	r1, r6
 800975c:	4620      	mov	r0, r4
 800975e:	bf18      	it	ne
 8009760:	f04b 0b02 	orrne.w	fp, fp, #2
 8009764:	1bad      	subs	r5, r5, r6
 8009766:	f7ff fe07 	bl	8009378 <rshift>
 800976a:	687e      	ldr	r6, [r7, #4]
 800976c:	f04f 0802 	mov.w	r8, #2
 8009770:	f1bb 0f00 	cmp.w	fp, #0
 8009774:	d04a      	beq.n	800980c <__gethex+0x3c4>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b02      	cmp	r3, #2
 800977a:	d016      	beq.n	80097aa <__gethex+0x362>
 800977c:	2b03      	cmp	r3, #3
 800977e:	d018      	beq.n	80097b2 <__gethex+0x36a>
 8009780:	2b01      	cmp	r3, #1
 8009782:	d109      	bne.n	8009798 <__gethex+0x350>
 8009784:	f01b 0f02 	tst.w	fp, #2
 8009788:	d006      	beq.n	8009798 <__gethex+0x350>
 800978a:	f8da 3000 	ldr.w	r3, [sl]
 800978e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009792:	f01b 0f01 	tst.w	fp, #1
 8009796:	d10f      	bne.n	80097b8 <__gethex+0x370>
 8009798:	f048 0810 	orr.w	r8, r8, #16
 800979c:	e036      	b.n	800980c <__gethex+0x3c4>
 800979e:	f04f 0b01 	mov.w	fp, #1
 80097a2:	e7d0      	b.n	8009746 <__gethex+0x2fe>
 80097a4:	f04f 0801 	mov.w	r8, #1
 80097a8:	e7e2      	b.n	8009770 <__gethex+0x328>
 80097aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097ac:	f1c3 0301 	rsb	r3, r3, #1
 80097b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80097b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d0ef      	beq.n	8009798 <__gethex+0x350>
 80097b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80097bc:	f104 0214 	add.w	r2, r4, #20
 80097c0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80097ca:	2300      	movs	r3, #0
 80097cc:	4694      	mov	ip, r2
 80097ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80097d2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80097d6:	d01e      	beq.n	8009816 <__gethex+0x3ce>
 80097d8:	3101      	adds	r1, #1
 80097da:	f8cc 1000 	str.w	r1, [ip]
 80097de:	f1b8 0f02 	cmp.w	r8, #2
 80097e2:	f104 0214 	add.w	r2, r4, #20
 80097e6:	d13d      	bne.n	8009864 <__gethex+0x41c>
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	42ab      	cmp	r3, r5
 80097ee:	d10b      	bne.n	8009808 <__gethex+0x3c0>
 80097f0:	1169      	asrs	r1, r5, #5
 80097f2:	2301      	movs	r3, #1
 80097f4:	f005 051f 	and.w	r5, r5, #31
 80097f8:	fa03 f505 	lsl.w	r5, r3, r5
 80097fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009800:	421d      	tst	r5, r3
 8009802:	bf18      	it	ne
 8009804:	f04f 0801 	movne.w	r8, #1
 8009808:	f048 0820 	orr.w	r8, r8, #32
 800980c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800980e:	601c      	str	r4, [r3, #0]
 8009810:	9b02      	ldr	r3, [sp, #8]
 8009812:	601e      	str	r6, [r3, #0]
 8009814:	e6a2      	b.n	800955c <__gethex+0x114>
 8009816:	4290      	cmp	r0, r2
 8009818:	f842 3c04 	str.w	r3, [r2, #-4]
 800981c:	d8d6      	bhi.n	80097cc <__gethex+0x384>
 800981e:	68a2      	ldr	r2, [r4, #8]
 8009820:	4593      	cmp	fp, r2
 8009822:	db17      	blt.n	8009854 <__gethex+0x40c>
 8009824:	6861      	ldr	r1, [r4, #4]
 8009826:	4648      	mov	r0, r9
 8009828:	3101      	adds	r1, #1
 800982a:	f7fd ffe3 	bl	80077f4 <_Balloc>
 800982e:	4682      	mov	sl, r0
 8009830:	b918      	cbnz	r0, 800983a <__gethex+0x3f2>
 8009832:	4b1b      	ldr	r3, [pc, #108]	; (80098a0 <__gethex+0x458>)
 8009834:	4602      	mov	r2, r0
 8009836:	2184      	movs	r1, #132	; 0x84
 8009838:	e6b3      	b.n	80095a2 <__gethex+0x15a>
 800983a:	6922      	ldr	r2, [r4, #16]
 800983c:	3202      	adds	r2, #2
 800983e:	f104 010c 	add.w	r1, r4, #12
 8009842:	0092      	lsls	r2, r2, #2
 8009844:	300c      	adds	r0, #12
 8009846:	f7fd f844 	bl	80068d2 <memcpy>
 800984a:	4621      	mov	r1, r4
 800984c:	4648      	mov	r0, r9
 800984e:	f7fe f811 	bl	8007874 <_Bfree>
 8009852:	4654      	mov	r4, sl
 8009854:	6922      	ldr	r2, [r4, #16]
 8009856:	1c51      	adds	r1, r2, #1
 8009858:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800985c:	6121      	str	r1, [r4, #16]
 800985e:	2101      	movs	r1, #1
 8009860:	6151      	str	r1, [r2, #20]
 8009862:	e7bc      	b.n	80097de <__gethex+0x396>
 8009864:	6921      	ldr	r1, [r4, #16]
 8009866:	4559      	cmp	r1, fp
 8009868:	dd0b      	ble.n	8009882 <__gethex+0x43a>
 800986a:	2101      	movs	r1, #1
 800986c:	4620      	mov	r0, r4
 800986e:	f7ff fd83 	bl	8009378 <rshift>
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	3601      	adds	r6, #1
 8009876:	42b3      	cmp	r3, r6
 8009878:	f6ff aedb 	blt.w	8009632 <__gethex+0x1ea>
 800987c:	f04f 0801 	mov.w	r8, #1
 8009880:	e7c2      	b.n	8009808 <__gethex+0x3c0>
 8009882:	f015 051f 	ands.w	r5, r5, #31
 8009886:	d0f9      	beq.n	800987c <__gethex+0x434>
 8009888:	9b01      	ldr	r3, [sp, #4]
 800988a:	441a      	add	r2, r3
 800988c:	f1c5 0520 	rsb	r5, r5, #32
 8009890:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009894:	f7fe f8a0 	bl	80079d8 <__hi0bits>
 8009898:	42a8      	cmp	r0, r5
 800989a:	dbe6      	blt.n	800986a <__gethex+0x422>
 800989c:	e7ee      	b.n	800987c <__gethex+0x434>
 800989e:	bf00      	nop
 80098a0:	0800a339 	.word	0x0800a339

080098a4 <L_shift>:
 80098a4:	f1c2 0208 	rsb	r2, r2, #8
 80098a8:	0092      	lsls	r2, r2, #2
 80098aa:	b570      	push	{r4, r5, r6, lr}
 80098ac:	f1c2 0620 	rsb	r6, r2, #32
 80098b0:	6843      	ldr	r3, [r0, #4]
 80098b2:	6804      	ldr	r4, [r0, #0]
 80098b4:	fa03 f506 	lsl.w	r5, r3, r6
 80098b8:	432c      	orrs	r4, r5
 80098ba:	40d3      	lsrs	r3, r2
 80098bc:	6004      	str	r4, [r0, #0]
 80098be:	f840 3f04 	str.w	r3, [r0, #4]!
 80098c2:	4288      	cmp	r0, r1
 80098c4:	d3f4      	bcc.n	80098b0 <L_shift+0xc>
 80098c6:	bd70      	pop	{r4, r5, r6, pc}

080098c8 <__match>:
 80098c8:	b530      	push	{r4, r5, lr}
 80098ca:	6803      	ldr	r3, [r0, #0]
 80098cc:	3301      	adds	r3, #1
 80098ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098d2:	b914      	cbnz	r4, 80098da <__match+0x12>
 80098d4:	6003      	str	r3, [r0, #0]
 80098d6:	2001      	movs	r0, #1
 80098d8:	bd30      	pop	{r4, r5, pc}
 80098da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80098e2:	2d19      	cmp	r5, #25
 80098e4:	bf98      	it	ls
 80098e6:	3220      	addls	r2, #32
 80098e8:	42a2      	cmp	r2, r4
 80098ea:	d0f0      	beq.n	80098ce <__match+0x6>
 80098ec:	2000      	movs	r0, #0
 80098ee:	e7f3      	b.n	80098d8 <__match+0x10>

080098f0 <__hexnan>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	680b      	ldr	r3, [r1, #0]
 80098f6:	6801      	ldr	r1, [r0, #0]
 80098f8:	115e      	asrs	r6, r3, #5
 80098fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80098fe:	f013 031f 	ands.w	r3, r3, #31
 8009902:	b087      	sub	sp, #28
 8009904:	bf18      	it	ne
 8009906:	3604      	addne	r6, #4
 8009908:	2500      	movs	r5, #0
 800990a:	1f37      	subs	r7, r6, #4
 800990c:	4682      	mov	sl, r0
 800990e:	4690      	mov	r8, r2
 8009910:	9301      	str	r3, [sp, #4]
 8009912:	f846 5c04 	str.w	r5, [r6, #-4]
 8009916:	46b9      	mov	r9, r7
 8009918:	463c      	mov	r4, r7
 800991a:	9502      	str	r5, [sp, #8]
 800991c:	46ab      	mov	fp, r5
 800991e:	784a      	ldrb	r2, [r1, #1]
 8009920:	1c4b      	adds	r3, r1, #1
 8009922:	9303      	str	r3, [sp, #12]
 8009924:	b342      	cbz	r2, 8009978 <__hexnan+0x88>
 8009926:	4610      	mov	r0, r2
 8009928:	9105      	str	r1, [sp, #20]
 800992a:	9204      	str	r2, [sp, #16]
 800992c:	f7ff fd76 	bl	800941c <__hexdig_fun>
 8009930:	2800      	cmp	r0, #0
 8009932:	d14f      	bne.n	80099d4 <__hexnan+0xe4>
 8009934:	9a04      	ldr	r2, [sp, #16]
 8009936:	9905      	ldr	r1, [sp, #20]
 8009938:	2a20      	cmp	r2, #32
 800993a:	d818      	bhi.n	800996e <__hexnan+0x7e>
 800993c:	9b02      	ldr	r3, [sp, #8]
 800993e:	459b      	cmp	fp, r3
 8009940:	dd13      	ble.n	800996a <__hexnan+0x7a>
 8009942:	454c      	cmp	r4, r9
 8009944:	d206      	bcs.n	8009954 <__hexnan+0x64>
 8009946:	2d07      	cmp	r5, #7
 8009948:	dc04      	bgt.n	8009954 <__hexnan+0x64>
 800994a:	462a      	mov	r2, r5
 800994c:	4649      	mov	r1, r9
 800994e:	4620      	mov	r0, r4
 8009950:	f7ff ffa8 	bl	80098a4 <L_shift>
 8009954:	4544      	cmp	r4, r8
 8009956:	d950      	bls.n	80099fa <__hexnan+0x10a>
 8009958:	2300      	movs	r3, #0
 800995a:	f1a4 0904 	sub.w	r9, r4, #4
 800995e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009962:	f8cd b008 	str.w	fp, [sp, #8]
 8009966:	464c      	mov	r4, r9
 8009968:	461d      	mov	r5, r3
 800996a:	9903      	ldr	r1, [sp, #12]
 800996c:	e7d7      	b.n	800991e <__hexnan+0x2e>
 800996e:	2a29      	cmp	r2, #41	; 0x29
 8009970:	d155      	bne.n	8009a1e <__hexnan+0x12e>
 8009972:	3102      	adds	r1, #2
 8009974:	f8ca 1000 	str.w	r1, [sl]
 8009978:	f1bb 0f00 	cmp.w	fp, #0
 800997c:	d04f      	beq.n	8009a1e <__hexnan+0x12e>
 800997e:	454c      	cmp	r4, r9
 8009980:	d206      	bcs.n	8009990 <__hexnan+0xa0>
 8009982:	2d07      	cmp	r5, #7
 8009984:	dc04      	bgt.n	8009990 <__hexnan+0xa0>
 8009986:	462a      	mov	r2, r5
 8009988:	4649      	mov	r1, r9
 800998a:	4620      	mov	r0, r4
 800998c:	f7ff ff8a 	bl	80098a4 <L_shift>
 8009990:	4544      	cmp	r4, r8
 8009992:	d934      	bls.n	80099fe <__hexnan+0x10e>
 8009994:	f1a8 0204 	sub.w	r2, r8, #4
 8009998:	4623      	mov	r3, r4
 800999a:	f853 1b04 	ldr.w	r1, [r3], #4
 800999e:	f842 1f04 	str.w	r1, [r2, #4]!
 80099a2:	429f      	cmp	r7, r3
 80099a4:	d2f9      	bcs.n	800999a <__hexnan+0xaa>
 80099a6:	1b3b      	subs	r3, r7, r4
 80099a8:	f023 0303 	bic.w	r3, r3, #3
 80099ac:	3304      	adds	r3, #4
 80099ae:	3e03      	subs	r6, #3
 80099b0:	3401      	adds	r4, #1
 80099b2:	42a6      	cmp	r6, r4
 80099b4:	bf38      	it	cc
 80099b6:	2304      	movcc	r3, #4
 80099b8:	4443      	add	r3, r8
 80099ba:	2200      	movs	r2, #0
 80099bc:	f843 2b04 	str.w	r2, [r3], #4
 80099c0:	429f      	cmp	r7, r3
 80099c2:	d2fb      	bcs.n	80099bc <__hexnan+0xcc>
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	b91b      	cbnz	r3, 80099d0 <__hexnan+0xe0>
 80099c8:	4547      	cmp	r7, r8
 80099ca:	d126      	bne.n	8009a1a <__hexnan+0x12a>
 80099cc:	2301      	movs	r3, #1
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	2005      	movs	r0, #5
 80099d2:	e025      	b.n	8009a20 <__hexnan+0x130>
 80099d4:	3501      	adds	r5, #1
 80099d6:	2d08      	cmp	r5, #8
 80099d8:	f10b 0b01 	add.w	fp, fp, #1
 80099dc:	dd06      	ble.n	80099ec <__hexnan+0xfc>
 80099de:	4544      	cmp	r4, r8
 80099e0:	d9c3      	bls.n	800996a <__hexnan+0x7a>
 80099e2:	2300      	movs	r3, #0
 80099e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80099e8:	2501      	movs	r5, #1
 80099ea:	3c04      	subs	r4, #4
 80099ec:	6822      	ldr	r2, [r4, #0]
 80099ee:	f000 000f 	and.w	r0, r0, #15
 80099f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80099f6:	6020      	str	r0, [r4, #0]
 80099f8:	e7b7      	b.n	800996a <__hexnan+0x7a>
 80099fa:	2508      	movs	r5, #8
 80099fc:	e7b5      	b.n	800996a <__hexnan+0x7a>
 80099fe:	9b01      	ldr	r3, [sp, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d0df      	beq.n	80099c4 <__hexnan+0xd4>
 8009a04:	f1c3 0320 	rsb	r3, r3, #32
 8009a08:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0c:	40da      	lsrs	r2, r3
 8009a0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a12:	4013      	ands	r3, r2
 8009a14:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a18:	e7d4      	b.n	80099c4 <__hexnan+0xd4>
 8009a1a:	3f04      	subs	r7, #4
 8009a1c:	e7d2      	b.n	80099c4 <__hexnan+0xd4>
 8009a1e:	2004      	movs	r0, #4
 8009a20:	b007      	add	sp, #28
 8009a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a26 <__ascii_mbtowc>:
 8009a26:	b082      	sub	sp, #8
 8009a28:	b901      	cbnz	r1, 8009a2c <__ascii_mbtowc+0x6>
 8009a2a:	a901      	add	r1, sp, #4
 8009a2c:	b142      	cbz	r2, 8009a40 <__ascii_mbtowc+0x1a>
 8009a2e:	b14b      	cbz	r3, 8009a44 <__ascii_mbtowc+0x1e>
 8009a30:	7813      	ldrb	r3, [r2, #0]
 8009a32:	600b      	str	r3, [r1, #0]
 8009a34:	7812      	ldrb	r2, [r2, #0]
 8009a36:	1e10      	subs	r0, r2, #0
 8009a38:	bf18      	it	ne
 8009a3a:	2001      	movne	r0, #1
 8009a3c:	b002      	add	sp, #8
 8009a3e:	4770      	bx	lr
 8009a40:	4610      	mov	r0, r2
 8009a42:	e7fb      	b.n	8009a3c <__ascii_mbtowc+0x16>
 8009a44:	f06f 0001 	mvn.w	r0, #1
 8009a48:	e7f8      	b.n	8009a3c <__ascii_mbtowc+0x16>

08009a4a <_realloc_r>:
 8009a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a4e:	4680      	mov	r8, r0
 8009a50:	4614      	mov	r4, r2
 8009a52:	460e      	mov	r6, r1
 8009a54:	b921      	cbnz	r1, 8009a60 <_realloc_r+0x16>
 8009a56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	f7fd be3e 	b.w	80076dc <_malloc_r>
 8009a60:	b92a      	cbnz	r2, 8009a6e <_realloc_r+0x24>
 8009a62:	f7fd fdc7 	bl	80075f4 <_free_r>
 8009a66:	4625      	mov	r5, r4
 8009a68:	4628      	mov	r0, r5
 8009a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a6e:	f000 f842 	bl	8009af6 <_malloc_usable_size_r>
 8009a72:	4284      	cmp	r4, r0
 8009a74:	4607      	mov	r7, r0
 8009a76:	d802      	bhi.n	8009a7e <_realloc_r+0x34>
 8009a78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a7c:	d812      	bhi.n	8009aa4 <_realloc_r+0x5a>
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4640      	mov	r0, r8
 8009a82:	f7fd fe2b 	bl	80076dc <_malloc_r>
 8009a86:	4605      	mov	r5, r0
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d0ed      	beq.n	8009a68 <_realloc_r+0x1e>
 8009a8c:	42bc      	cmp	r4, r7
 8009a8e:	4622      	mov	r2, r4
 8009a90:	4631      	mov	r1, r6
 8009a92:	bf28      	it	cs
 8009a94:	463a      	movcs	r2, r7
 8009a96:	f7fc ff1c 	bl	80068d2 <memcpy>
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	f7fd fda9 	bl	80075f4 <_free_r>
 8009aa2:	e7e1      	b.n	8009a68 <_realloc_r+0x1e>
 8009aa4:	4635      	mov	r5, r6
 8009aa6:	e7df      	b.n	8009a68 <_realloc_r+0x1e>

08009aa8 <__ascii_wctomb>:
 8009aa8:	b149      	cbz	r1, 8009abe <__ascii_wctomb+0x16>
 8009aaa:	2aff      	cmp	r2, #255	; 0xff
 8009aac:	bf85      	ittet	hi
 8009aae:	238a      	movhi	r3, #138	; 0x8a
 8009ab0:	6003      	strhi	r3, [r0, #0]
 8009ab2:	700a      	strbls	r2, [r1, #0]
 8009ab4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ab8:	bf98      	it	ls
 8009aba:	2001      	movls	r0, #1
 8009abc:	4770      	bx	lr
 8009abe:	4608      	mov	r0, r1
 8009ac0:	4770      	bx	lr
	...

08009ac4 <fiprintf>:
 8009ac4:	b40e      	push	{r1, r2, r3}
 8009ac6:	b503      	push	{r0, r1, lr}
 8009ac8:	4601      	mov	r1, r0
 8009aca:	ab03      	add	r3, sp, #12
 8009acc:	4805      	ldr	r0, [pc, #20]	; (8009ae4 <fiprintf+0x20>)
 8009ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ad2:	6800      	ldr	r0, [r0, #0]
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	f000 f83f 	bl	8009b58 <_vfiprintf_r>
 8009ada:	b002      	add	sp, #8
 8009adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ae0:	b003      	add	sp, #12
 8009ae2:	4770      	bx	lr
 8009ae4:	20000064 	.word	0x20000064

08009ae8 <abort>:
 8009ae8:	b508      	push	{r3, lr}
 8009aea:	2006      	movs	r0, #6
 8009aec:	f000 fa0c 	bl	8009f08 <raise>
 8009af0:	2001      	movs	r0, #1
 8009af2:	f7f8 f833 	bl	8001b5c <_exit>

08009af6 <_malloc_usable_size_r>:
 8009af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009afa:	1f18      	subs	r0, r3, #4
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	bfbc      	itt	lt
 8009b00:	580b      	ldrlt	r3, [r1, r0]
 8009b02:	18c0      	addlt	r0, r0, r3
 8009b04:	4770      	bx	lr

08009b06 <__sfputc_r>:
 8009b06:	6893      	ldr	r3, [r2, #8]
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	b410      	push	{r4}
 8009b0e:	6093      	str	r3, [r2, #8]
 8009b10:	da08      	bge.n	8009b24 <__sfputc_r+0x1e>
 8009b12:	6994      	ldr	r4, [r2, #24]
 8009b14:	42a3      	cmp	r3, r4
 8009b16:	db01      	blt.n	8009b1c <__sfputc_r+0x16>
 8009b18:	290a      	cmp	r1, #10
 8009b1a:	d103      	bne.n	8009b24 <__sfputc_r+0x1e>
 8009b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b20:	f000 b934 	b.w	8009d8c <__swbuf_r>
 8009b24:	6813      	ldr	r3, [r2, #0]
 8009b26:	1c58      	adds	r0, r3, #1
 8009b28:	6010      	str	r0, [r2, #0]
 8009b2a:	7019      	strb	r1, [r3, #0]
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <__sfputs_r>:
 8009b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b36:	4606      	mov	r6, r0
 8009b38:	460f      	mov	r7, r1
 8009b3a:	4614      	mov	r4, r2
 8009b3c:	18d5      	adds	r5, r2, r3
 8009b3e:	42ac      	cmp	r4, r5
 8009b40:	d101      	bne.n	8009b46 <__sfputs_r+0x12>
 8009b42:	2000      	movs	r0, #0
 8009b44:	e007      	b.n	8009b56 <__sfputs_r+0x22>
 8009b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b4a:	463a      	mov	r2, r7
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f7ff ffda 	bl	8009b06 <__sfputc_r>
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	d1f3      	bne.n	8009b3e <__sfputs_r+0xa>
 8009b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b58 <_vfiprintf_r>:
 8009b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	460d      	mov	r5, r1
 8009b5e:	b09d      	sub	sp, #116	; 0x74
 8009b60:	4614      	mov	r4, r2
 8009b62:	4698      	mov	r8, r3
 8009b64:	4606      	mov	r6, r0
 8009b66:	b118      	cbz	r0, 8009b70 <_vfiprintf_r+0x18>
 8009b68:	6a03      	ldr	r3, [r0, #32]
 8009b6a:	b90b      	cbnz	r3, 8009b70 <_vfiprintf_r+0x18>
 8009b6c:	f7fc fd60 	bl	8006630 <__sinit>
 8009b70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b72:	07d9      	lsls	r1, r3, #31
 8009b74:	d405      	bmi.n	8009b82 <_vfiprintf_r+0x2a>
 8009b76:	89ab      	ldrh	r3, [r5, #12]
 8009b78:	059a      	lsls	r2, r3, #22
 8009b7a:	d402      	bmi.n	8009b82 <_vfiprintf_r+0x2a>
 8009b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b7e:	f7fc fea6 	bl	80068ce <__retarget_lock_acquire_recursive>
 8009b82:	89ab      	ldrh	r3, [r5, #12]
 8009b84:	071b      	lsls	r3, r3, #28
 8009b86:	d501      	bpl.n	8009b8c <_vfiprintf_r+0x34>
 8009b88:	692b      	ldr	r3, [r5, #16]
 8009b8a:	b99b      	cbnz	r3, 8009bb4 <_vfiprintf_r+0x5c>
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f000 f93a 	bl	8009e08 <__swsetup_r>
 8009b94:	b170      	cbz	r0, 8009bb4 <_vfiprintf_r+0x5c>
 8009b96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b98:	07dc      	lsls	r4, r3, #31
 8009b9a:	d504      	bpl.n	8009ba6 <_vfiprintf_r+0x4e>
 8009b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba0:	b01d      	add	sp, #116	; 0x74
 8009ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba6:	89ab      	ldrh	r3, [r5, #12]
 8009ba8:	0598      	lsls	r0, r3, #22
 8009baa:	d4f7      	bmi.n	8009b9c <_vfiprintf_r+0x44>
 8009bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bae:	f7fc fe8f 	bl	80068d0 <__retarget_lock_release_recursive>
 8009bb2:	e7f3      	b.n	8009b9c <_vfiprintf_r+0x44>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb8:	2320      	movs	r3, #32
 8009bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bc2:	2330      	movs	r3, #48	; 0x30
 8009bc4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009d78 <_vfiprintf_r+0x220>
 8009bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bcc:	f04f 0901 	mov.w	r9, #1
 8009bd0:	4623      	mov	r3, r4
 8009bd2:	469a      	mov	sl, r3
 8009bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bd8:	b10a      	cbz	r2, 8009bde <_vfiprintf_r+0x86>
 8009bda:	2a25      	cmp	r2, #37	; 0x25
 8009bdc:	d1f9      	bne.n	8009bd2 <_vfiprintf_r+0x7a>
 8009bde:	ebba 0b04 	subs.w	fp, sl, r4
 8009be2:	d00b      	beq.n	8009bfc <_vfiprintf_r+0xa4>
 8009be4:	465b      	mov	r3, fp
 8009be6:	4622      	mov	r2, r4
 8009be8:	4629      	mov	r1, r5
 8009bea:	4630      	mov	r0, r6
 8009bec:	f7ff ffa2 	bl	8009b34 <__sfputs_r>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f000 80a9 	beq.w	8009d48 <_vfiprintf_r+0x1f0>
 8009bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bf8:	445a      	add	r2, fp
 8009bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8009bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f000 80a1 	beq.w	8009d48 <_vfiprintf_r+0x1f0>
 8009c06:	2300      	movs	r3, #0
 8009c08:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c10:	f10a 0a01 	add.w	sl, sl, #1
 8009c14:	9304      	str	r3, [sp, #16]
 8009c16:	9307      	str	r3, [sp, #28]
 8009c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c1e:	4654      	mov	r4, sl
 8009c20:	2205      	movs	r2, #5
 8009c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c26:	4854      	ldr	r0, [pc, #336]	; (8009d78 <_vfiprintf_r+0x220>)
 8009c28:	f7f6 fad2 	bl	80001d0 <memchr>
 8009c2c:	9a04      	ldr	r2, [sp, #16]
 8009c2e:	b9d8      	cbnz	r0, 8009c68 <_vfiprintf_r+0x110>
 8009c30:	06d1      	lsls	r1, r2, #27
 8009c32:	bf44      	itt	mi
 8009c34:	2320      	movmi	r3, #32
 8009c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c3a:	0713      	lsls	r3, r2, #28
 8009c3c:	bf44      	itt	mi
 8009c3e:	232b      	movmi	r3, #43	; 0x2b
 8009c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c44:	f89a 3000 	ldrb.w	r3, [sl]
 8009c48:	2b2a      	cmp	r3, #42	; 0x2a
 8009c4a:	d015      	beq.n	8009c78 <_vfiprintf_r+0x120>
 8009c4c:	9a07      	ldr	r2, [sp, #28]
 8009c4e:	4654      	mov	r4, sl
 8009c50:	2000      	movs	r0, #0
 8009c52:	f04f 0c0a 	mov.w	ip, #10
 8009c56:	4621      	mov	r1, r4
 8009c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c5c:	3b30      	subs	r3, #48	; 0x30
 8009c5e:	2b09      	cmp	r3, #9
 8009c60:	d94d      	bls.n	8009cfe <_vfiprintf_r+0x1a6>
 8009c62:	b1b0      	cbz	r0, 8009c92 <_vfiprintf_r+0x13a>
 8009c64:	9207      	str	r2, [sp, #28]
 8009c66:	e014      	b.n	8009c92 <_vfiprintf_r+0x13a>
 8009c68:	eba0 0308 	sub.w	r3, r0, r8
 8009c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8009c70:	4313      	orrs	r3, r2
 8009c72:	9304      	str	r3, [sp, #16]
 8009c74:	46a2      	mov	sl, r4
 8009c76:	e7d2      	b.n	8009c1e <_vfiprintf_r+0xc6>
 8009c78:	9b03      	ldr	r3, [sp, #12]
 8009c7a:	1d19      	adds	r1, r3, #4
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	9103      	str	r1, [sp, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	bfbb      	ittet	lt
 8009c84:	425b      	neglt	r3, r3
 8009c86:	f042 0202 	orrlt.w	r2, r2, #2
 8009c8a:	9307      	strge	r3, [sp, #28]
 8009c8c:	9307      	strlt	r3, [sp, #28]
 8009c8e:	bfb8      	it	lt
 8009c90:	9204      	strlt	r2, [sp, #16]
 8009c92:	7823      	ldrb	r3, [r4, #0]
 8009c94:	2b2e      	cmp	r3, #46	; 0x2e
 8009c96:	d10c      	bne.n	8009cb2 <_vfiprintf_r+0x15a>
 8009c98:	7863      	ldrb	r3, [r4, #1]
 8009c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c9c:	d134      	bne.n	8009d08 <_vfiprintf_r+0x1b0>
 8009c9e:	9b03      	ldr	r3, [sp, #12]
 8009ca0:	1d1a      	adds	r2, r3, #4
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	9203      	str	r2, [sp, #12]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	bfb8      	it	lt
 8009caa:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cae:	3402      	adds	r4, #2
 8009cb0:	9305      	str	r3, [sp, #20]
 8009cb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009d88 <_vfiprintf_r+0x230>
 8009cb6:	7821      	ldrb	r1, [r4, #0]
 8009cb8:	2203      	movs	r2, #3
 8009cba:	4650      	mov	r0, sl
 8009cbc:	f7f6 fa88 	bl	80001d0 <memchr>
 8009cc0:	b138      	cbz	r0, 8009cd2 <_vfiprintf_r+0x17a>
 8009cc2:	9b04      	ldr	r3, [sp, #16]
 8009cc4:	eba0 000a 	sub.w	r0, r0, sl
 8009cc8:	2240      	movs	r2, #64	; 0x40
 8009cca:	4082      	lsls	r2, r0
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	3401      	adds	r4, #1
 8009cd0:	9304      	str	r3, [sp, #16]
 8009cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd6:	4829      	ldr	r0, [pc, #164]	; (8009d7c <_vfiprintf_r+0x224>)
 8009cd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cdc:	2206      	movs	r2, #6
 8009cde:	f7f6 fa77 	bl	80001d0 <memchr>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d03f      	beq.n	8009d66 <_vfiprintf_r+0x20e>
 8009ce6:	4b26      	ldr	r3, [pc, #152]	; (8009d80 <_vfiprintf_r+0x228>)
 8009ce8:	bb1b      	cbnz	r3, 8009d32 <_vfiprintf_r+0x1da>
 8009cea:	9b03      	ldr	r3, [sp, #12]
 8009cec:	3307      	adds	r3, #7
 8009cee:	f023 0307 	bic.w	r3, r3, #7
 8009cf2:	3308      	adds	r3, #8
 8009cf4:	9303      	str	r3, [sp, #12]
 8009cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf8:	443b      	add	r3, r7
 8009cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8009cfc:	e768      	b.n	8009bd0 <_vfiprintf_r+0x78>
 8009cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d02:	460c      	mov	r4, r1
 8009d04:	2001      	movs	r0, #1
 8009d06:	e7a6      	b.n	8009c56 <_vfiprintf_r+0xfe>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	3401      	adds	r4, #1
 8009d0c:	9305      	str	r3, [sp, #20]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	f04f 0c0a 	mov.w	ip, #10
 8009d14:	4620      	mov	r0, r4
 8009d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d1a:	3a30      	subs	r2, #48	; 0x30
 8009d1c:	2a09      	cmp	r2, #9
 8009d1e:	d903      	bls.n	8009d28 <_vfiprintf_r+0x1d0>
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d0c6      	beq.n	8009cb2 <_vfiprintf_r+0x15a>
 8009d24:	9105      	str	r1, [sp, #20]
 8009d26:	e7c4      	b.n	8009cb2 <_vfiprintf_r+0x15a>
 8009d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e7f0      	b.n	8009d14 <_vfiprintf_r+0x1bc>
 8009d32:	ab03      	add	r3, sp, #12
 8009d34:	9300      	str	r3, [sp, #0]
 8009d36:	462a      	mov	r2, r5
 8009d38:	4b12      	ldr	r3, [pc, #72]	; (8009d84 <_vfiprintf_r+0x22c>)
 8009d3a:	a904      	add	r1, sp, #16
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f7fb fe15 	bl	800596c <_printf_float>
 8009d42:	4607      	mov	r7, r0
 8009d44:	1c78      	adds	r0, r7, #1
 8009d46:	d1d6      	bne.n	8009cf6 <_vfiprintf_r+0x19e>
 8009d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d4a:	07d9      	lsls	r1, r3, #31
 8009d4c:	d405      	bmi.n	8009d5a <_vfiprintf_r+0x202>
 8009d4e:	89ab      	ldrh	r3, [r5, #12]
 8009d50:	059a      	lsls	r2, r3, #22
 8009d52:	d402      	bmi.n	8009d5a <_vfiprintf_r+0x202>
 8009d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d56:	f7fc fdbb 	bl	80068d0 <__retarget_lock_release_recursive>
 8009d5a:	89ab      	ldrh	r3, [r5, #12]
 8009d5c:	065b      	lsls	r3, r3, #25
 8009d5e:	f53f af1d 	bmi.w	8009b9c <_vfiprintf_r+0x44>
 8009d62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d64:	e71c      	b.n	8009ba0 <_vfiprintf_r+0x48>
 8009d66:	ab03      	add	r3, sp, #12
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	462a      	mov	r2, r5
 8009d6c:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <_vfiprintf_r+0x22c>)
 8009d6e:	a904      	add	r1, sp, #16
 8009d70:	4630      	mov	r0, r6
 8009d72:	f7fc f89f 	bl	8005eb4 <_printf_i>
 8009d76:	e7e4      	b.n	8009d42 <_vfiprintf_r+0x1ea>
 8009d78:	0800a5f9 	.word	0x0800a5f9
 8009d7c:	0800a603 	.word	0x0800a603
 8009d80:	0800596d 	.word	0x0800596d
 8009d84:	08009b35 	.word	0x08009b35
 8009d88:	0800a5ff 	.word	0x0800a5ff

08009d8c <__swbuf_r>:
 8009d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8e:	460e      	mov	r6, r1
 8009d90:	4614      	mov	r4, r2
 8009d92:	4605      	mov	r5, r0
 8009d94:	b118      	cbz	r0, 8009d9e <__swbuf_r+0x12>
 8009d96:	6a03      	ldr	r3, [r0, #32]
 8009d98:	b90b      	cbnz	r3, 8009d9e <__swbuf_r+0x12>
 8009d9a:	f7fc fc49 	bl	8006630 <__sinit>
 8009d9e:	69a3      	ldr	r3, [r4, #24]
 8009da0:	60a3      	str	r3, [r4, #8]
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	071a      	lsls	r2, r3, #28
 8009da6:	d525      	bpl.n	8009df4 <__swbuf_r+0x68>
 8009da8:	6923      	ldr	r3, [r4, #16]
 8009daa:	b31b      	cbz	r3, 8009df4 <__swbuf_r+0x68>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	6922      	ldr	r2, [r4, #16]
 8009db0:	1a98      	subs	r0, r3, r2
 8009db2:	6963      	ldr	r3, [r4, #20]
 8009db4:	b2f6      	uxtb	r6, r6
 8009db6:	4283      	cmp	r3, r0
 8009db8:	4637      	mov	r7, r6
 8009dba:	dc04      	bgt.n	8009dc6 <__swbuf_r+0x3a>
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f7ff fa3a 	bl	8009238 <_fflush_r>
 8009dc4:	b9e0      	cbnz	r0, 8009e00 <__swbuf_r+0x74>
 8009dc6:	68a3      	ldr	r3, [r4, #8]
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	60a3      	str	r3, [r4, #8]
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	1c5a      	adds	r2, r3, #1
 8009dd0:	6022      	str	r2, [r4, #0]
 8009dd2:	701e      	strb	r6, [r3, #0]
 8009dd4:	6962      	ldr	r2, [r4, #20]
 8009dd6:	1c43      	adds	r3, r0, #1
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d004      	beq.n	8009de6 <__swbuf_r+0x5a>
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	07db      	lsls	r3, r3, #31
 8009de0:	d506      	bpl.n	8009df0 <__swbuf_r+0x64>
 8009de2:	2e0a      	cmp	r6, #10
 8009de4:	d104      	bne.n	8009df0 <__swbuf_r+0x64>
 8009de6:	4621      	mov	r1, r4
 8009de8:	4628      	mov	r0, r5
 8009dea:	f7ff fa25 	bl	8009238 <_fflush_r>
 8009dee:	b938      	cbnz	r0, 8009e00 <__swbuf_r+0x74>
 8009df0:	4638      	mov	r0, r7
 8009df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009df4:	4621      	mov	r1, r4
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 f806 	bl	8009e08 <__swsetup_r>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d0d5      	beq.n	8009dac <__swbuf_r+0x20>
 8009e00:	f04f 37ff 	mov.w	r7, #4294967295
 8009e04:	e7f4      	b.n	8009df0 <__swbuf_r+0x64>
	...

08009e08 <__swsetup_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4b2a      	ldr	r3, [pc, #168]	; (8009eb4 <__swsetup_r+0xac>)
 8009e0c:	4605      	mov	r5, r0
 8009e0e:	6818      	ldr	r0, [r3, #0]
 8009e10:	460c      	mov	r4, r1
 8009e12:	b118      	cbz	r0, 8009e1c <__swsetup_r+0x14>
 8009e14:	6a03      	ldr	r3, [r0, #32]
 8009e16:	b90b      	cbnz	r3, 8009e1c <__swsetup_r+0x14>
 8009e18:	f7fc fc0a 	bl	8006630 <__sinit>
 8009e1c:	89a3      	ldrh	r3, [r4, #12]
 8009e1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e22:	0718      	lsls	r0, r3, #28
 8009e24:	d422      	bmi.n	8009e6c <__swsetup_r+0x64>
 8009e26:	06d9      	lsls	r1, r3, #27
 8009e28:	d407      	bmi.n	8009e3a <__swsetup_r+0x32>
 8009e2a:	2309      	movs	r3, #9
 8009e2c:	602b      	str	r3, [r5, #0]
 8009e2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e32:	81a3      	strh	r3, [r4, #12]
 8009e34:	f04f 30ff 	mov.w	r0, #4294967295
 8009e38:	e034      	b.n	8009ea4 <__swsetup_r+0x9c>
 8009e3a:	0758      	lsls	r0, r3, #29
 8009e3c:	d512      	bpl.n	8009e64 <__swsetup_r+0x5c>
 8009e3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e40:	b141      	cbz	r1, 8009e54 <__swsetup_r+0x4c>
 8009e42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e46:	4299      	cmp	r1, r3
 8009e48:	d002      	beq.n	8009e50 <__swsetup_r+0x48>
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	f7fd fbd2 	bl	80075f4 <_free_r>
 8009e50:	2300      	movs	r3, #0
 8009e52:	6363      	str	r3, [r4, #52]	; 0x34
 8009e54:	89a3      	ldrh	r3, [r4, #12]
 8009e56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e5a:	81a3      	strh	r3, [r4, #12]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	6063      	str	r3, [r4, #4]
 8009e60:	6923      	ldr	r3, [r4, #16]
 8009e62:	6023      	str	r3, [r4, #0]
 8009e64:	89a3      	ldrh	r3, [r4, #12]
 8009e66:	f043 0308 	orr.w	r3, r3, #8
 8009e6a:	81a3      	strh	r3, [r4, #12]
 8009e6c:	6923      	ldr	r3, [r4, #16]
 8009e6e:	b94b      	cbnz	r3, 8009e84 <__swsetup_r+0x7c>
 8009e70:	89a3      	ldrh	r3, [r4, #12]
 8009e72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e7a:	d003      	beq.n	8009e84 <__swsetup_r+0x7c>
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f000 f884 	bl	8009f8c <__smakebuf_r>
 8009e84:	89a0      	ldrh	r0, [r4, #12]
 8009e86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e8a:	f010 0301 	ands.w	r3, r0, #1
 8009e8e:	d00a      	beq.n	8009ea6 <__swsetup_r+0x9e>
 8009e90:	2300      	movs	r3, #0
 8009e92:	60a3      	str	r3, [r4, #8]
 8009e94:	6963      	ldr	r3, [r4, #20]
 8009e96:	425b      	negs	r3, r3
 8009e98:	61a3      	str	r3, [r4, #24]
 8009e9a:	6923      	ldr	r3, [r4, #16]
 8009e9c:	b943      	cbnz	r3, 8009eb0 <__swsetup_r+0xa8>
 8009e9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ea2:	d1c4      	bne.n	8009e2e <__swsetup_r+0x26>
 8009ea4:	bd38      	pop	{r3, r4, r5, pc}
 8009ea6:	0781      	lsls	r1, r0, #30
 8009ea8:	bf58      	it	pl
 8009eaa:	6963      	ldrpl	r3, [r4, #20]
 8009eac:	60a3      	str	r3, [r4, #8]
 8009eae:	e7f4      	b.n	8009e9a <__swsetup_r+0x92>
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	e7f7      	b.n	8009ea4 <__swsetup_r+0x9c>
 8009eb4:	20000064 	.word	0x20000064

08009eb8 <_raise_r>:
 8009eb8:	291f      	cmp	r1, #31
 8009eba:	b538      	push	{r3, r4, r5, lr}
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	460d      	mov	r5, r1
 8009ec0:	d904      	bls.n	8009ecc <_raise_r+0x14>
 8009ec2:	2316      	movs	r3, #22
 8009ec4:	6003      	str	r3, [r0, #0]
 8009ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009ece:	b112      	cbz	r2, 8009ed6 <_raise_r+0x1e>
 8009ed0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ed4:	b94b      	cbnz	r3, 8009eea <_raise_r+0x32>
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	f000 f830 	bl	8009f3c <_getpid_r>
 8009edc:	462a      	mov	r2, r5
 8009ede:	4601      	mov	r1, r0
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ee6:	f000 b817 	b.w	8009f18 <_kill_r>
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d00a      	beq.n	8009f04 <_raise_r+0x4c>
 8009eee:	1c59      	adds	r1, r3, #1
 8009ef0:	d103      	bne.n	8009efa <_raise_r+0x42>
 8009ef2:	2316      	movs	r3, #22
 8009ef4:	6003      	str	r3, [r0, #0]
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	e7e7      	b.n	8009eca <_raise_r+0x12>
 8009efa:	2400      	movs	r4, #0
 8009efc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f00:	4628      	mov	r0, r5
 8009f02:	4798      	blx	r3
 8009f04:	2000      	movs	r0, #0
 8009f06:	e7e0      	b.n	8009eca <_raise_r+0x12>

08009f08 <raise>:
 8009f08:	4b02      	ldr	r3, [pc, #8]	; (8009f14 <raise+0xc>)
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	6818      	ldr	r0, [r3, #0]
 8009f0e:	f7ff bfd3 	b.w	8009eb8 <_raise_r>
 8009f12:	bf00      	nop
 8009f14:	20000064 	.word	0x20000064

08009f18 <_kill_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4d07      	ldr	r5, [pc, #28]	; (8009f38 <_kill_r+0x20>)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4604      	mov	r4, r0
 8009f20:	4608      	mov	r0, r1
 8009f22:	4611      	mov	r1, r2
 8009f24:	602b      	str	r3, [r5, #0]
 8009f26:	f7f7 fe09 	bl	8001b3c <_kill>
 8009f2a:	1c43      	adds	r3, r0, #1
 8009f2c:	d102      	bne.n	8009f34 <_kill_r+0x1c>
 8009f2e:	682b      	ldr	r3, [r5, #0]
 8009f30:	b103      	cbz	r3, 8009f34 <_kill_r+0x1c>
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	bd38      	pop	{r3, r4, r5, pc}
 8009f36:	bf00      	nop
 8009f38:	2000089c 	.word	0x2000089c

08009f3c <_getpid_r>:
 8009f3c:	f7f7 bdf6 	b.w	8001b2c <_getpid>

08009f40 <__swhatbuf_r>:
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	460c      	mov	r4, r1
 8009f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f48:	2900      	cmp	r1, #0
 8009f4a:	b096      	sub	sp, #88	; 0x58
 8009f4c:	4615      	mov	r5, r2
 8009f4e:	461e      	mov	r6, r3
 8009f50:	da0d      	bge.n	8009f6e <__swhatbuf_r+0x2e>
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009f58:	f04f 0100 	mov.w	r1, #0
 8009f5c:	bf0c      	ite	eq
 8009f5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009f62:	2340      	movne	r3, #64	; 0x40
 8009f64:	2000      	movs	r0, #0
 8009f66:	6031      	str	r1, [r6, #0]
 8009f68:	602b      	str	r3, [r5, #0]
 8009f6a:	b016      	add	sp, #88	; 0x58
 8009f6c:	bd70      	pop	{r4, r5, r6, pc}
 8009f6e:	466a      	mov	r2, sp
 8009f70:	f000 f848 	bl	800a004 <_fstat_r>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	dbec      	blt.n	8009f52 <__swhatbuf_r+0x12>
 8009f78:	9901      	ldr	r1, [sp, #4]
 8009f7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009f7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f82:	4259      	negs	r1, r3
 8009f84:	4159      	adcs	r1, r3
 8009f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f8a:	e7eb      	b.n	8009f64 <__swhatbuf_r+0x24>

08009f8c <__smakebuf_r>:
 8009f8c:	898b      	ldrh	r3, [r1, #12]
 8009f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f90:	079d      	lsls	r5, r3, #30
 8009f92:	4606      	mov	r6, r0
 8009f94:	460c      	mov	r4, r1
 8009f96:	d507      	bpl.n	8009fa8 <__smakebuf_r+0x1c>
 8009f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	6123      	str	r3, [r4, #16]
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	6163      	str	r3, [r4, #20]
 8009fa4:	b002      	add	sp, #8
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}
 8009fa8:	ab01      	add	r3, sp, #4
 8009faa:	466a      	mov	r2, sp
 8009fac:	f7ff ffc8 	bl	8009f40 <__swhatbuf_r>
 8009fb0:	9900      	ldr	r1, [sp, #0]
 8009fb2:	4605      	mov	r5, r0
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7fd fb91 	bl	80076dc <_malloc_r>
 8009fba:	b948      	cbnz	r0, 8009fd0 <__smakebuf_r+0x44>
 8009fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fc0:	059a      	lsls	r2, r3, #22
 8009fc2:	d4ef      	bmi.n	8009fa4 <__smakebuf_r+0x18>
 8009fc4:	f023 0303 	bic.w	r3, r3, #3
 8009fc8:	f043 0302 	orr.w	r3, r3, #2
 8009fcc:	81a3      	strh	r3, [r4, #12]
 8009fce:	e7e3      	b.n	8009f98 <__smakebuf_r+0xc>
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	6020      	str	r0, [r4, #0]
 8009fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	9b00      	ldr	r3, [sp, #0]
 8009fdc:	6163      	str	r3, [r4, #20]
 8009fde:	9b01      	ldr	r3, [sp, #4]
 8009fe0:	6120      	str	r0, [r4, #16]
 8009fe2:	b15b      	cbz	r3, 8009ffc <__smakebuf_r+0x70>
 8009fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f000 f81d 	bl	800a028 <_isatty_r>
 8009fee:	b128      	cbz	r0, 8009ffc <__smakebuf_r+0x70>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	f023 0303 	bic.w	r3, r3, #3
 8009ff6:	f043 0301 	orr.w	r3, r3, #1
 8009ffa:	81a3      	strh	r3, [r4, #12]
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	431d      	orrs	r5, r3
 800a000:	81a5      	strh	r5, [r4, #12]
 800a002:	e7cf      	b.n	8009fa4 <__smakebuf_r+0x18>

0800a004 <_fstat_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d07      	ldr	r5, [pc, #28]	; (800a024 <_fstat_r+0x20>)
 800a008:	2300      	movs	r3, #0
 800a00a:	4604      	mov	r4, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	4611      	mov	r1, r2
 800a010:	602b      	str	r3, [r5, #0]
 800a012:	f7f7 fdf2 	bl	8001bfa <_fstat>
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	d102      	bne.n	800a020 <_fstat_r+0x1c>
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	b103      	cbz	r3, 800a020 <_fstat_r+0x1c>
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	bd38      	pop	{r3, r4, r5, pc}
 800a022:	bf00      	nop
 800a024:	2000089c 	.word	0x2000089c

0800a028 <_isatty_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4d06      	ldr	r5, [pc, #24]	; (800a044 <_isatty_r+0x1c>)
 800a02c:	2300      	movs	r3, #0
 800a02e:	4604      	mov	r4, r0
 800a030:	4608      	mov	r0, r1
 800a032:	602b      	str	r3, [r5, #0]
 800a034:	f7f7 fdf1 	bl	8001c1a <_isatty>
 800a038:	1c43      	adds	r3, r0, #1
 800a03a:	d102      	bne.n	800a042 <_isatty_r+0x1a>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	b103      	cbz	r3, 800a042 <_isatty_r+0x1a>
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	2000089c 	.word	0x2000089c

0800a048 <_init>:
 800a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04a:	bf00      	nop
 800a04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04e:	bc08      	pop	{r3}
 800a050:	469e      	mov	lr, r3
 800a052:	4770      	bx	lr

0800a054 <_fini>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	bf00      	nop
 800a058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05a:	bc08      	pop	{r3}
 800a05c:	469e      	mov	lr, r3
 800a05e:	4770      	bx	lr
